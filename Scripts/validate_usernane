#!/bin/sh


environment() {
  set_defaults() {
    #@ Pull the most recent dotfiles
    get_updated_dots

    #@ Reeset variables
    # unset DISK_ARRAY DOTS_EMAIL DOTS_USER swap_size reserved_space enable_encryption diskNames

    #@ Set default variables
    DISK_ARRAY="${DISK_ARRAY:-/dev/disk/by-id/nvme-HFM256GDJTNG-8310A_CY9CN00281150CJ46}"
    DOTS_EMAIL="${DOTS_EMAIL:-iamcraole@gmail.com}"
    DOTS_USER="${DOTS_USER:-Craole}"
    HOST_CLIENT="${HOST_CLIENT:-exampleHost}"
    swap_size=8
    reserved_space=1
    enable_encryption=true
  }

  parse_arguments() {
    #@ Parse arguments
    while [ "$#" -gt 0 ]; do
      case "$1" in
      #@ Set the DISK variable while handling missing info
      -d | --disk | --id)
        [ "$2" ] && {
          DISK_ARRAY="$2"
          shift
        }
        ;;
      -e | --email)
        [ "$2" ] && {
          DOTS_EMAIL="$2"
          shift
        }
        ;;
      -u | --user)
        [ "$2" ] && {
          DOTS_USER="$2"
          shift
        }
        ;;
      -s | --swap)
        [ "$2" ] && {
          swap_size="${2}"
          shift
        }
        ;;
      -r | --reserve)
        [ "$2" ] && {
          reserved_space="${2}"
          shift
        }
        ;;
      -n | --no-encrypt) enable_encryption=false ;;
      -h | --help)
        show_usage_guide
        exit 0
        ;;
      *) pout --invalid Option "${1}" ;;
      esac
      shift
    done
  }

  validate_elevation() {
    if [ "$(id -u)" -ne 0 ]; then
      pout --permission "Use \`sudo -1\` to enter the root/superuser prompt then run the script."
    fi
  }

  validate_vars() {
    validate_var_dots() {
      label="Dotfiles"
      value="$DOTS"

      #@ Exit early if info missing
      [ "$value" ] || pout --missing "$label"

      if [ -d "$value" ]; then
        printf "      %s |>  %s\n" "$label" "$value"
      else
        pout --missing "$value"
      fi
    }

    validate_var_disk() {
      label="Disk ID"
      value="$DISK_ARRAY"

      #@ Exit early if info missing
      [ "$value" ] || pout --missing "$label"

      #@ Update the disk id variable to strip whitespace and delimiters
      value=$(
        printf '%s' "$value" |
          #@ Remove leading and trailing whitespace
          sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' |
          #@ Replace delimiters with spaces
          tr -s '[:space:],;' ' '
      )

      #@ Ensure that each string resolves to a valid symlink
      for disk in $value; do
        [ -L "${disk}" ] ||
          pout --invalid "Disk" "${disk} [ Ex: /dev/disk/by-id/DISK_ID_HERE ]"
      done

      #@ Update Variable
      disk_count="$(printf "%s\n" "$value" | wc -w)"
      DISK_ARRAY="$value"

      #@ Display information
      if [ "$disk_count" -gt 1 ]; then
        printf "      %ss |>  %s\n" "$label" "$DISK_ARRAY"
        printf "  No. of Disks |>  %s\n" "$disk_count"
      else
        printf "       %s |>  %s\n" "$label" "$DISK_ARRAY"
      fi
    }

    validate_var_email() {
      label="Email"
      value="$DOTS_EMAIL"

      #@ Exit early if info missing
      [ "$value" ] || pout --missing "$label"

      #@ Use a regular expression to validate the git email address
      printf '%s' "$value" |
        grep -Eq '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' ||
        pout --invalid "$label" "${value}"

      #@ Display information
      printf "     Git Email |>  %s\n" "$value"

      #@ Update/Return Variable
      DOTS_EMAIL="$value"
    }

    validate_var_user() {
      label="Username"
      value="$DOTS_USER"

      #@ Exit early if info missing
      [ "$value" ] || pout --missing "$label"

      #@ Use a regular expression to validate
      printf '%s' "$value" | grep -Eq '^[A-Za-z0-9._-]+$' ||
        pout --invalid "$label" "${value}"

      #@ Display information
      printf "  Git Username |>  %s\n" "$value"

      #@ Update/Return Variable
      DOTS_USER="$value"
    }

    validate_var_swap_size() {
      label="Swap Size"
      value="$swap_size"

      #@ Exit early if info missing
      [ "$value" ] || pout --missing "$label"

      #@ Check if swap_space is a positive integer between 4 and 32
      { [ "$value" -ge 4 ] && [ "$value" -le 32 ]; } ||
        pout --invalid "$label" "${value} [ Min: 4 | Max: 32 ]"

      #@ Display information
      printf "     %s |>  %s\n" "$label" "$value"

      #@ Update/Return Variable
      swap_size="$value"
    }

    validate_var_reserved_space() {
      label="Reserved Space"
      value="$reserved_space"

      #@ Exit early if info missing
      [ "$value" ] || pout --missing "$label"

      #@ Check if reserved_space is a positive integer greater than or equal to 1
      [ "$value" -ge 1 ] ||
        pout --invalid "$label" "${value} [ Min: 1 ]"

      #@ Display information
      printf "%s |>  %s\n" "$label" "$value"

      #@ Update/Return Variable
      reserved_space="$value"
    }

    validate_var_enable_encryption() {
      label="Encryption"
      value="$enable_encryption"

      #@ Exit early if info missing
      [ "$value" ] || pout --missing "$label"

      #@ Check if encryption is either "true", "false", 1, or 0
      { [ "$value" = "true" ] || [ "$value" = "false" ] ||
        [ "$value" = "1" ] || [ "$value" = "0" ]; } ||
        pout --invalid "$label" "${value} [ true | false | 1 | 0 ]"

      #@ Update/Return Variable
      if [ "$value" = "false" ] || [ "$value" = "0" ]; then
        printf "    %s |>  %s\n" "$label" "Disabled"
        unset enable_encryption
      else
        printf "    %s |>  %s\n" "$label" "Enabled"
        enable_encryption="$value"
      fi
    }

    #@ Validate variables
    validate_var_dots
    validate_var_disk
    validate_var_email
    validate_var_user
    validate_var_swap_size
    validate_var_reserved_space
    validate_var_enable_encryption
  }

  validate_deps() {

    #@ List packages to check and install
    packages="git parted bat helix"

    #@ Install missing packages
    installed_packages="$(get_deps "$packages")"

    #@ Display the packages just installed
    [ "$installed_packages" ] &&
      printf "     Installed |>  %s\n" "${installed_packages}"

  }

  validate_mnt() {
    [ -d "${TEMP_MNT}" ] || mkdir --parents "${TEMP_MNT}"
  }

  disclaimer() {
    #@ Present the disclamer and confirm acceptance before proceeding
    printf "\n%s\n" "${SCR_DISCLAIMER}"
  }

  validate_elevation
  set_defaults
  parse_arguments "$@"
  validate_vars
  validate_deps
  disclaimer
  validate_TEMP_MNT
}