#!/bin/sh
SCR_NAME="get_dots"
SCR_DESCRIPTION="Get the most resent vopy of the dotfiles repository"

show_usage_guide() {
  cat <<EOF
Usage: $SCR_NAME [OPTIONS]

Options:
  -h, --help                   Display this help and exit
  -x, --reset                  Reset and clone the repo
  -p, --update                 Pull updates from the repo [DEFAULT]
  -r, --repo      DOTS_REPO    Git repository
  -e, --email     DOTS_EMAIL   Git email address
  -u, --user      DOTS_USER    Git username

Description:
  $SCR_DESCRIPTION

Example:
  $SCR_NAME \\
    --repo "https://github.com/craole-cc/dotfiles.git" \\
    --email user@example.com \\
    --user username \\
    --clone

EOF
}

parse_arguments() {
  while [ "$1" -ge 1 ]; do
    case $1 in
    -x | --reset | --init | --clone) action=reset ;;
    -r | --repo)
      [ "$2" ] && {
        DOTS_REPO="$2"
        shift
      }
      ;;
    -e | --email)
      [ "$2" ] && {
        DOTS_EMAIL="$2"
        shift
      }
      ;;
    -u | --user)
      [ "$2" ] && {
        DOTS_USER="$2"
        shift
      }
      ;;
    -h | --help)
      show_usage_guide
      exit 0
      ;;
    -*) pout --invalid Option "${1}" ;;
    *) action=update ;;
    esac
    shift
  done
}

validate_environment() {
  DOTS_REPO="$(validate_email "$DOTS_EMAIL")"
  DOTS_EMAIL="$(validate_email "$DOTS_EMAIL")"
  DOTS_USER="$(validate_username "$DOTS_USER")"
}

clone_dots() {
  #@ Process based on user setting
  [ "$reset" ] || return 1

  #@ Install git
  nix-env -f '<nixpkgs>' -iA git

  #@ Remove the dotfiles, if requested
  [ -d "$DOTS" ] && rm -rf "$DOTS"

  #@ Create the empty dotfiles directory
  mkdir --parents "$DOTS"

  #@ Clone the dotfiles repository
  git clone "$DOTS_REPO" "$DOTS"

  #@ Update git credentials
  dots config user.email "$DOTS_EMAIL"
  dots config user.name "$DOTS_USER"
}

pull_dots() {
  #@ Get the updates
  dots reset --hard
  dots pull
}

exe_nixs() {
  [ "$NIXS" ] || pout --missing "NIXS variable unset"

  if [ -d "$NIXS" ]; then
    #@ Make scripts executable
    find "$NIXS" \
      -type f ! \
      -perm -u=x \
      -exec chmod u+x {} \;
  else
    pout --missing "$NIXS" "Clone the dots with 'get_dots --clone'"
  fi
}

pout() {
  #@ Print appropriate error message
  case "${1}" in
  --*)
    msg="$(printf "\n:::%s:::" "${1#--}" | tr '[:lower:]' '[:upper:]')"
    var=${2}
    shift 2
    arg=${*}
    ;;
  *)
    shift
    printf "A valid %s is required \n" "${*}"
    ;;
  esac

  if
    [ -n "${msg}" ] && [ -n "${var}" ] && [ -z "${arg}" ]
  then
    printf "%s %s\n" "${msg}" "${var}"
  elif
    [ -n "${msg}" ] && [ -n "${var}" ] && [ -n "${arg}" ]
  then
    printf "%s %s -> %s\n" "${msg}" "${var}" "${arg}"
  else
    printf "%s\n" "${*}"
  fi

  #@ Print usage and exit with an error code
  # show_usage_guide
  exit 1
}

main() {
  #@ Acquire the most recent dotfiles
  parse_arguments "$@"

  #@ Activate the scripts
  exe_nixs
}

main "$@"
