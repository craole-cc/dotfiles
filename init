#!/bin/sh
# shellcheck disable=SC2046
#DOC https://openzfs.github.io/openzfs-docs/Getting%20Started/NixOS/Root%20on%20ZFS.html

#@ List available disks with
# find /dev/disk/by-id/

#@ Single disk installation
DISK='/dev/disk/by-id/ata-TOSHIBA_MQ01ACF050_76ULCLH7T'

#@ Set a mount point
MNT=$(mktemp -d)

#@ Set swap size in GB, set to 1 if you donâ€™t want swap to take up too much space
SWAPSIZE=4

#@ Set how much space should be left at the end of the disk, minimum 1GB
RESERVE=1

#@ Enable Nix Flakes functionality
mkdir -p ~/.config/nix
echo "experimental-features = nix-command flakes" >>~/.config/nix/nix.conf

#@ Install programs needed for system installation
if ! command -v git; then nix-env -f '<nixpkgs>' -iA git; fi
if ! command -v jq; then nix-env -f '<nixpkgs>' -iA jq; fi
if ! command -v helix; then nix-env -f '<nixpkgs>' -iA helix; fi
if ! command -v partprobe; then nix-env -f '<nixpkgs>' -iA parted; fi

#@ Partition the disk
parted --script --align=optimal "${DISK}" -- \
  mklabel gpt \
  mkpart EFI 2MiB 1GiB \
  mkpart bpool 1GiB 5GiB \
  mkpart rpool 5GiB -$((SWAPSIZE + RESERVE))GiB \
  mkpart swap -$((SWAPSIZE + RESERVE))GiB -"${RESERVE}"GiB \
  mkpart BIOS 1MiB 2MiB \
  set 1 esp on \
  set 5 bios_grub on \
  set 5 legacy_boot on

partprobe "${DISK}"
udevadm settle

#@ Setup encrypted swap. This is useful if the available memory is small:
for i in ${DISK}; do
  cryptsetup open --type plain --key-file /dev/random "${DISK}"-part4 "${DISK##*/}"-part4
  mkswap /dev/mapper/"${DISK##*/}"-part4
  swapon /dev/mapper/"${DISK##*/}"-part4
done

#@ Create root pool, compatible with grub
zpool create \
  -o compatibility=grub2 \
  -o ashift=12 \
  -o autotrim=on \
  -O acltype=posixacl \
  -O canmount=off \
  -O compression=lz4 \
  -O devices=off \
  -O normalization=formD \
  -O relatime=on \
  -O xattr=sa \
  -O mountpoint=/boot \
  -R "${MNT}" \
  bpool \
  $(printf '%s ' "${DISK}-part2")

#@ Create root pool
zpool create \
  -o ashift=12 \
  -o autotrim=on \
  -R "${MNT}" \
  -O acltype=posixacl \
  -O canmount=off \
  -O compression=zstd \
  -O dnodesize=auto \
  -O normalization=formD \
  -O relatime=on \
  -O xattr=sa \
  -O mountpoint=/ \
  rpool \
  $(printf '%s ' "${DISK}-part3")

#@ Create root system container:
# Unencrypted
# zfs create \
#   -o canmount=off \
#   -o mountpoint=none \
#   rpool/nixos

#@ Encrypted:
# Pick a strong password. Once compromised, changing password will not keep your data safe. See zfs-change-key(8) for more info
zfs create \
  -o canmount=off \
  -o mountpoint=none \
  -o encryption=on \
  -o keylocation=prompt \
  -o keyformat=passphrase \
  rpool/nixos

#@ Create system datasets, manage mountpoints with mountpoint=legacy
zfs create -o mountpoint=legacy rpool/nixos/root
mount -t zfs rpool/nixos/root "${MNT}"/
zfs create -o mountpoint=legacy rpool/nixos/home
mkdir "${MNT}"/home
mount -t zfs rpool/nixos/home "${MNT}"/home
zfs create -o mountpoint=legacy rpool/nixos/var
zfs create -o mountpoint=legacy rpool/nixos/var/lib
zfs create -o mountpoint=legacy rpool/nixos/var/log
zfs create -o mountpoint=none bpool/nixos
zfs create -o mountpoint=legacy bpool/nixos/root
mkdir "${MNT}"/boot
mount -t zfs bpool/nixos/root "${MNT}"/boot
mkdir -p "${MNT}"/var/log
mkdir -p "${MNT}"/var/lib
mount -t zfs rpool/nixos/var/lib "${MNT}"/var/lib
mount -t zfs rpool/nixos/var/log "${MNT}"/var/log
zfs create -o mountpoint=legacy rpool/nixos/empty
zfs snapshot rpool/nixos/empty@start

#@ Format and mount ESP
mkfs.vfat -n EFI "${DISK}"-part1
mkdir -p "${MNT}"/boot/efis/"${DISK##*/}"-part1
mount -t vfat -o iocharset=iso8859-1 "${DISK}"-part1 "${MNT}"/boot/efis/"${DISK##*/}"-part1

#@ Clone template flake configuration
mkdir -p "${MNT}"/etc
git clone --depth 1 --branch openzfs-guide \
  https://github.com/ne9z/dotfiles-flake.git "${MNT}"/etc/nixos

#@ Update
rm -rf "${MNT}"/etc/nixos/.git
git -C "${MNT}"/etc/nixos/ init -b main
git -C "${MNT}"/etc/nixos/ add "${MNT}"/etc/nixos/
git -C "${MNT}"/etc/nixos config user.email "craole-cc@proton.me"
git -C "${MNT}"/etc/nixos config user.name "craole-cc"
git -C "${MNT}"/etc/nixos commit -asm 'initial commit'

#@ Customize configuration to your hardware
sed -i \
  "s|/dev/disk/by-id/|${DISK%/*}/|" \
  "${MNT}"/etc/nixos/hosts/exampleHost/default.nix

diskNames=""
diskNames="${diskNames} \"${DISK##*/}\""

sed -i "s|\"bootDevices_placeholder\"|${diskNames}|g" \
  "${MNT}"/etc/nixos/hosts/exampleHost/default.nix

sed -i "s|\"abcd1234\"|\"$(head -c4 /dev/urandom | od -A none -t x4 | sed 's| ||g' || true)\"|g" \
  "${MNT}"/etc/nixos/hosts/exampleHost/default.nix

sed -i "s|\"x86_64-linux\"|\"$(uname -m || true)-linux\"|g" \
  "${MNT}"/etc/nixos/flake.nix

cp "$(command -v nixos-generate-config || true)" ./nixos-generate-config

chmod a+rw ./nixos-generate-config

# shellcheck disable=SC2016
echo 'print STDOUT $initrdAvailableKernelModules' >>./nixos-generate-config

kernelModules="$(./nixos-generate-config --show-hardware-config --no-filesystems | tail -n1 || true)"

sed -i "s|\"kernelModules_placeholder\"|${kernelModules}|g" \
  "${MNT}"/etc/nixos/hosts/exampleHost/default.nix

#@ Set root password
rootPwd=$(mkpasswd -m SHA-512)

#@ Declare password in configuration
sed -i \
  "s|rootHash_placeholder|${rootPwd}|" \
  "${MNT}"/etc/nixos/configuration.nix

#@ Commit changes to local repo
git -C "${MNT}"/etc/nixos commit -asm 'initial installation'

#@ Update flake lock file to track latest system version
nix flake update --commit-lock-file \
  "git+file://${MNT}/etc/nixos"

#@ Install system and apply configuration
nixos-install \
--root "${MNT}" \
--no-root-passwd \
--flake "git+file://${MNT}/etc/nixos#exampleHost"

#@ Unmount filesystems
umount -Rl "${MNT}"
zpool export -a

#@ Reboot
#reboot
