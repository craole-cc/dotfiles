#!/bin/sh
# shellcheck disable=SC2046
#DOC https://openzfs.github.io/openzfs-docs/Getting%20Started/NixOS/Root%20on%20ZFS.html

#@ List available disks with
# find /dev/disk/by-id/

#@ Single disk installation
DISK='/dev/disk/by-id/ata-TOSHIBA_MQ01ACF050_76ULCLH7T'

#@ Set a mount point
MNT=$(mktemp -d)

#@ Set swap size in GB, set to 1 if you donâ€™t want swap to take up too much space
SWAPSIZE=4

#@ Set how much space should be left at the end of the disk, minimum 1GB
RESERVE=1

#@ Enable Nix Flakes functionality
mkdir -p ~/.config/nix
echo "experimental-features = nix-command flakes" >>~/.config/nix/nix.conf

system_installation() {
  apps() {
    #@ Install programs needed for system installation
    if ! command -v git; then nix-env -f '<nixpkgs>' -iA git; fi
    if ! command -v jq; then nix-env -f '<nixpkgs>' -iA jq; fi
    if ! command -v helix; then nix-env -f '<nixpkgs>' -iA helix; fi
    if ! command -v partprobe; then nix-env -f '<nixpkgs>' -iA parted; fi
  }

  partition_disk() {
    for i in ${DISK}; do

      #@ Partition the disks.
      disk="${1}"
      blkdiscard -f "${disk}" || true

      parted --script --align=optimal "${disk}" -- \
        mklabel gpt \
        mkpart EFI 2MiB 1GiB \
        mkpart bpool 1GiB 5GiB \
        mkpart rpool 5GiB -$((SWAPSIZE + RESERVE))GiB \
        mkpart swap -$((SWAPSIZE + RESERVE))GiB -"${RESERVE}"GiB \
        mkpart BIOS 1MiB 2MiB \
        set 1 esp on \
        set 5 bios_grub on \
        set 5 legacy_boot on

      partprobe "${disk}"
      udevadm settle
    done
  }

  create_swap() {
    #@ Setup encrypted swap. This is useful if the available memory is small:
    for i in ${DISK}; do
      cryptsetup open --type plain --key-file /dev/random "${i}"-part4 "${i##*/}"-part4
      mkswap /dev/mapper/"${i##*/}"-part4
      swapon /dev/mapper/"${i##*/}"-part4
    done
  }

  create_pool_grub() {
    #@ Create root pool, compatible with grub
    zpool create \
      -o compatibility=grub2 \
      -o ashift=12 \
      -o autotrim=on \
      -O acltype=posixacl \
      -O canmount=off \
      -O compression=lz4 \
      -O devices=off \
      -O normalization=formD \
      -O relatime=on \
      -O xattr=sa \
      -O mountpoint=/boot \
      -R "${MNT}" \
      bpool \
      $(for i in ${DISK}; do
        printf '%s ' "${i}-part2"
      done)
  }

  create_pool_efi() {
    #@ Create root pool
    zpool create \
      -o ashift=12 \
      -o autotrim=on \
      -R "${MNT}" \
      -O acltype=posixacl \
      -O canmount=off \
      -O compression=zstd \
      -O dnodesize=auto \
      -O normalization=formD \
      -O relatime=on \
      -O xattr=sa \
      -O mountpoint=/ \
      rpool \
      $(for i in ${DISK}; do
        printf '%s ' "${i}-part3"
      done)
  }

  create_root_container() {
    #@ Create root system container:
    # Unencrypted
    zfs create \
      -o canmount=off \
      -o mountpoint=none \
      rpool/nixos
  }

  create_root_container_encrypted() {
    #@ Encrypted:
    # Pick a strong password. Once compromised, changing password will not keep your data safe. See zfs-change-key(8) for more info
    zfs create \
      -o canmount=off \
      -o mountpoint=none \
      -o encryption=on \
      -o keylocation=prompt \
      -o keyformat=passphrase \
      rpool/nixos
  }

  create_datasets() {
    #@ Create system datasets, manage mountpoints with mountpoint=legacy

    zfs create -o mountpoint=legacy rpool/nixos/root
    mount -t zfs rpool/nixos/root "${MNT}"/
    zfs create -o mountpoint=legacy rpool/nixos/home
    mkdir "${MNT}"/home
    mount -t zfs rpool/nixos/home "${MNT}"/home
    zfs create -o mountpoint=legacy rpool/nixos/var
    zfs create -o mountpoint=legacy rpool/nixos/var/lib
    zfs create -o mountpoint=legacy rpool/nixos/var/log
    zfs create -o mountpoint=none bpool/nixos
    zfs create -o mountpoint=legacy bpool/nixos/root
    mkdir "${MNT}"/boot
    mount -t zfs bpool/nixos/root "${MNT}"/boot
    mkdir -p "${MNT}"/var/log
    mkdir -p "${MNT}"/var/lib
    mount -t zfs rpool/nixos/var/lib "${MNT}"/var/lib
    mount -t zfs rpool/nixos/var/log "${MNT}"/var/log
    zfs create -o mountpoint=legacy rpool/nixos/empty
    zfs snapshot rpool/nixos/empty@start
  }

  create_esp() {
    for i in ${DISK}; do
      mkfs.vfat -n EFI "${i}"-part1
      mkdir -p "${MNT}"/boot/efis/"${i##*/}"-part1
      mount -t vfat -o iocharset=iso8859-1 "${i}"-part1 "${MNT}"/boot/efis/"${i##*/}"-part1
    done
  }
}

system_installation
