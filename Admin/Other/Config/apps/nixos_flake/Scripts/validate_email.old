#!/bin/sh

scr_name="validate_email"
label="Email"
exit_on_error=true

show_usage_guide() {
  printf "\n\nUsage: %s <email>\n\n" "$scr_name"
}

parse_arguments() {
  case "$1" in
  -h | --help)
    show_usage_guide
    exit 0
    ;;
  -t | --test)
    run_tests
    exit 0
    ;;
  "") pout --missing "$label" ;;
  -*) pout --invalid "Option" "$1" ;;
  *) email="$1" ;;
  esac
}

split_email_on_at() {
  # Check if the email contains an @ sign
  printf '%s' "$email" | grep -q '@' || return 1

  # Split the email into username and domain parts
  username="${email%%@*}"
  domain="${email#*@}"
}

check_username() {
  # Check if the username is empty
  [ "$username" ] || return 1
  # pout "--invalid $label" "Missing the username" "$email"
  #   return 1
}

check_domain() {

  ext_regex='^[a-zA-Z]+$'

  # Extract the top-level domain from the domain
  ext="${domain##*.}"

  if [ -z "$domain" ]; then
    # pout "--invalid $label" "Missing the domain" "$email"
    echo "DOM MISSING"
    return 1
  elif
    printf '%s' "$domain" | grep -q '\.'
  then
    pout "--invalid $label" "Missing the '.' in the domain" "$email"
  elif

    # Check if the top-level domain is empty
    [ -z "$ext" ]
  then
    pout "--invalid $label" "Missing the top-level domain" "$email"
  elif
    # Check if the top-level contains invalid characters
    printf "%s" "$ext" | grep -Eq "$ext_regex"
  then
    pout "--invalid $label" "Check characters in the top-level domain" "$email"
  fi
}

pout() {
  if [ "$exit_on_error" = true ]; then
    p0ut "$@"
    exit 1
  else
    p0ut "$@"
    printf "\n"
  fi
}

run_tests() {
  #@ Define test emails
  # "john.doeexample.com" # Missing @ sign
  # "@example.com"        # Missing username
  # "johndoe@"            # Missing domain
  # "johndoe@example"     # Missing top-level domain
  # "johndoe@example.123" # Invalid characters in top-level domain
  # "johndoe@example.com" # Valid email address

  emails="
    john.doeexample.com
    @example.com
    johndoe@
    johndoe@example
    johndoe@example.123*
    johndoe@example.com
  "

  #@ Allow tests to continue in spite of errors
  exit_on_error=false

  # #@ Iterate over test cases
  # for email in $test_emails; do
  #   # printf "%s" "$test_case"
  process
  #   printf "\n"
  # done
}

process() {

  for email in $emails; do
    #@ Check for the @ sign
    if ! printf '%s' "$email" | grep -q '@'; then
      pout "--invalid $label" "Missing the @" "$email"
    else
      #@ Split the email into parts
      username="${email%%@*}"
      domain="${email#*@}"
      ext="${domain##*.}"
      ext_regex='^[a-zA-Z0-9-]+$' #@ Accept only letters, numbers and hyphens

      #@ Check for the username
      [ "$username" ] ||
        pout "--invalid $label" "Missing the username" "$email"

      #@ Check for the domain
      if [ "$domain" ]; then

        #@ Check for the dot
        if ! printf '%s' "$domain" | grep -q '\.'; then
          pout "--invalid $label" \
            "Missing the domain extension" "$email"

          #@ Check the extension for invalid characters
        elif ! printf "%s" "$ext" | grep -Eq "$ext_regex"; then
          pout "--invalid $label" \
            "Check characters in the domain extension" "$email"
        fi
      else
        pout "--invalid $label" "Missing the domain" "$email"
      fi
    fi

    #@ All checks passed, the email address is valid
    # printf "%s" "$email"
  done
}

main() {
  #@ Accept cli arguments
  parse_arguments "$@"

  #@ Validate the email
  process

  #@ Return the validated email
  printf "%s" "$email"

}

main "$@"
