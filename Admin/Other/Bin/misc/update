#! /bin/sh
# |> _______________________________________________ <|

__usageUpdate__() {
  cat <<EOF
            UGAGE:= update <[options]>
|> ----------------------------------------------- <|
        -A  --all        Update all installed
        -p  --pacman     Standard Repositories
        -a  --paru       AUR via Paru
        -y  --yay        AUR via Yay
        -W  --win        Winget
        -c  --choco      Chocolatey
        -r  --rustup     Rustup
        -f  --flatak     Flatpak
        -s  --snap       Snap
        -u  --utils      Utilities via GIT
        -m  --mirror     Mirrors via Reflector
        -h  --help       Usage Guide
EOF
}

weHave() { #@ Check if the command exists
  type "$1" >/dev/null 2>&1
}

# >>= Mirrors =<< #
__mirrorUpdate__() {
  while true; do
    read -p "Should we update the package mirrors, this may take some time? [y/N]?" yn
    case $yn in
    [Yy]*)
      mirror

      # >>= Dependencies =<< #
      # Required: https://xyne.archlinux.ca/projects/reflector
      # edit /etc/xdg/reflector/reflector.conf

      # >>= Notification =<<

      OUTPUT() {
        echo "${blue}::${reset} $msg"
        notify-send "$msg"
      }
      clear

      # >>= Service =<< #
      # systemctl enable reflector.timer
      # systemctl start reflector.timer
      msg="ðŸ•“ Mirrorlist weekly update timer set"
      OUTPUT "$msg"

      # >>= Update =<<
      msg="ðŸ”ƒ Syncing mirrors based on $(tput smul)/etc/xdg/reflector/reflector.conf$(tput rmul)"
      OUTPUT "$msg"
      # systemctl start reflector.service # Update mirrors immediatly
      msg="âŒ› The package mirrorlist has been updated"
      OUTPUT "$msg"
      ;;
    [Nn]*) break ;;
    *) break ;;
    esac
  done
}

# >>= Disk Info =<< #

DiskUsage() {
  # Required: https://aur.archlinux.org/packages/duf
  CMD="duf"
  if weHave $CMD; then
    $CMD --only local
  fi
}

# >>= Packages Managers =<< #

__pacmanUpdate__() {
  CMD="pacman" CMDS="sudo $CMD"
  if weHave $CMD; then
    __mirrorUpdate__
    $CMDS -Syu
  fi
}

__paruUpdate__() {
  CMD="paru"
  if weHave $CMD; then
    __mirrorUpdate__
    $CMD -Sua
  fi
}

__yayUpdate__() {
  CMD="yay"
  if weHave $CMD; then
    __mirrorUpdate__
    $CMD -Sua
  fi
}

__gitutilsUpdate__() {
  CMD="git"
  if weHave $CMD; then
    UpdateImports
  fi
}

__rustupUpdate__() {
  CMD="rustup"
  if weHave $CMD; then
    $CMD self update
  fi
}

__wingetUpdate__() {
  CMD="winget"
  if weHave $CMD; then
    if ! [ $# -gt 2 ]; then
      $CMD upgrade --all
    else
      apps="$*"
      upgrade "${apps##*-- }"
    fi
  fi
}

__chocolateyUpdate__() {
  CMD="cup"
  if weHave $CMD; then
    if ! [ $# -gt 2 ]; then
      $CMD all -y
    else
      apps="$*"
      cup "${apps##*-- } -y"
    fi
  fi
}

__flatpakUpdate__() {
  CMD="flatpak"
  if weHave $CMD; then
    $CMD update
  fi
}

__snapUpdate__() {
  CMD="snap"
  if weHave $CMD; then
    $CMDS refresh
  fi
}

# Usaage
# -h | --help
# -m | --mirrors
# -A | --all
# -r | --rustup
# -P | --pacman
# -p | --paru
# -y | --yay
# -f | --flatpak
# -s | --snap
# -w | --winget
# -c | --choco
# -g | --gits

options=$(getopt -l \
  "help,add:,path,append:,perpend:,choco,utils,extract:,delete:,fd:" -o "hArPpyfswcg" -a -- "$@")

eval set -- "$options"

while true; do
  case $1 in
  -A | --all)
    __pacmanUpdate__
    __paruUpdate__
    __yayUpdate__
    __chocolateyUpdate__
    __wingetUpdate__
    __rustupUpdate__
    __gitutilsUpdate__
    __flatpakUpdate__
    __snapUpdate__
    ;;

  -r | --rustup) __rustupUpdate__ "$@" ;;
  -P | --pacman) __pacmanUpdate__ "$@" ;;
  -p | --paru) __paruUpdate__ "$@" ;;
  -y | --yay) __yayUpdate__ "$@" ;;
  -f | --flatpak) __flatpakUpdate__ "$@" ;;
  -s | --snap) __snapUpdate__ "$@" ;;
  -w | --winget) __wingetUpdate__ "$@" ;;
  -c | --choco) __chocolateyUpdate__ "$@" ;;
  -g | --gits) __gitutilsUpdate__ ;;
  --)
    shift
    break
    ;;
  -h | --help)
    __usage__
    exit 0
    ;;
  *)
    echo "Internal error!"
    exit 1
    ;;
  esac
  shift
done
