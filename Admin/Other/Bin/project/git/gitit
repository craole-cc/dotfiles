#!/bin/sh
scr_name="gitit"
scr_version="0.0.1"
scr_authors="Craole"
scr_usage="Usage: scr_name [OPTIONS] <URL>

  Options:
    -h, --help                Display this help message and exit.
    -v, --version             Display the version information and exit.
    -t, --simulate            Simulate the actions without actually executing them.
    -H, --host      HOST      GitHub host name.
    -u, --user      USER      GitHub username.
    -r, --repo      REPO      Repository name.
    -l, --url       URL       SSH-formatted Git repositiry URL.
    -p, --dir       PATH      Destination directory name.

  URL Format:
    # with slash between host & path
    git@gitlab.example.com/path/repo.git
    git@gitlab.example.com/path/repo.git#branch_1_2
    git@gitlab.example.com/path/repo.git#1.2.3
    git@gitlab.example.com/path/repo.git#semver:^1.2.3
    git@gitlab.example.com/path/repo.git#semver:~1.2.3

    # with colon between host & path
    git@gitlab.example.com:path/repo.git
    git@gitlab.example.com:path/repo.git#branch_1_2
    git@gitlab.example.com:path/repo.git#1.2.3

  Examples:
    $scr_name \
      --host github.com \
      --user craole \
      --repo repository \
      --branch 1.2.3 \
      --dir my-repo
    $scr_name git@github.com:craole/repository.git
    $scr_name -h github.com_cc git@github.com:craole/repository.git

  Description:
    This script simplifies the process of cloning or updating GitHub repositories
    using SSH. It supports various options for customization, such as specifying
    the username, repository name, destination directory, and simulation mode.

    If the destination directory already exists, the script offers the option
    to either delete the existing directory and clone the repository or to perform
    a git pull in the existing directory to update the repository.

  Author: $scr_authors
  Version: $scr_version
"

main() {
  establish_env "$@"
  execute
}

parse_arguments() {
  while [ $# -gt 0 ]; do
    case "$1" in
    -H | --host*) git_host="$2" ;;
    -U | --user*) git_user="$2" ;;
    -R | --repo*) git_repo="$2" ;;
    -L | --url | --link) git_url="$2" ;;
    -B | --branch) git_branch="$2" ;;
    -P | --path | --dir*) git_dir="$2" ;;
    -t | --simulate | --test) simulate=true ;;
    -*)
      display_info "$1"
      exit
      ;;
    *) git_url="${git_url:-$1}" ;;
    esac
    shift
  done

  #@ Ensure the URL is provided if the host, user or repo are not.
  if [ -z "$git_host" ] || [ -z "$git_user" ] || [ -z "$git_repo" ]; then
    [ "$git_url" ] || {
      display_info --help
      exit 1
    }
  fi
}

establish_env() {
  #@ Parse the user input
  parse_arguments "$@"

  #@ If host is not provided, extract it from the original URL.
  [ "$git_host" ] || {
    git_host="${git_url#*@}"   # After the at sign
    git_host="${git_host%%:*}" # Before the first slash
  }

  #@ If username is not provided, extract it from the original URL.
  [ "$git_user" ] || {
    git_user="${git_url#*[:/]}" # After the first colon or slash
    git_user="${git_user%%/*}"  # Before the next slash
  }

  #@ Extract the repository name and branch from the original URL
  git_repo="${git_url#*[:/]/}" # After the second colon or slash
  git_repo="${git_repo#*/}"    # After the first slash

  case $git_repo in *#*)
    git_branch="${git_repo#*#}" # After the first '#'
    git_repo="${git_repo%%#*}"  # Before the hash and branch
    ;;
  esac

  git_repo="${git_repo%.git}" # Remove '.git' extension

  #@ Prioritize the user provided destination name
  git_dir="${git_dir:-$git_repo}"

  #@ Generate the updated URL, prioritizing the user provided host, user and repo
  git_url="git@$git_host:${git_user}/${git_repo}.git"
  [ "$git_branch" ] && git_url="$git_url#$git_branch"

  #@ Generate the applicable git command
  if [ -d "$git_dir" ]; then
    printf \
      "Directory '%s' already exists. \nDo you want to delete it? [y|N]: " \
      "$git_dir"
    read -r response
    case "$response" in
    [Yy]*)
      git_cmd="
        rm --recursive --force \"$git_dir\"
        git clone \"$git_url\" \"$git_dir\"
      "
      ;;
    *)
      git_cmd="cd \"$git_dir\" && git pull"
      ;;
    esac
  else
    git_cmd="git clone \"$git_url\" \"$git_dir\""
  fi

}

execute() {
  if [ "$simulate" ]; then
    printf \
      "Simulating...\n%s\n" \
      "$git_cmd"
  else
    eval "$git_cmd"
  fi
}

display_info() {
  case $1 in
  -h | --help) printf "%s\n" "$scr_usage" ;;
  -v | --version) printf "%s\n" "$scr_version" ;;
  *) printf "%s\n" "$1" ;;
  esac
}

main "$@"
