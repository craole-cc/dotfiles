#!/bin/sh
vars="pop DOTS flop HOME love"
vars="$(are --save "$vars" "$1")"
vars="$(are --expand "$vars")"
total_vars="$(are --count "$vars")"
last_var="$(are --last "$vars")"
verbosity=1

main() {

  #@ Initialize variables and success flag
  set -- $vars
  counter=0
  prev_success=""

  #@ Loop through all arguments using a while loop
  while [ $# -gt 0 ]; do
    var="$1"

    #@ Extract the value of a variable
    var_LABEL="$var"
    var_VALUE="$(eval printf '%s' "\"\${$var_LABEL?}\"" 2>/dev/null)"
    msg="$var_LABEL => $var_VALUE"
    var_LABELS="$(are --save "$var_LABELS" "$var_LABEL")"

    #@ Increment the counter variable
    counter=$((counter + 1))

    #@ Set output message based on verbosity level
    if [ "$var_VALUE" ]; then
      msg0="$var_VALUE"
      msg1="$counter: ✅ $msg"
      msg2="$counter: ✅ '$var_LABEL' resolves to $var_VALUE"
      # unset succes failure
      prev_success=true
      # failure=""
      var_VALUES="$(are --save "$var_VALUES" "$var_VALUE")"
    else
      unset msg0
      msg1="$counter: ❌ $msg"
      msg2="$counter: ❌ '$var_LABEL' is not a valid parameter"
      # prev_success=""
      # unset succes failure
      # failure=true
      # args="$(are --save "$args" "$var_LABEL")"
    fi

    #@ Generate message based on verbosity eg. "$msg2"
    unset msg
    msg="$(eval printf '%s' "\"\$msg$verbosity\"" 2>/dev/null)"

    # printf "%s\n" "vars: $# count: $counter failure: $failure"
    # printf "%s|%s: %s: P" "$#" "$counter" "$var_LABEL"
    # if [ "$prev_success" ] ;then
    # printf "\n%s|%s: %s: PrevSuc" "$#" "$counter" "$var_LABEL"
    # else
    # printf "%s: %s " "$counter" "$var_LABEL"
    # fi

    # printf "%s" "$var_VALUE"
    #@ Send information to display where applicable
    # if [ "$msg" ]; then
    #   if [ $# -ge 1 ]; then
    #     display_info -n "$msg"
    #   else
    #     display_info "$msg"
    #   fi
    # fi
    shift
    #@ Update success flag for the next iteration
    # [ "$prev_success" ] && printf "\n"
    # [ "$var_VALUE" ] && printf "%s" "val: $var_VALUE"
    # [ "$var_VALUE" ] && unset var_VALUE && prev_success="true"

    # printf "%s" "$# $prev_success"
  done

  var_LABELS="$(are --expand "$var_LABELS")"
  vals() {
    var_VALUES="$(are --expand "$var_VALUES")"
    last_val="$(are --last "$var_VALUES")"
    set -- $var_VALUES

    for val in $var_VALUES; do
    # echo "$val | $last_val"
      if [ "$val" != "$last_val" ]; then
        # display_info "$val"
        printf "%s\n" "$val != $last_val"
      # else
        printf "%s" "$val = $last_val"

        # display_info -n "$val"
      fi
    done
  }
  vals
}
display_info() {
  case "$1" in
  -n)
    shift
    printf "%s\n" "$*"
    ;;
  *) printf "%s" "$*" ;;
  esac
}

main "$@"
