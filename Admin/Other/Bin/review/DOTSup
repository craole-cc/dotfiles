#!/bin/sh

#@ Enable automatic error handling
set -e

#@ Set global variables
CMD_PATH="$(PathOf "$0")"
CMD_NAME="$(basename "$CMD_PATH")"
CMD_HOME="$(dirname -- "$CMD_PATH")"
CMD_VERSION="1.0"
VERBOSE=false
ORIG_DIR="$PWD"
WORK_DIR="$DOTS"
MESSAGE="Updating DOTS"
COMMAND="gitup \"$MESSAGE\""

#@ Display usage information
display_usage() {
  printf "::USAGE:: %s [options]\nOptions:\n" "$CMD_NAME"
  printf "  -j --cd <DIR>            Directory to execute command in (default: '%s')\n" "$ORIG_DIR"
  printf "  -d --workdir <DIR>       Working directory (default: '%s')\n" "$WORK_DIR"
  printf "  -c --command <COMMAND>   Command to execute (default: '%s')\n" "$COMMAND"
  printf "  -h --help                Display usage information\n"
}

#@ Parse command line options
parse_options() {
  while getopts ":j:d:c:h" opt; do
    case $opt in
    j)
      ORIG_DIR="$OPTARG"
      ;;
    d)
      WORK_DIR="$OPTARG"
      ;;
    c)
      COMMAND="$OPTARG"
      ;;
    h)
      VERBOSE=true
      display_usage
      exit 0
      ;;
    \?)
      printf "Invalid option: -%s\n" "$OPTARG" >&2
      display_usage >&2
      exit 1
      ;;
    :)
      printf "Option -%s requires an argument.\n" "$OPTARG" >&2
      display_usage >&2
      exit 1
      ;;
    esac
  done
}

#@ Validate directories
validate_dir() {
  if [ -d "$1" ]; then
    PathOf "$1"
  else
    printf "%s is not a valid directory.\n" "$1" >&2
    return 1
  fi
}

#@ Execute command in specified directory
execute_command() {
  ORIG_DIR="$(validate_dir "$ORIG_DIR")"
  WORK_DIR="$(validate_dir "$WORK_DIR")"
  if [ "$ORIG_DIR" = "$WORK_DIR" ]; then
    # eval "$COMMAND"
    echo "$PWD"
    echo "$COMMAND"
  else
    echo "$PWD"
    cd "$WORK_DIR"
    echo "$PWD"
    echo "$COMMAND"
    cd "$ORIG_DIR"
    echo "$PWD"
  fi
}

#@ Main function
main() {
  parse_options "$@"
  execute_command
}

main "$@"
