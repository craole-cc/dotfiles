#!/bin/sh

# ===================================================================
#@		                           	INFO			                       @#
# ===================================================================

__info__() {
  _cmd_PATH="$(PathOf "$0")"
  _cmd_NAME="$(basename "$_cmd_PATH")"
  _cmd_HOME="$(dirname -- "$_cmd_PATH")"
  _cmd_VERSION="1.0"
  _cmd_DESCRIPTION="Allow the use of decimals in arithmetic equations"
  _cmd_DEPENDENCIES="(python or bc), printf, echo, __cmd_exists__"
  _cmd_USAGEGUIDE="$(
    cat <<USAGE_GUIDE

#>----------------------------------------------------<#
                      USAGE: $_cmd_NAME
#>----------------------------------------------------<#
    $_cmd_DESCRIPTION
#>----------------------------------------------------<#
            command <[options]> <[arguments]>
          $_cmd_NAME --sentence "string to transform"
#>----------------------------------------------------<#
      -h --help       |>     Usage guide
      -v --version    |>     Version
      -d --verbose    |>     Details
      -p --python     |>     Use python [default]
      -b --bc         |>     Use bc
#>----------------------------------------------------<#

USAGE_GUIDE
  )"
}

# ===================================================================
#@		                        GLOBAL TOOLS                         @#
# ===================================================================

#@ Usage display
__help__() {
  printf "%s\n" "$_cmd_USAGEGUIDE"
  exit 0
}

#@ Version display
__version__() {
  printf "%s\n" "$_cmd_VERSION"
  exit 0
}

#@ Command validation
__cmd_exists__() {
  unalias "$@" >/dev/null 2>&1
  command -v "$@" >/dev/null 2>&1
}

# ===================================================================
#@		                          OPTIONS			                       @#
# ===================================================================

# echo "#: $#"
# echo "1: $1"
# echo "2: $2"
__opts__() {
  while [ $# -gt 1 ]; do
    _OPT="$1"
    _STRING="$2"
    _NEWLINE="$3"

    case "$_OPT" in
    '-d' | '--verbose')
      _VERBOSE=true
      shift
      ;;
    '-l' | '--lower')
      _CASE="lower"
      __process__ "$_STRING" "$_NEWLINE"
      ;;
    '-u' | '--upper')
      _CASE="upper"
      __process__ "$_STRING"
      ;;
    '-v' | '--version') __version__ ;;
    '-h' | '--help') __help__ ;;
    *) ;;
    esac
    shift
  done
}

# ===================================================================
#@		                          DEFAULT			                       @#
# ===================================================================

__defaults__() {

  __cmd_exists__ tr && _tool_tr=true
  __cmd_exists__ tr && _tool_perl=true

  __lower__() {
    if [ "$_tool_tr" ]; then
      tr '[:upper:]' '[:lower:]'
    elif [ "$_tool_perl" ]; then
      perl -pe '$_=lc'
    else
      sed 's/[A-Z]/\L&/g'
    fi
  }

  __upper__() {
    if __cmd_exists__ tr; then
      tr '[:lower:]' '[:upper:]'
    elif __cmd_exists__ perl; then
      perl -pe '$_=uc'
    elif __cmd_exists__ sed; then
      sed 's/[a-z]/\U&/g'
    fi
  }

  __proper__() {
    if __cmd_exists__ tr; then
      tr '[:upper:]' '[:lower:]'
      # __sentence__() { sed -e 's/\(^[a-z]\)\([a-zA-Z0-9]*\)/\u\1\2/g'; }
      # __proper__() { sed 's/\b\(.\)/\u\1/g'; }
      # __upper__() { tr '[:lower:]' '[:upper:]'; }
      # __lower__() { tr '[:upper:]' '[:lower:]'; }
      # __spacer__() { tr -s '[:space:]' "$_DELIMITER"; }
    elif __cmd_exists__ perl; then
      perl -pe '$_=lc'
      # __sentence__() { perl -pe 's/\p{L}.*?[.?!]/ucfirst lc $&/ge'; }
      # __proper__() { perl -pe 's/\b[\p{L}\p{Pd}]+/ucfirst lc $&/ge'; }
      # __upper__() { perl -pe '$_=uc'; }
      # __lower__() { perl -pe '$_=lc'; }
      # __spacer__() { perl -pe "s/\s+/$_DELIMITER/g"; }
    elif __cmd_exists__ sd; then
      sed 's/[A-Z]/\L&/g'
      # __sentence__() { perl -pe 's/\p{L}.*?[.?!]/ucfirst lc $&/ge'; }
      # __proper__() { sed 's/\b\(.\)/\u\1/g'; }
      # __upper__() { sed 's/[a-z]/\U&/g'; }
      # __lower__() { sed 's/[A-Z]/\L&/g'; }
      # __spacer__() { sd '\s+' "$_DELIMITER"; }
    elif __cmd_exists__ sed; then
      sed 's/[A-Z]/\L&/g'
      # __sentence__() { sed -e 's/\(^[a-z]\)\([a-zA-Z0-9]*\)/\u\1\2/g'; }
      # __proper__() { sed 's/.*/\L&/; s/[a-z]*/\u&/g'; }
      # __proper__() { sed 's/\b\(.\)/\u\1/g'; }
      # __proper__() {sed -E "s/[[:alnum:]_'-]+/\u&/g";}
      # __upper__() { sed 's/[a-z]/\U&/g'; }
      # __lower__() { sed 's/[A-Z]/\L&/g'; }
      # __spacer__() { sed "s/ \+/$_DELIMITER/g"; }
      # __spacer__() { sed "s/ \{1,\}/$_DELIMITER/g";}
      # __spacer__() { sed "s/  */$_DELIMITER/g";}
      # __spacer__() { sed "s/ \{1,\}/$_DELIMITER/g";}
      # __spacer__() { sed -E "s/\s+/$_DELIMITER/g";}
    fi
  }
}

# ===================================================================
#@		                           	 VERBOSE	                       @#
# ===================================================================

__verbose__() {

  CALCULATOR_h1="*** Calculator ***"
  CALCULATOR_tab=$(((${#CALCULATOR_h1} - ${#CALCULATOR}) / 2))

  printf "%s\n" "$CALCULATOR_h1"
  printf "%${CALCULATOR_tab}s"
  printf "%s\n\n" "$CALCULATOR"

  printf "%s\n" "*** Equations ***"
  i=0
  while [ $# -gt 0 ] && i=$((i + 1)); do
    printf "%s | %s == %s\n\n" "$i" "$1" "$(__process__ "$1")"
    shift
  done

}

# ===================================================================
#@		                          PROCESS			                       @#
# ===================================================================

__process__() {
  if [ -n "$_STRING" ]; then
    [ "$_CASE" = "lower" ] && printf "%s" "$_STRING" | __lower__
    [ "$_CASE" = "upper" ] && printf "%s" "$_STRING" | __upper__
    [ "$_NEWLINE" ] && printf "\n"
  fi
}

# ===================================================================
#@		                           	 MAIN			                       @#
# ===================================================================

__main__() {

  #@ Confirm that a string was entered
  [ "$#" -eq 0 ] && __error__ --string

  #@ Process all stings
  while [ $# -gt 0 ]; do
    __process__ "$1"
    shift
  done

}

# ===================================================================
#@		                          CLEANUP			                       @#
# ===================================================================

__cleanup__() {
  unset VERBOSE BC PYTHON CALCULATOR
}

# ===================================================================
#@		                            RUN	  		                       @#
# ===================================================================

#@ Load internal variables
__info__

#@ Establish defaults
__defaults__

#@ Load internal variables
__opts__ "$@"

#@ Remove any leftover variables
__cleanup__

# printf "%s" "$@" | __lower__
