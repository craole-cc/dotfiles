#!/bin/sh
scr_PATH="$(PathOf "$0")"
scr_NAME="$(basename "$scr_PATH")"
scr_DIR="$(dirname "$scr_PATH")"
scr_VERSION="1.0"
scr_DESCRIPTION="manages application status"
scr_DEPENDENCIES="coreutils"
scr_USAGE="$(
  cat <<USAGE_GUIDE
    ::------------------------------------------------------------::
                    $scr_NAME $scr_DESCRIPTION
    ::------------------------------------------------------------::
                $scr_NAME <[OPTIONS]> [CMD1 CMD2 ...]
          >>> $scr_NAME --action=start code picom firefox <<<
    ::------------------------------------------------------------::
      -h --help            />  This usage guide
      -v --version         />  Current version of $scr_NAME
      -d --verbose         />  Increase the level of detail
      -o --action [ACTION] />  Assign processing action
      -i --installed       />  Verify installation
      -a --active          />  Check if active
      -l --launch          />  Launch, if inactive [default]
      -x --terminate       />  Kill all instances
      -r --relaunch        />  Close then relaunch one instance
    ::------------------------------------------------------------::
      ACTION >>> installed | active | launch | relaunch | terminate
    ::------------------------------------------------------------::
USAGE_GUIDE
)"

# ================================================================= #
#/> SCRIPT                      	       			                    <\#
# ================================================================= #

point_of_entry() { #@ Launch the script
  #@ Initialize application
  parse_arguments "$@"

  #@ Run main process
  if [ "$flag_TEST" ]; then
    process_test
  else
    process_core
  fi

  #@ Remove any leftover variables
  punctuate_exit
}

parse_arguments() { #@ Establish the script environment
  #@ Ensure there are arguments to parse
  [ "$#" -eq 0 ] && punctuate_exit --error-exit "Missing arguments"

  #@ Unset all variables that will be used
  purge_environment --env

  #@ Establish user options
  while [ "$#" -ge 1 ]; do
    case $1 in
    -h | --help) punctuate_exit "$scr_USAGE" ;;
    -v | --version) punctuate_exit "$scr_VERSION" ;;
    -q | --quiet) unset flag_VERBOSE ;;
    -d | --verbose) flag_VERBOSE=true ;;
    -t | --dry-run | --test) flag_TEST=true ;;
    -i | --installed | --available) param_ACTION="check availability" ;;
    -a | --active) param_ACTION="check status" ;;
    -l | --launch | --start | --run) param_ACTION="launch" ;;
    -r | --relaunch | --reload) param_ACTION="relaunch" ;;
    -x | --terminate | --stop | --kill) param_ACTION="terminate" ;;
    --action=*) param_ACTION="${1#*=}" ;;
    --action)
      param_ACTION="$2"
      shift
      ;;
    *) array_CMD="$(are --save "$array_CMD" "$1")" ;;
    esac
    shift
  done

  #@ Establish default action
  case "$param_ACTION" in
  [iI]*) param_ACTION="check availability" ;;
  [aA]*) param_ACTION="check status" ;;
  [rR]*) param_ACTION="relaunch" ;;
  [tT]* | stop | kill | close) param_ACTION="terminate" ;;
  [lL]* | *) param_ACTION="launch" ;;
  esac

  #@ Ensure there are commands to process
  [ "$array_CMD" ] || punctuate_exit --error-exit "Missing command"
  array_CMD="$(are --expand "$array_CMD")"
  array_CMD_COUNT="$(are --count "$array_CMD")"
}

purge_environment() { #@ Remove internal variables
  unset_script_variables() {
    unset \
      scr_PATH \
      scr_NAME \
      scr_VERSION \
      scr_AUTHOR \
      scr_DESCRIPTION \
      scr_USAGE
  }

  unset_messages() {
    unset msg msg_VER msg_PATH icon
  }

  unset_env() {
    unset flag_VERBOSE \
      flag_location \
      flag_STATUS \
      flag_EXISTENCE \
      flag_FAILURE \
      param_ACTION \
      array_CMD \
      param_CMD
  }

  while [ "$#" -ge 1 ]; do
    case "$1" in
    --msg) unset_messages ;;
    --env) unset_env ;;
    *)
      unset_script_variables
      unset_messages
      unset_env
      ;;
    esac
    shift
  done

  # array_CMD param_CMD \
  # flag_VERBOSE msg msg0 msg1 msg2 msg3 \
  # failure
}

punctuate_exit() { #@ Trigger exit actions
  case "$1" in
  --err*)
    flag_FAILURE=true
    case "$1" in
    *exit)
      shift
      publish_informtion "Error: $*"
      publish_informtion "$scr_USAGE"
      point_of_exit
      ;;
    esac
    ;;
  *)
    publish_informtion "$*"
    point_of_exit
    ;;
  esac
}

point_of_exit() { #@ Terminate the sctipt
  if [ "$flag_FAILURE" ]; then
    purge_environment
    exit 1
  else
    purge_environment
    exit 0
  fi
}

# ================================================================= #
#/> PROCESS                      	       		                      <\#
# ================================================================= #

process_test() { #@ Test variables and actions
  # Test the User Guide
  # publish_informtion "$scr_USAGE"

  # Test the selectted action
  publish_informtion " ACTION: $param_ACTION"

  # Test the command array
  echo "$array_CMD_COUNT Commands"
  publish_informtion --oneline "COMMAND:"
  for param_CMD in $array_CMD; do
    tag_CMD="$((tag_CMD + 1))"

    if cmd_is_available "$param_CMD"; then
      publish_informtion --oneline " $tag_CMD) âœ… $param_CMD"

    else
      publish_informtion --oneline " $tag_CMD) ðŸŸ¥ $param_CMD"
    fi
  done

  # Test Activity

}

process_core() { #@ Provide command info based on user requirements

  #@ Process all the array_CMD given via a loop
  for param_CMD in $(are --expand "$array_CMD"); do

    #@ Manage messaging and tag_CMD
    tag_CMD="$((tag_CMD + 1))"
    purge_environment --msg

    #@ Skip if command not available
    cmd_is_available "$param_CMD" || {
      publish_informtion "ðŸŸ¥ $param_CMD is not installed"
      punctuate_exit --error
      continue
    }

    msg="$param_CMD"
    #@ Display information about the param_CMD
    [ "$msg" ] &&
      if [ "$icon" ]; then
        publish_informtion "$icon $msg"
      else
        publish_informtion "$msg"
      fi
  done
}

prepare_messaging() { #@ Display verbose information
  #@ Enable printing only there is something to print
  [ "$flag_VERBOSE" ] || return

  #@ Allow formatting
  if cmd_is_available tput; then
    reset="$(tput sgr0 || tput me)"  # Turn off all attributes
    bold="$(tput bold || tput md)"   # Bold
    italic="$(tput sitm || tput ZH)" # Italic
  else
    reset="$(printf "\033[m")"
    bold="$(printf "\033[1m")"
    italic="$(printf "\033[3m")"
  fi

  fmt_CMD="$(printf "%s%s%s" "${bold}" "$param_CMD" "${reset}")"
  fmt_ACTION="$(printf "%s%s%s" "${italic}" "$param_ACTION" "${reset}")"

  #@ Send output to Stdout
  case $1 in
  --input)
    if [ "$tag_CMD" -eq 1 ]; then
      publish_informtion --oneline " | $tag_CMD"
    else
      publish_informtion " | $tag_CMD"
    fi

    if
      [ "$param_ACTION" = "installed" ] ||
        [ "$param_ACTION" = "active" ]
    then
      publish_informtion "Verify if $fmt_CMD is $fmt_ACTION"
    else
      publish_informtion "Please $fmt_ACTION $fmt_CMD"
    fi
    ;;
  --found) publish_informtion "âœ… %s is installed $fmt_CMD" ;;
  --missing) publish_informtion "ðŸŸ¥ %s is not installed. $fmt_CMD" ;;
  --active) publish_informtion "ðŸ‘Ÿ %s is running $fmt_CMD" ;;
  --inactive) publish_informtion "ðŸ’¤ %s is inactive. $fmt_CMD" ;;
  --terminated) publish_informtion "ðŸ’€ %s $fmt_CMD" ;;
  --launched) publish_informtion "ðŸš€ %s $fmt_CMD" ;;
  --relaunched) publish_informtion "ðŸ”ƒ %s $fmt_CMD" ;;
  *) ;;
  esac
}

publish_informtion() { #@ Display information via necessary framework[s]
  #@ Enable printing only there is something to print
  [ "$*" ] || return

  case $1 in
  --oneline)
    shift
    printf "%s" "$*"
    ;;
  *) printf "%s\n" "$*" ;;
  esac
}

# ================================================================= #
#/> UTILITY                       	       			                  <\#
# ================================================================= #

cmd_is_available() { #@ Verify installation/availability
  type "$1" >/dev/null 2>&1
}

cmd_is_active() { #@ Check activity status
  [ ! "$(pgrep --count "$1")" -eq 0 ]
}

cmd_launch() { #@ Launch the command
  "$1" >/dev/null 2>&1 &
}

cmd_terminate() {
  Terminate the command
  pkill -TERM "$1"
}

cmd_relaunch() {
  #@ Close all active instances or the command
  cmd_terminate "$1"

  #@ Delay reload by 500 milliseconds
  sleep 0.5

  #@ Launch CMD
  cmd_launch "$1"
}

# ================================================================= #
#/> SCRIPT                         	       			                  <\#
# ================================================================= #

point_of_entry "$@"
