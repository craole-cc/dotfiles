#!/bin/sh
## shellcheck disable=SC2181,SC2034

# ===================================================================
#@		                           	INFO			                       @#
# ===================================================================

__info__() {
  _cmd_PATH="$(PathOf "$0")"
  _cmd_NAME="$(basename "$_cmd_PATH")"
  _cmd_HOME="$(dirname -- "$_cmd_PATH")"
  _cmd_VERSION="1.0"
  _cmd_DESCRIPTION="Description"
  _cmd_DEPENDENCIES="printf, echo, command, unalias"
  _cmd_USAGEGUIDE="$(
    cat <<USAGE_GUIDE

#>----------------------------------------------------<#
                      USAGE: $_cmd_NAME
#>----------------------------------------------------<#
    $_cmd_DESCRIPTION
#>----------------------------------------------------<#
            command <[options]> <[arguments]>
          $_cmd_NAME %start "cmd to process"
#>----------------------------------------------------<#
    -h | --help      |>    Usage guide
    -v | --version   |>    Version
    -d | --verbose   |>    Detailed output
    %i | %installed  |>    Check if installed
    %a | %active     |>    Check if active [default]
    %s | %start      |>    Run (if inactive)
    %x | %stop       |>    Stop (all instances)
    %r | %restart    |>    Stop all then restart one
#>----------------------------------------------------<#

USAGE_GUIDE
  )"
}

# ===================================================================
#@   		                   GLOBAL TOOLS                            @#
# ===================================================================

#| Usage display
__help__() {
  printf "%s\n" "$_cmd_USAGEGUIDE"
  exit 0
}

#| Version display
__version__() {
  printf "%s\n" "$_cmd_VERSION"
  exit 0
}

#| Allow formating
__format__() {
  if __cmd_exists__ tput; then
    reset="$(tput sgr0 || tput me)"  # Turn off all attributes
    bold="$(tput bold || tput md)"   # Bold
    italic="$(tput sitm || tput ZH)" # Italic

  else
    reset="$(printf "\033[m")"
    bold="$(printf "\033[1m")"
    italic="$(printf "\033[3m")"
  fi
}

#| Save variables as arrays
__save__() {
  for i; do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"; done
  echo " "
}

# ===================================================================
#@		                          ACTIONS			                       @#
# ===================================================================

__opts__() {

  case "$1" in
  '-h' | '--help') __help__ ;;
  '-v' | '--version') __version__ ;;
  '-d' | '--verbose')
    VERBOSE=true
    shift
    ;;
  '-t' | '--dry-run')
    DRYRUN=true
    shift
    ;;
  *) ;;
  esac

  #@ Declare user options (One flag per command)
  COUNTER=0

  while [ $# -gt 1 ]; do
    case "$1" in
    '%a' | '%active')
      ACTION="active"
      shift
      ;;
    '%i' | '%installed')
      ACTION="installed"
      shift
      ;;
    '%s' | '%start' | '%run')
      ACTION="start"
      shift
      ;;
    '%x' | '%stop' | '%kill')
      ACTION="stop"
      shift
      ;;
    '%r' | '%reload' | '%restart')
      ACTION="reload"
      shift
      ;;
    *) ;;
    esac

    if [ "$ACTION" = "start" ] || [ "$ACTION" = "reload" ]; then
      inTERM=
      case $1 in
      -t | --term)
        shift
        inTERM=true
        ;;
      -a | --app) shift ;;
      *) ;;
      esac
    fi

    #| Label
    COUNTER=$((COUNTER + 1))

    #| Set Command Variables
    if [ "$#" -gt 1 ]; then
      CMD="$1"
      shift
      OPTS="$(
        printf "%s" "$*" |
          cut --delimiter "%" -f 1
      )"
      CMD_OPTIONS="$(printf "%s %s" "$CMD" "$OPTS")"
    else
      CMD="$1"
    fi

    CLASS="$CMD"
    COMMAND="${CMD_OPTIONS:-$CMD}"

    #| Process requested actions
    if [ "$DRYRUN" ]; then
      __test__
    else
      __process__
    fi

    #| Continue accepting options
    [ "$#" -gt 2 ] && MULTIPLE=true
    shift
  done
}

# ===================================================================
#@		                           	TOOLS			                       @#
# ===================================================================

__cmd_exists__() {
  unalias "$@" >/dev/null 2>&1
  command -v "$@" >/dev/null 2>&1
}

__interm__() {
  if __cmd_exists__ kitty; then
    kitty --class "$CLASS" --detach "$COMMAND"
  elif __cmd_exists__ alacritty; then
    alacritty --class "$CLASS" --command "$COMMAND" &
  elif __cmd_exists__ st; then
    st -c "$CLASS" -e "$COMMAND" &
  elif __cmd_exists__ xterm; then
    xterm -class "$CLASS" -e "$COMMAND" &
  fi
}

__cmd_active__() {
  [ ! "$(pgrep --count "$@")" -eq 0 ]
}

__cmd_kill__() {
  pkill -TERM "$@"
}

__cmd_run__() { ("$@" >/dev/null 2>&1 &) }

__cmd_reload__() {
  # | Close CMD
  __cmd_kill__ "$@"

  # | Delay reload by 500 milliseconds
  sleep 0.5

  # |Start CMD
  __cmd_run__ "$@"
}

# ===================================================================
#@		                         MESSAGES			                       @#
# ===================================================================

__msg__() {

  #| Enable formatting
  __format__
  fmt_CMD="$(printf "%s%s%s" "${bold}" "$CMD" "${reset}")"
  fmt_ACTION="$(printf "%s%s%s" "${italic}" "$ACTION" "${reset}")"

  #| Display information
  case $1 in
  --input)
    if [ "$MULTIPLE" ]; then

      if [ "$COUNTER" -eq 1 ]; then
        printf "%s | " "$COUNTER"
      else
        printf "\n%s | " "$COUNTER"
      fi

      if
        [ "$ACTION" = "installed" ] ||
          [ "$ACTION" = "active" ]
      then
        printf "Verify if %s is %s\n" \
          "$fmt_CMD" "$fmt_ACTION"
      else
        printf "Please, %s %s.\n" \
          "$fmt_ACTION" "$fmt_CMD"
      fi
    fi
    ;;
  --found) printf "âœ… %s is installed\n" "$fmt_CMD" ;;
  --missing) printf "ðŸŸ¥ %s is not installed.\n" "$fmt_CMD" ;;
  --active) printf "ðŸ‘Ÿ %s is running\n" "$fmt_CMD" ;;
  --inactive) printf "ðŸ’¤ %s is inactive.\n" "$fmt_CMD" ;;
  --stopped) printf "ðŸ’€ %s\n" "$fmt_CMD" ;;
  --started) printf "ðŸš€ %s\n" "$fmt_CMD" ;;
  --reloaded) printf "ðŸ”ƒ %s\n" "$fmt_CMD" ;;
  --testing)
    __msg__ --input
    printf "COMMAND => %s\n" "$COMMAND"
    ;;
  --interm)
    printf "WMCLASS => %s\n" "$CLASS"
    ;;
  *) ;;
  esac

}

# ===================================================================
#@		                         ACTIONS			                       @#
# ===================================================================

__action__() {
  #| Verifiy command availability
  if ! __cmd_exists__ "$CMD"; then
    [ "$VERBOSE" ] && __msg__ --missing
    return 1
  fi

  #| Display actions
  case $1 in
  --availability)
    if __cmd_exists__ "$CMD"; then
      [ "$VERBOSE" ] && __msg__ --found
      return 0
    fi
    ;;
  --activity)
    if ! __cmd_active__ "$CMD"; then
      [ "$VERBOSE" ] && __msg__ --inactive
      return 1
    else
      [ "$VERBOSE" ] && __msg__ --active
      return 0
    fi
    ;;
  --stop)
    if ! __cmd_active__ "$CMD"; then
      [ "$VERBOSE" ] && __msg__ --inactive
      return 1
    else
      __cmd_kill__ "$CMD"
      [ "$VERBOSE" ] && __msg__ --stopped
      return 0
    fi
    ;;
  --start)
    if __cmd_active__ "$CMD"; then
      [ "$VERBOSE" ] && __msg__ --active
      return 1
    else
      if [ "$inTERM" ]; then
        __interm__
      else
        __cmd_run__ eval "$COMMAND"
      fi

      [ "$VERBOSE" ] && __msg__ --started
      return 0
    fi
    ;;
  --reload)
    if ! __cmd_active__ "$CMD"; then
      __action__ --start
      return 0
    else

      # | Close CMD
      __cmd_kill__ "$CMD"

      # | Delay reload by 500 milliseconds
      sleep 0.5

      # |Start CMD
      __action__ --start
      [ "$VERBOSE" ] && __msg__ --reloaded
      return 0
    fi
    ;;
  *) ;;
  esac
}

# ===================================================================
#@		                          PROCESS			                       @#
# ===================================================================

__process__() {

  #| Display input details
  [ "$VERBOSE" ] && __msg__ --input

  #| Process
  [ "$ACTION" = "installed" ] && __action__ --availability
  [ "$ACTION" = "active" ] && __action__ --activity
  [ "$ACTION" = "stop" ] && __action__ --stop
  [ "$ACTION" = "start" ] && __action__ --start
  [ "$ACTION" = "reload" ] && __action__ --reload

}

# ===================================================================
#@		                           TEST 			                       @#
# ===================================================================

__test__() {

  #| Enable detailed info
  VERBOSE=1

  #| Display input details
  __msg__ --testing

  [ "$inTERM" ] && __msg__ --interm

  #| Process
  [ "$ACTION" = "installed" ] && __action__ --availability
  [ "$ACTION" = "active" ] && __action__ --activity
  # [ "$ACTION" = "stop" ] && __action__ --stop
  # [ "$ACTION" = "start" ] && __action__ --start
  # [ "$ACTION" = "reload" ] && __action__ --reload

}

# ===================================================================
#@		                          CLEANUP			                       @#
# ===================================================================

__cleanup__() {
  unset VERBOSE COUNTER ACTION CMD
}

# ===================================================================
#@		                            RUN	  		                       @#
# ===================================================================

#@ Load internal variables
__info__

#@ Run
__opts__ "$@"

#@ Remove any leftover variables
__cleanup__
