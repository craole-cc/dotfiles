#!/bin/sh
# shellcheck disable=SC1003

scr_name="path_convert"
scr_description="Determine the given path and convert it to work on the next OS between Windows and Unix."
scr_usage=$(
  cat <<'HELP'
Usage: $scr_name [OPTIONS] [PATH to CONVERT]

DESCRIPTION:
$scr_description

OPTIONS:
  -h, --help            Display this help message
  -d, --verbose         Display detailed information during operation
  -p, --prefix PREFIX   Allow a prefix (eg /mnt)
  -c, --clip            Copy to clipboard using 'clip' windows utility

ARGUMENTS:
  PATH to CONVERT       The Windows or Unix path to convert

EXAMPLES:
    $scr_name -p /mnt/foo/bar "C:\Users\Administrator\.dots\Admin\Other\Resources\Home"
    Result|> /mnt/foo/bar/c/Users/Administrator/.dots/Admin/Other/Resources/Home

    $scr_name /mnt/c/Users/John
    Result|> C:\Users\John

    $scr_name "C:\Users\John" --prefix mnt
    Result|> /mnt/c/Users/John

    $scr_name "C:\Users\John" --clip
    Result|> Copied to clipboard: /c/Users/John
HELP
)

main() {
  purge_env
  parse_input "$@"
  parse_output
  exit "$exit_code"
}

purge_env() {
  exit_code=0
  verbosity=1
  unset path path_type clip verbose
}

parse_input() {
  purge_env

  while [ $# -gt 0 ]; do
    case "$1" in
    -h | --help)
      print_help
      exit
      ;;
    -d | --verbose)
      verbosity=2
      ;;
    -p | --prefix)
      prefix="$2"
      shift
      ;;
    -c | --clip)
      clip=true
      ;;
    -q | --quiet)
      verbosity=0
      ;;
    *)
      validate_path --quiet "$1" || exit 1

      input_path="$(validate_path "$1")"
      # input_path_type="$(validate_path --type "$input_path")"

      # # Check for path argument
      # if [ "$1" ]; then
      #   validate_path "$1" || exit 1
      # else
      #   error="Missing Path Argument"
      #   label="Input Path"
      #   sample="C:\\Users\\John\\.bashrc or /home/John/.bashrc"
      #   exit_type="exit"
      #   exit_code=1
      #   message="$(
      #     printf "%s Error: %s\n" "$label" "$error"
      #     printf "Expected: Path (eg. %s )\n" "$sample"
      #   )"
      # Check for path argument
      # if validate_path "$1"; then
      #   input_path="$1"
      #   input_path_type="$(validate_path --type "$input_path")"
      # else
      #   error="Missing Path Argument"
      #   label="Input Path"
      #   sample="C:\\Users\\John\\.bashrc or /home/John/.bashrc"
      #   exit_type="exit"
      #   exit_code=1
      #   message="$(
      #     printf "%s Error: %s\n" "$label" "$error"
      #     printf "Expected: Path (eg. %s )\n" "$sample"
      #   )"

      #   printf "%s\n" "$message"
      #   eval "$exit_type" "$exit_code"
      # fi
      ;;
    esac
    shift
  done

  # input_path="$(validate_path "$input_path")"
  # input_path_type="$(validate_path --type "$input_path")"
}

validate_path() {

  label="Input Path"
  path_sample="C:\\Users\\John\\.bashrc"

  while [ $# -gt 0 ]; do
    case "$1" in
    --quiet) check_path=true ;;
    --type) check_type=true ;;
    -w | --win*) path_type="Windows" ;;
    -u | --unix) path_type="Unix" ;;
    *)
      # Check for path argument
      if [ "$1" ]; then
        # path="$1"
        case "$path" in
        *\\*) path="$(printf "%s" "$1" | tr '\\' '/')" ;;
        *//*) path="$(printf "%s" "$1" | tr -s "/")" ;;
        !*/*)
          printf "Slash missing in path: %s\n" "$1"
          return 1
          ;;
          # {
          #   regex='^(\.|/)?[a-zA-Z0-9_-]+(/[a-zA-Z0-9_:./-]+)*$'
          #   [ "$path" = "/" ] ||
          #     printf "%s" "$path" |
          #     grep --extended-regexp --quiet "$regex"
          # } || {
          # regex='[^a-zA-Z0-9_.:/-]'
          # printf \
          #   "Invalid characters found in the path: '%s'\nPath: %s\n\n" \
          #   "$(
          #     printf "%s" "$path" |
          #       grep --extended-regexp --only-matching "$regex" |
          #       uniq | tr '\n' ' '
          #   )" \
          #   "$path"
          # return 1
          # }
          # ;;
        esac
      else
        printf "Missing Path Argument"
        return 1
      fi
      ;;
    esac
    shift
  done

  __windows() {
    if printf "%s" "$path" | grep --quiet '^[A-Za-z]:/'; then
      printf "Windows"
    else
      return 1
    fi
  }

  __unix() {
    printf "Unix"
  }

  if [ "$check_type" ]; then
    __windows || __unix || printf "Unknown"
  else
    # [ "$check_path" ] ||
    printf "%s\n" "$path"
  fi

}

parse_output() {
  case "$verbosity" in
  0) ;;
  1)
    printf "%s\n" "$output_path"
    ;;
  *)
    printf "Path Input: %s\n" "$input_path"
    printf "Path Input Type: %s\n" "$input_path_type"
    printf "Path Output: %s\n" "$output_path"
    echo "EXIT CODE: $exit_code"
    echo "Check Type: $check_type"
    ;;
  esac

  [ "$clip" ] && send_to_clipboard "$path"

}

print_usage() {
  printf "%s\n" "$scr_usage"
}

convert_to_linux_path() {
  path="$1"

  case "$path" in
  *:/*)
    printf "Invalid windows path (%s) missing :/" "$path"
    return 1
    ;;
  esac

  # Replace backslashes with forward slashes
  # shellcheck disable=SC1003
  path=$(printf "%s" "$path" | tr '\\' '/')

  # Extract the drive letter (e.g., C)
             

  [ "${#drive}" -eq 1 ] || {
    printf "Drive letter '%s' should be a single letter" "$drive"
    return 1
  }

  printf "%s" "$drive" | grep -Eq '^[A-Za-z]$' || {
    printf "Invalid characters in drive letter '%s'" "$drive"
    return 1
  }

  # Check if the drive letter contains only one letter and has a length of 1
  if
    [ "${#drive}" -eq 1 ] &&
      printf "%s" "$drive" | grep -Eq '^[A-Za-z]$'
  then
    # Remove the colon from the drive letter
    drive=${drive%:}

    # Prefix the drive letter with a forward slash
    drive="/$drive"

    # Convert the drive letter to lowercase
    drive=$(printf "%s" "$drive" | tr '[:upper:]' '[:lower:]')

    # Update the path with the drive letter
    path=${drive}${path#*:}
  else
    echo "Invalid drive letter: $drive"
    exit 1
  fi

  # If a prefix is provided, add it to the path.
  [ "$prefix" ] && path="${prefix}${path}"

  # Ensure a forward slash before the path
  path=${path#/} # Remove any leading forward slash (if present)
  path="/$path"  # Ensure the path starts with a forward slash '/'

  # Return the path if it is valid
  validate_nix_path "$path"

  return
}

send_to_clipboard() {
  path="$1"
  type | grep -iq "win" # Check if running on Windows
  if [ $? -eq 0 ]; then
    printf '%s' "$path" | clip
  else
    printf '%s' "$path" | xclip -selection clipboard
  fi
  printf "Path copied to clipboard.\n"
}

is_valid_linux_path() {
  path="$1"

  # Remove repeated slashes with the `tr` command
  path=$(printf "%s" "$path" | tr -s "/")

  echo "PATH: $path"
  # Remove leading and trailing slashes to avoid duplicates
  path=${path#/} # Drop leading slash
  path=${path%/} # Drop trailing slash

  # Define a pattern to match valid Linux path characters
  valid_path_chars="[a-zA-Z0-9_./-]"

  invalid_chars=$(printf "%s" "$path" | tr -c "$valid_path_chars" "\n" | tr -d "\n")

  # invalid_chars=$(printf "%s" "$path" | tr -d "$valid_path_chars")

  # Check if the path contains only valid characters
  if [ "$invalid_chars" ]; then
    printf \
      "Invalid characters found in the path: %s\nPath: %s\n" \
      "$invalid_chars" "$path"
    return 1
  fi

  printf "/%s\n" "$path" # Valid path, return with leading slash
  return 0
}

validate_nix_path() {
  path="$*"
  unset invalid_chars

  # Check for empty or all-slash path
  [ "$path" ] || return 1

  #@ Manage problematic slashes
  path=${path#/} # Remove leading slash
  path=${path%/} # Remove trailing slash
  path=/${path}  # Re-add leading slash
  path=$(
    printf "%s" "$path" |
      tr '\\' '/' | # Convert backslashes to forward slashes
      tr -s "/"     # Remove repeated slashes
  )

  # Regular expression to validate Unix file path
  # This regex checks for absolute or relative paths, with optional leading dot (for hidden files)
  # and alphanumeric characters, slashes, hyphens, underscores, and dots for the filename.
  regex='^(\.|/)?[a-zA-Z0-9_-]+(/[a-zA-Z0-9_./-]+)*$'

  if
    [ "$path" = "/" ] ||
      printf "%s" "$path" |
      grep --extended-regexp --quiet "$regex"
  then
    # Return the valid path
    printf "%s\n" "$path"
    return 0
  else
    regex='[^a-zA-Z0-9_./-]'

    invalid_chars=$(
      printf "%s" "$path" |
        grep --extended-regexp --only-matching "$regex" |
        uniq | tr '\n' ' '
    )
    printf \
      "Invalid characters found in the path: '%s'\nPath: %s\n" \
      "$invalid_chars" "$path"
    return 1
  fi
}

validate_win_path() {
  label="Windows Path"
  path="$1"
  path_sample="C:\\Users\\John\\.bashrc"

  # TODO: Move messaging and error handling to seperate functions

  # Check for path argument
  [ "$path" ] || return 1

  printf Windows
  # return 0

  #@ Check for Directory Separators
  if printf "%s" "$path" | grep --quiet '\\//'; then
    #@ Manage problematic slashes
    path=$(
      printf "%s" "$path" |
        tr '\\' '/' | # Convert backslashes to forward slashes
        tr -s "/"     # Remove repeated slashes
    )
  else
    error="Missing Directory Separator"
    printf "%s Error: %s\n" "$label" "$error"
    printf "Expected: '/' or '\\\'\n"
    printf "Received: %s\n\n" "$path"
    return 1
  fi

  #@ Check for Drive Letter
  if printf "%s" "$path" | grep --quiet '^[A-Za-z]:/'; then
    echo "Use 'tr' to change the drive letter to uppercase"

    # Remove the colon from the drive letter
    drive=${drive%:}

    # Convert the drive letter to lowercase
    drive=$(printf "%s" "$drive" | tr '[:upper:]' '[:lower:]')
  else
    error="Invalid Drive Letter"
    printf "%s Error: %s\n" "$label" "$error"
    printf "Expected: Single drive letter followed by a ':/' or ':\\\'\n"
    printf "Received: %s\n\n" "$path"
    return 1
  fi
  return

  # case "$path" in
  # "[A-Za-z]:")
  # Check if the path starts with a single letter followed by a colon
  printf "%s" "$path" | grep -Eq '^[a-zA-Z]\:' || {
    print "Drive letter '%s' should be a single letter followed by a colon" "$path"
    return 1
  }

  return
  # Regular expression to validate Unix file path
  # This regex checks for absolute or relative paths, with optional leading dot (for hidden files)
  # and alphanumeric characters, slashes, hyphens, underscores, and dots for the filename.
  regex='^(\.|/)?[a-zA-Z0-9_-]+(/[a-zA-Z0-9_./-]+)*$'
  regex='^/[A-Za-z]:/'

  if
    [ "$path" = "/" ] ||
      printf "%s" "$path" |
      grep --extended-regexp --quiet "$regex"
  then
    # Return the valid path
    printf "%s\n" "$path"
    return 0
  else
    regex='[^a-zA-Z0-9_./-]'

    printf \
      "Invalid characters found in the path: '%s'\nPath: %s\n\n" \
      "$(
        printf "%s" "$path" |
          grep --extended-regexp --only-matching "$regex" |
          uniq | tr '\n' ' '
      )" \
      "$path"
    return 1
  fi

}

# validate_win_path "C\Users\Administrator\.dots@^\Admin\Other\//Bin\\utility\path_convert"

# validate_win_path "C/"
# validate_win_path "Cc:\Users\Administrator\.dots@^\Admin\Other\//Bin\\utility\path_convert"
# validate_win_path "C:\Users\Administrator\.dots@^\Admin\Other\//Bin\\utility\path_convert"
# validate_win_path "C:\Users\Administrator\.dots\Admin\Other\//Bin\\utility\path_convert"
# validate_nix_path "@#$%%/path\/to/your/file"
# validate_nix_path "path//to////your/fil@e"
# validate_nix_path "path/to/y/\//our/file"
set -- \
  --verbose \
  "c:"

main "$@"
