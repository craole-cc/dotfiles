#!/bin/sh

# ===================================================================
#@		                           	INFO			                       @#
# ===================================================================

__info__() {
  _cmd_PATH="$(PathOf "$0")"
  _cmd_NAME="$(basename "$_cmd_PATH")"
  _cmd_HOME="$(dirname -- "$_cmd_PATH")"
  _cmd_VERSION="1.0"
  _cmd_DESCRIPTION="Check if the value is a valid number"
  _cmd_DEPENDENCIES="ripgrep, weHave"
  _cmd_USAGEGUIDE="$(
    cat <<USAGE_GUIDE

#>----------------------------------------------------<#
              $_cmd_NAME <[options]> <[arguments]>
#>----------------------------------------------------<#
  $_cmd_DESCRIPTION
#>----------------------------------------------------<#
      -h --help       |>     Usage guide
      -v --version    |>     Version
      -d --verbose    |>     Details
#>----------------------------------------------------<#

USAGE_GUIDE
  )"

  #@ Usage display
  __help__() { printf "%s\n" "$_cmd_USAGEGUIDE"; }

  #@ Version display
  __version__() { printf "%s\n" "$_cmd_VERSION"; }

}

# ===================================================================
#@		                          OPTIONS			                       @#
# ===================================================================

parse_args() {

  #@ Declare user options
  for arg in "$@"; do
    case "$arg" in
    -h | --help) __help__ ;;
    -v | --version) __version__ ;;
    -d | --verbose) verbose=true ;;
    -f | --float) allow_floats=true ;;
    esac
  done

  #@ Validate each number entered via a loop
  while [ "$#" -gt 0 ]; do
    case "$1" in
    --* | -*) ;;
    *) num="$1" ;;
    esac

    __process__
    shift
  done
}

# ===================================================================
#@		                          DEFAULT			                       @#
# ===================================================================

__defaults__() {
  #@ GREP
  if weHave rg; then
    regrep() { rg -q "$@"; }
  else
    regrep() { grep -Eq "$@"; }
  fi

  #@ Regex
  regex_integer='^[+-]?[0-9]+$'
  regex_float='^[+-]?[0-9]*\.[0-9]+$|^[+-]?[0-9]+\.[0-9]*$'

  unset invalid

}

__msg__() {
  [ "$verbose" ] || return
  case "$1" in
  --integer) printf "%s is an integer\n" "$num" ;;
  --float) printf "%s is a floating-point number\n" "$num" ;;
  --invalid) printf "%s is not a valid number\n" "$num" ;;
  esac

}

__process__() {

  #@ Float
  if [ "$allow_floats" ] &&
    echo "$num" | regrep "$regex_float"; then
    __msg__ --float

  #@ Integer
  elif echo "$num" | regrep "$regex_integer"; then
    __msg__ --integer

  #@ Invalid
  else
    __msg__ --invalid
    invalid=1
  fi

}

__cleanup__() {
  unset menu type style theme

  if [ "$invalid" ]; then
    exit 1
  else
    exit 0
  fi
}

__main__() {
  __info__
  __defaults__
  parse_args "$@"
  __cleanup__
}

__main__ "$@"
