#!/bin/sh
scr_PATH="$(PathOf "$0")"
scr_NAME="$(basename "$scr_PATH")"
scr_HOME="$(dirname -- "$scr_PATH")"
scr_VERSION="1.0"
scr_DESCRIPTION="jumps into a directory, runs a command and returns to the original directory or one specified by the user"
scr_DEPENDENCIES="coreutils"
scr_USAGE="$(
  cat <<USAGE
  $scr_NAME ($scr_VERSION)
  $scr_AUTHOR

  Description:
  $scr_NAME $scr_DESCRIPTION

  Usage:
  $scr_NAME [OPTS] [VARS]
  $scr_NAME -d VAR1 VAR2

  Options:
    -h, --help                Display this help message
    -v, --version             Display version information
    -q, --quiet               Set verbosity to quiet
    -d, --verbose             Set verbosity to debug
    -R, --rd, --cd [PATH]     Specify return directory
    -W, --wd [PATH]           Specify working directory
    -c, --command [COMMAND]   Specify command to run

  Arguments:
  [COMMAND]       The command to to normalize.

  Exit status:
    0                   The path was successfully normalized.
    1                   An error occurred.

  Examples:
    $scr_NAME HOME XDG_CONFIG
    $scr_NAME HOME XDG_CONFIG --verbose info
    $scr_NAME -d=debug HOME
USAGE
)"

#/> Initialization                                  <\
parse_arguments() {
  #@ Parse command-line arguments
  while [ $# -gt 0 ]; do
    case $1 in
    -h | --help) end_process --usage ;;
    -v | --version) end_process --version ;;
    -q | --quiet) verbosity="quiet" ;;
    -d=* | --verbose=*) verbosity="${1#*=}" ;;
    -d | --verbose)
      case "$2" in
      */*) ;;
      *)
        if [ "$2" ]; then
          verbosity="$2"
          shift
        fi
        ;;
      esac
      ;;
    -*) end_process --error opt "$1" ;;
    *) ;;
    esac
    shift
  done

  #@ Initalize default variables
  unique="${unique:-true}"
  targetDIR="${targetDIR:-$1}"
  targetCMD="${targetCMD:-$2}"
  returnDIR="${returnDIR:-$PWD}"
  icon_success="${icon_success:-ðŸŸ©}"
  icon_error="${icon_error:-ðŸŸ¥}"
  icon_dead="${icon_dead:-ðŸ’€}"
  icon="${icon:-$icon_success}"

  case "$verbosity" in
  0 | quiet) verbosity=0 ;;
  1 | error | debug) verbosity=1 ;;
  2 | info | *) verbosity=2 ;;
  esac
}

usage() {
  cat <<-EOF
Usage: $scr_NAME [options]

Options:
  -v, --version                Display version information
  -h, --help                   Display this help message
  -q, --quiet                  Set verbosity to quiet
  -d, --debug                  Set verbosity to debug
  -R, --rd, --cd [PATH]        Specify return directory
  -W, --wd [PATH]              Specify working directory
  -c, --command [COMMAND]      Specify command to run
EOF
}

version() {
  printf "Version 1.0.0\n"
}

error() {
  printf "%s" "Error: $1\n" >&2
  exit 1
}

# Parse command line options
while [ $# -gt 0 ]; do
  case "$1" in
  -v | --version)
    version
    exit 0
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  -q | --quiet) verbosity=0 ;;
  -d | --debug | --verbose)
    case "$2" in
    "")
      verbosity=2
      ;;
    info)
      verbosity=1
      ;;
    error)
      verbosity=3
      ;;
    quiet)
      verbosity=0
      ;;
    *)
      error "Invalid verbosity level: $2"
      ;;
    esac
    shift
    ;;
  -R | --rd | --cd)
    returnDIR="$2"
    shift
    ;;
  -W | --wd)
    WorkDIR="$2"
    shift
    ;;
  -c | --command)
    Command="$2"
    shift
    ;;
  *)
    if [ "$WorkDIR" = "" ]; then
      WorkDIR="$1"
    elif [ "$Command" = "" ]; then
      Command="$1"
    else
      error "Invalid option: $1"
    fi
    ;;
  esac
  shift
done

# Check for required options
if [ "$WorkDIR" = "" ]; then
  error "No working directory specified"
fi

if [ "$Command" = "" ]; then
  error "No command specified"
fi

# Change to work directory
if ! cd "$WorkDIR" >/dev/null; then
  error "Could not change to directory $WorkDIR"
fi

# Run command
if [ "$verbosity" -ge 1 ]; then
  printf "Running command: %s\n" "$Command"
fi

if ! eval "$Command"; then
  error "Command failed: $Command"
fi

# Change back to return directory
if ! cd "$returnDIR" >/dev/null; then
  error "Could not change back to directory $returnDIR"
fi
