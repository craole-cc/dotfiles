#!/bin/sh

# ===================================================================
#@		                           	INFO			                       @#
# ===================================================================

__info__() {
  _cmd_PATH="$(PathOf "$0")"
  _cmd_NAME="$(basename "$_cmd_PATH")"
  _cmd_HOME="$(dirname -- "$_cmd_PATH")"
  _cmd_VERSION="1.0"
  _cmd_DESCRIPTION="Manage NixOS"
  _cmd_DEPENDENCIES="weHave"
  _cmd_USAGEGUIDE="$(
    cat <<USAGE_GUIDE

#>----------------------------------------------------<#
              $_cmd_NAME <[options]> <[arguments]>
#>----------------------------------------------------<#
  $_cmd_DESCRIPTION
#>----------------------------------------------------<#
      -h --help       |>     Usage guide
      -v --version    |>     Version
      -d --verbose    |>     Details
      -r --rebuild    |>     Rebuild [default]
      -u --update     |>     Update
      -g --clean      |>     Clean
      -c --config     |>     Config
      -f --flake      |>     Flake
#>----------------------------------------------------<#

USAGE_GUIDE
  )"

  #@ Usage display
  __help__() { printf "%s\n" "$_cmd_USAGEGUIDE"; }

  #@ Version display
  __version__() { printf "%s\n" "$_cmd_VERSION"; }
}

# ===================================================================
#@		                           	 MAIN			                       @#
# ===================================================================

__main__() {
  #@ Ensure app is installed
  weHave nixos-version || __error__ --app

  #@ Load internal variables
  __info__
  __opts__ "$@"
  __init__

  #@ Run
  __process__
  # __test__ "$@"
  __cleanup__
}

# ===================================================================
#@		                          OPTIONS			                       @#
# ===================================================================
__opts__() {
  #@ Declare user options (Allow multiple flags)
  # shellcheck disable=SC1083
  parser_definition() {
    setup REST
    disp _cmd_USAGEGUIDE -h --help
    disp _cmd_VERSION -v --version
    flag verbose -d --verbose -- "takes no arguments"
    flag rebuild -r --rebuild -- "takes no arguments"
    flag update -u --update -- "takes no arguments"
    flag clean -g --clean -- "takes no arguments"
    flag check -c --check_ -- "takes no arguments"
    flag trace -t --trace -- "takes no arguments"
    flag flake -f +f --{no-}flake -- "expands to --flake and --no-flake"
    param config -c --config -- "accepts --param value / --param=value"

  }

  #@ Load options
  weHave getoptions &&
    eval "$(getoptions parser_definition) exit 1"

  #@ Establish defaults
  # __defaults__ "$@"
}

# ===================================================================
#@		                          DEFAULT			                       @#
# ===================================================================

__init__() {

  #@ Set flags when no arguments are given
  # [ "$#" -eq 0 ] && rebuild=true
  #TODO: Throw an error if no arguments given, allow user to select an option or accept rebuild as the default

  #@ Load Environment Variables
  # shellcheck disable=SC1091
  . "$DOTS_ENV_CTX/nixos"

  #@ Prioritize user config
  [ "$config" ] && NIXOS_CONFIG="$config"

  #@ Validate config
  [ "${NIXOS_CONFIG##*.}" = "nix" ] || __error__ --extension
  [ -f "$NIXOS_CONFIG" ] || __error__ --config

  #@ Set Flake directory as config, if necessary
  # [ "$flake" ] &&
  # [ "$(basename "$NIXOS_CONFIG")" = "flake.nix" ] &&
  #   [ "$NIXOS_FLAKE" ]
  #   NIXOS_CONFIG="$(dirname "$NIXOS_CONFIG")"

}

# ===================================================================
#@		                           	ERROR			                       @#
# ===================================================================

__error__() {
  case $* in
  --app) msg="Application not found in PATH" ;;
  --config) msg="Missing config file [$NIXOS_CONFIG]" ;;
  --extension) msg="Missing the .nix extension
   CONFIG: $NIXOS_CONFIG" ;;
  *) ;;
  esac

  printf "\nðŸŸ¥ %s\n" "$msg"
  __help__
  exit 1
}

# ===================================================================
#@		                           	TEST			                       @#
# ===================================================================

__test__() {
  case $1 in
  --flake) echo "NIXOS_FLAKE: $NIXOS_FLAKE" ;;
  --config) echo "NIXOS_CONFIG: $NIXOS_CONFIG" ;;
  --rebuild) echo "REBUILD: $rebuild" ;;
  --clean) echo "GC: $clean" ;;
  esac

  echo "OPTS REBUILD: $rebuild"
  echo "OPTS UPDATE: $update"
  echo "OPTS GC: $clean"

}

# ===================================================================
#@		                          PROCESS			                       @#
# ===================================================================
check_roots() {
  #DOC# https://nixos.wiki/wiki/Storage_optimization
  # find -H /nix/var/nix/gcroots/auto -type l |
  #   xargs -I {} sh -c 'readlink {}; realpath {}; echo'

  find -H /nix/var/nix/gcroots/auto -type l -exec sh -c 'readlink "$0"; realpath "$0"; echo' {} \;

  sudo nix-env -p /nix/var/nix/profiles/system --list-generations

}

clean_garbage() {
  sudo nix-collect-garbage --delete-old
}

update_store() {
  if [ "$flake" ]; then
    nix flake update --commit-lock-file "$NIXOS_FLAKE"
  else
    sudo nix-channel --update
  fi
}

rebuild_system() {
  cmd="sudo nixos-rebuild switch"

  if [ "$flake" ]; then
    opts="--flake $NIXOS_FLAKE"
    [ "$trace" ] && opts="$opts --show-trace"
  fi

  eval "$cmd" "$opts"
}

__process__() {

  #@ Manage old configs and garbage
  [ "$check" ] && check_roots
  [ "$clean" ] && clean_garbage

  #@ Update DOTS
  if [ "$update" ]; then
    DOTSup "NixOS Full Update"
  elif [ "$rebuild" ]; then
    DOTSup "NixOS Update"
  fi

  #@ Update Store/Repositories
  [ "$update" ] && update_store

  #@ Rebuild per flake or config
  [ "$rebuild" ] && rebuild_system

}

# ===================================================================
#@		                          CLEANUP			                       @#
# ===================================================================

__cleanup__() {
  unset \
    verbose \
    rebuild \
    update \
    clean \
    config \
    flake
}

# ===================================================================
#@		                            MAIN  		                       @#
# ===================================================================

__main__ "$@"
