#!/bin/sh

: <<NIX
  system.activationScripts.setDotsPermissions.text =
  let
    inherit (lib.strings) makeBinPath;
    inherit (specialArgs.paths) flake scripts;
  in ''
    #@ Ensure required commands are available
    PATH=$PATH:${
      makeBinPath (
        with pkgs;
        [
          coreutils
          findutils
          fd
          rsync
          gnused
          gawk
          getent
          diffutils
          eza
          trashy
        ]
      )
    }

    . ${scripts.dots} \
      --source ${flake.local} \
      --target ${flake.root} \
      --verbose \
      --strict
  '';

  systemd.tmpfiles.rules = [
    "d ${flake.root} 0770 root wheel -"
    "d ${flake.root} 2770 root wheel -"
  ];
NIX

initialize_script() {
  LOG_INFO="INFO"
  LOG_WARN="WARN"
  LOG_ERROR="ERROR"

  SCR_NAME="link_dots"
  SCR_VERSION="0.1"
  SCR_USAGE_BASIC="Usage: $SCR_NAME --source [SOURCE_DIR] --target [TARGET_DIR]"
  SCR_USAGE_GUIDE=$(
    cat <<EOF
$SCR_USAGE_BASIC

Options:
  -s, --source     Source directory containing dot files
  -t, --target     Target directory for synchronized files
  -v, --verbose    Enable verbose logging
  -d, --dry-run    Show what would happen without making changes
  -h               Show the usage instructions
      --help       Show this help message
      --version    Show version information
EOF
  )
}

initialize_environment() {
  #@ Define the target and source directories for the symlink
  unset TARGET_PATH SOURCE_PATH VERBOSE DRY_RUN USERS_CACHE

  while [ "$#" -gt 0 ]; do
    case "$1" in
    -h)
      printf "%s\n" "$SCR_USAGE_BASIC"
      return 0
      ;;
    --help)
      printf "%s\n" "$SCR_USAGE_GUIDE"
      return 0
      ;;
    --version)
      printf "%s\n" "$SCR_VERSION"
      return 0
      ;;
    -s | --source)
      [ "$2" ] || {
        log "$LOG_ERROR" "Missing source directory path"
        return 1
      }
      SOURCE_PATH="$2"
      shift
      ;;
    -t | --target)
      [ "$2" ] || {
        log "$LOG_ERROR" "Missing target directory path"
        return 1
      }
      TARGET_PATH="$2"
      shift
      ;;
    -d | --verbose | --debug)
      VERBOSE=true
      ;;
    --dry-run | --simulate)
      DRY_RUN=true
      VERBOSE=true
      ;;
    -x | --strict)
      STRICT_MODE=true
      ;;
    *)
      log "$LOG_ERROR" "Unknown option: $1"
      return 1
      ;;
    esac
    shift
  done
}

initialize_utilities() {

  #? Enhanced logging function with timestamps and levels
  #? Parameters:
  #?   $1 (string): Log level (INFO, WARN, ERROR)
  #?   $2 (string): Message to log
  log() {
    _level="$1"
    _message="$2"
    _timestamp="$(date '+%Y-%m-%d %H:%M:%S')"

    printf "[%s] [%s] %s\n" "$_timestamp" "$_level" "$_message"

    #@ Exit on error messages if strict mode is enabled
    [ "$_level" = "$LOG_ERROR" ] && [ "$STRICT_MODE" = true ] && return 1
  }

  #? Check if all of the given commands are available in the system PATH.
  #? Parameters:
  #?   $@ (string): The commands to check for.
  #?
  #? Returns 0 if all commands are available, 1 otherwise.
  wehave() {
    for _cmd in "$@"; do
      command -v "$_cmd" >/dev/null 2>&1
    done
  }

  #? Validates the existence of an argument, file, directory, or path.
  #? Arguments:
  #?   --arg [NAME] (optional): Validate that the argument NAME is set.
  #?   --dir [PATH] (optional): Validate that the directory specified by PATH exists.
  #?   --file [PATH] (optional): Validate that the file specified by PATH exists.
  #?   --path [PATH] (optional): Validate that the path specified by PATH exists.
  #? If no validation type is specified, validate_info will exit with code 0.
  validate_info() {
    unset _validated _type _var

    case "$1" in
    --root-user)
      [ "$(id -u)" -eq 0 ] || {
        printf "ðŸ”´ This script must be run as root\n"
        return 1
      }
      ;;
    --arg | --var)
      [ -n "$(get_var "$2")" ] || {
        printf "ðŸ”´ Missing required argument/variable: %s\n" "$2"
        return 1
      }
      return 0
      ;;
    --dir)
      _type="Directory"
      _var="$(get_var "$2")"
      [ -d "$_var" ] && _validated=true
      ;;
    --file)
      _type="File"
      _var="$(get_var "$2")"
      [ -f "$_var" ] && _validated=true
      ;;
    --diff)
      _source="$(get_var "$2")"
      _target="$(get_var "$3")"

      [ -d "$_source" ] || {
        log "$LOG_WARN" "Source directory does not exist"
        return 1
      }

      [ "$_target" ] || {
        log "$LOG_ERROR" "Target directory not defined"
        return 1
      }

      [ "$(resolve_path "$_source")" = "$(resolve_path "$_target")" ] && {
        log "$LOG_ERROR" "Source and target paths cannot be the same"
        return 1
      }

      return 0
      ;;
    --link)
      _type="Symbolic link"
      _var="$(get_var "$2")"
      _target="$(get_var "$3")"
      _resolved="$(resolve_path "$_var")"

      [ -L "$_var" ] && [ -n "$_resolved" ] && {
        if [ "$_resolved" = "$_target" ]; then
          _validated=true
        elif diff_dir "$_var" "$_target"; then
          _validated=true
        else
          log "$LOG_ERROR" "Symbolic link does not point to target path"
          return 1
        fi
      }
      ;;
    esac

    case "$_type" in
    "Directory" | "File")

      #@ Check path lengths
      [ "${#_var}" -gt 4096 ] && {
        log "$LOG_ERROR" "Path exceeds maximum length: $_var"
        return 1
      }

      #@ Prevent relative path traversal
      case "$_var" in
      */../* | ../* | */.. | \.\.)
        log "$LOG_ERROR" "Path contains invalid parent directory references: $_var"
        return 1
        ;;
      esac

      #@ Prevent traversal of root directory
      [ "$_var" = "/" ] && {
        log "$LOG_ERROR" "Root directory cannot be used as source"
        return 1
      }
      ;;
    esac

    if [ "$_validated" ]; then
      [ "$VERBOSE" ] &&
        log "$LOG_INFO" "$_type validated: $(fs_info "$_var")"
      return 0
    else
      log "$LOG_ERROR" "$_type does not exist: $_var"
      return 1
    fi
  }

  #? Retrieves and displays detailed information about the given path.
  #?
  #? Parameters:
  #?   _path: The file or directory path for which to retrieve information.
  #?
  #? Returns:
  #?   1 if the path does not exist, otherwise prints the detailed information.
  #?   Uses 'eza' or 'pls' for enhanced formatting if available, defaulting to 'ls'.
  fs_info() {
    _path="$1"

    if [ ! -e "$_path" ]; then
      log "$LOG_ERROR" "Path does not exist: $_path"
      return 1
    elif wehave eza; then
      eza "$_path" \
        --long \
        --list-dirs \
        --smart-group \
        --no-time \
        --octal-permissions \
        --color=always --icons=auto
    elif wehave pls; then
      pls "$_path" -d oct -d perm -d group -d user -d typ
    else
      ls "$_path" \
        -l \
        --human-readable \
        --directory \
        --color=always
    fi
  }

  #? Safely retrieve a value, either directly or from a variable name.
  #?
  #? Examples:
  #?   get_var FOO      # Gets value of $FOO
  #?   get_var '$FOO'   # Gets value of $FOO
  #?   get_var "$FOO"   # Returns $FOO value directly
  #?   get_var /path    # Returns "/path" directly
  #?
  #? Parameters:
  #?   $1 (string): Direct value or name of variable to get
  #?
  #? Returns:
  #?   The value, either directly or from the specified variable
  #?
  #? Notes:
  #?   - Safely handles unset variables
  #?   - Preserves whitespace in values
  #?   - POSIX-compliant implementation
  get_var() {
    value="$1"

    #@ Return empty string if no argument provided
    [ -z "$value" ] && return 1

    #@ Treat value as variable ref if starts with $ or is a valid name
    case "$value" in
    '$'*) value="${value#$}" ;;            #? Strip leading $
    [a-zA-Z_]*[a-zA-Z0-9_]*) ;;            #? Valid variable name
    *) printf '%s' "$value" && return 0 ;; #? Direct value
    esac

    #@ Get the variable value
    eval "printf '%s' \"\${$value:-}\""
  }

  #? Retrieve the list of users belonging to a specified group.
  #?
  #? Parameters:
  #?   $1 (string): The name of the group to query.
  #?
  #? Returns:
  #?   A space-separated string of usernames that are members of the specified group.
  #?
  #? Notes:
  #?   This function uses the `getent` command to fetch group information and
  #?   extracts the list of users from the group entry. It assumes that the
  #?   group name provided exists in the system.
  get_users_per_group() {
    _group="$1"

    #@ Return cached result if available
    [ -n "$USERS_CACHE" ] && {
      printf '%s' "$USERS_CACHE"
      return 0
    }

    #@ Get and cache new result
    USERS_CACHE="$(getent group "$_group" | cut -d: -f4 | tr ',' ' ')"
    printf '%s' "$USERS_CACHE"
  }

  #? Compare the contents of two directories.
  #?
  #? Parameters:
  #?   $1 (string): The path to the first directory to compare.
  #?   $2 (string): The path to the second directory to compare.
  #?
  #? Returns:
  #?   0 if the contents of the directories match, otherwise 1.
  #?
  #? Notes:
  #?   This function compares the contents of the two directories using the
  #?   `diff` command with the `--recursive` and `--quiet` flags. This means
  #?   that the comparison will be done recursively, and that no output will
  #?   be produced if the contents match. If the contents differ, a message will
  #?   be printed indicating which files differ.
  diff_dir() {
    _dir1="$1"
    _dir2="$2"

    if diff --recursive --brief "$_dir1" "$_dir2" >/dev/null; then
      [ "$VERBOSE" ] &&
        log "$LOG_INFO" "Contents of '$_dir1' and '$_dir2' match"
      return 0
    else
      log "$LOG_WARN" "Contents of '$_dir1' and '$_dir2' differ"
      return 1
    fi
  }

  #? Set permissions for items in a directory.
  #?
  #? Parameters:
  #?   $1 (string): The path to the directory to set permissions for.
  #?   $2 (string): The type of items to set permissions for. Can be 'd' for directories,
  #?       'f' for files, or 'l' for symbolic links.
  #?   $3 (string): The permissions to set. Can be in octal (e.g. 755) or symbolic (e.g. rwxr-x).
  #?   $4 (string): A description of the permissions being set.
  #?
  #? Returns:
  #?   0 if the permissions were set successfully, otherwise 1.
  #?
  #? Notes:
  #?   This function uses either the `fd` command or the `find` command to locate all items
  #?   of the specified type inside the specified directory, and then sets the permissions
  #?   using the `chmod` command. If the permissions are set successfully, a success message
  #?   will be printed. If the permissions cannot be set, a failure message will be printed
  #?   and the script will exit with a non-zero status code.
  set_permissions() {
    _path="$1"
    _type="$2"
    _mode="$3"
    _description="$4"

    [ "$DRY_RUN" ] && {
      log "$LOG_INFO" "[DRY RUN] Would set '$_description' permissions for $_path"
      return 0
    }

    if wehave fd; then
      cmd="fd --type $_type . $_path --exec chmod $_mode {}"
    else
      cmd="find $_path -type $_type -exec chmod $_mode {} +"
    fi

    if eval "$cmd"; then
      log "$LOG_INFO" "Set '$_description' permissions for $_path"
    else
      log "$LOG_ERROR" "Failed to set '$_description' permissions for $_path"
      return 1
    fi
  }

  #? Change the owner and group of a directory.
  #?
  #? Parameters:
  #?   $1 (string): The path to the directory whose ownership is to be changed.
  #?   $2 (string): The new owner of the directory.
  #?   $3 (string): The new group of the directory.
  #?
  #? Returns:
  #?   0 if the ownership is successfully changed, otherwise exits with a non-zero status code.
  #?
  #? Notes:
  #?   This function uses the `chown` command to recursively change the ownership and group
  #?   of the specified directory. If successful, a success message will be printed and the
  #?   directory's detailed listing will be shown. On failure, an error message will be printed
  #?   and the script will exit.
  set_ownership() {
    _path="$1"
    _owner="$2"
    _group="$3"

    [ "$DRY_RUN" ] && {
      log "$LOG_INFO" "[DRY RUN] Would set ownership of $_path to $_owner:$_group"
      return 0
    }

    if chown --recursive "$_owner:$_group" "$_path"; then
      log "$LOG_INFO" "Set ownership of $_path to $_owner:$_group"
      [ "$VERBOSE" ] && validate_info --dir "$_path"
    else
      log "$LOG_ERROR" "Failed to set ownership for $_path"
      return 1
    fi
  }

  #? Synchronizes one directory with another
  #?
  #? Parameters:
  #?   $1 (string): The source directory.
  #?   $2 (string): The target directory.
  #?
  #? Returns:
  #?   none
  #?
  #? Notes:
  #?   This function uses the `rsync` command to recursively synchronize the source
  #?   directory to the target directory. If the `rsync` command is not available,
  #?   it will remove the target directory and copy the source directory to the
  #?   target directory instead.
  synchronize_dirs() {
    unset _source _target _backup
    while [ "$#" -gt 0 ]; do
      case "$1" in
      --source) _source=$2 ;;
      --target) _target=$2 ;;
      --backup) _backup=$2 ;;
      *) break ;;
      esac
      shift
    done

    validate_info --diff "$_source" "$_target" || {
      log "$LOG_WARN" "Skipping synchronization"
      return 0
    }

    validate_info --arg "SOURCE_PATH" || return 1
    validate_info --dir "SOURCE_PATH" || return 1
    validate_info --arg "TARGET_PATH" || return 1

    [ "$DRY_RUN" ] && {
      log "$LOG_INFO" "[DRY RUN] Would synchronize $_source to $_target"
      return 0
    }

    #@ Create backup if target exists
    if [ -d "$_target" ]; then
      _backup="$(mktemp -d "${_target}.backup.XXXXXX")"
      _backup_space=$(df -P "$(dirname "$_backup")" | awk 'NR==2 {print $4}')
      _target_size=$(du -s "$_target" | cut -f1)
      if [ "$_target_size" -gt "$_backup_space" ]; then
        log "$LOG_ERROR" "Insufficient space for backup"
        return 1
      fi
      cp -a "$_target/." "$_backup/"
      log "$LOG_INFO" "Created backup at $_backup"
    fi

    if wehave rsync; then
      rsync --delete --recursive "$_source/" "$_target/" || {
        [ -d "$_backup" ] && {
          log "$LOG_WARN" "Sync failed, restoring from backup"
          remove_path "$_target"
          mv "$_backup" "$_target"
        }
        log "$LOG_ERROR" "Failed to synchronize directories"
        return 1
      }
    else
      remove_path "$_target"
      cp --recursive "$_source" "$_target" || {
        [ -d "$_backup" ] && {
          log "$LOG_WARN" "Copy failed, restoring from backup"
          mv "$_backup" "$_target"
        }
        log "$LOG_ERROR" "Failed to copy directory"
        return 1
      }
    fi

    #@ Clean up backup if successful
    [ -d "$_backup" ] && remove_path "$_backup"

    log "$LOG_INFO" "Updated '$_target' to match '$_source'"
  }

  #? Prints the resolved path of a file or directory
  #?
  #? Parameters:
  #?   $1 (string): The file or directory path to resolve.
  #?
  #? Returns:
  #?   The resolved path of the file or directory.
  #?
  #? Notes:
  #?   This function will first try to use the `respath` command to resolve the
  #?   path. If `respath` is not available, it will try to use the `readlink` or
  #?   `realpath` commands. If all of these are unavailable, it will simply print
  #?   the path as is.

  remove_path() {
    if [ "$#" -gt 0 ]; then
      log "$LOG_ERROR" "No paths to remove provided"
      return 1
    elif wehave cnc; then
      cnc "$@"
    elif wehave trashy; then
      trash "$@"
    elif wehave trash-put; then
      trash-put "$@"
    elif wehave rm; then
      rm --recursive --force --verbose "$@"
    fi
  }

  resolve_path() {
    _path="$1"

    if wehave respath; then
      _resolver="respath"
    elif wehave readlink; then
      _resolver="readlink -f"
    elif wehave realpath; then
      _resolver="realpath"
    else
      log "$LOG_WARN" "No path resolver found, using raw path"
      printf '%s' "$_path"
      return 0
    fi

    eval "$_resolver" "'$_path'"
  }

  #? Prompts the user to overwrite an existing file
  #?
  #? Parameters:
  #?   $1 (string): The path to the file or directory to overwrite.
  #?
  #? Returns:
  #?   0 if the user chooses to overwrite, otherwise 1.
  #?
  #? Notes:
  #?   This function will repeatedly prompt the user to overwrite the file or
  #?   directory until they either choose to overwrite or exit. If the user chooses
  #?   to overwrite, the file or directory will be removed and the function will
  #?   return 0. If the user chooses to exit, the function will return 1.
  prompt_to_overwrite() {
    _path="$1"

    [ "$DRY_RUN" ] && {
      log "$LOG_INFO" "[DRY RUN] Would prompt to overwrite $_path"
      return 0
    }

    while true; do
      printf "%s already exists. Overwrite it? (y|N): " "$_path"
      read -r _choice

      case "$_choice" in
      [Yy]*)
        log "$LOG_INFO" "Overwriting $_path"
        rm -rf "$_path"
        return 0
        ;;
      [Nn]*)
        log "$LOG_WARN" "Skipping $_path"
        return 1
        ;;
      *)
        log "$LOG_WARN" "Invalid choice. Please enter 'Y' or 'N'"
        ;;
      esac
    done
  }
}

execute_process() {
  for _user in $(get_users_per_group "wheel"); do
    case "$_user" in
    "root") continue ;;
    esac

    _link_path="/home/$_user/.dots"

    [ -e "$_link_path" ] && [ ! -L "$_link_path" ] && {
      log "$LOG_WARN" "DOTS cannot be symlinked because another file exists at $_link_path"
      prompt_to_overwrite "$_link_path" || continue
    }

    validate_info --link "$_link_path" "$TARGET_PATH" && continue

    [ "$DRY_RUN" ] && {
      log "$LOG_INFO" "[DRY RUN] Would create symlink $_link_path -> $TARGET_PATH"
      continue
    }

    ln --symbolic --force "$TARGET_PATH" "$_link_path"
    log "$LOG_INFO" "Created symlink $_link_path -> $TARGET_PATH"
  done
}

cleanup() {
  # log "$LOG_INFO" "Wrapping up..."

  #@ Store the exit code of the last command
  _exit_code=$?

  # #@ Create a flag to track if we're cleaning up after an error
  # [ "$_exit_code" -ne 0 ] && _is_error=true || _is_error=false

  # #@ Handle interrupted syncs or failed operations
  # if [ "$_is_error" = true ]; then
  #   if [ -d "$TARGET_PATH" ]; then
  #     log "$LOG_WARN" "Checking target directory integrity..."

  #     #@ If source exists and sync was interrupted, verify integrity
  #     [ -d "$SOURCE_PATH" ] &&
  #       diff_dir "$SOURCE_PATH" "$TARGET_PATH" >/dev/null 2>&1 &&
  #       log "$LOG_ERROR" "Target directory may be in inconsistent state"
  #   fi
  # fi

  # #@ Clean up any temporary files
  # for _temp in /tmp/link_dots.*; do
  #   [ -e "$_temp" ] && rm -rf "$_temp"
  # done

  # #@ Report final status
  # if [ "$_is_error" = true ]; then
  #   log "$LOG_ERROR" "Script terminated with errors (exit code: $_exit_code)"
  # else
  #   log "$LOG_INFO" "Cleanup completed successfully"
  # fi

  return "$_exit_code"
}

main() {
  #@ Include signal trapping
  trap cleanup EXIT INT TERM

  #@ Initialize the script
  initialize_utilities
  initialize_script
  initialize_environment "$@"

  #@ Synchronize files from the source directory to the target directory
  synchronize_dirs --source "$SOURCE_PATH" --target "$TARGET_PATH"

  #@ Set ownersip and permissions of the target directory
  set_ownership "$TARGET_PATH" "root" "wheel"
  set_permissions "$TARGET_PATH" "d" "770" "directory"
  set_permissions "$TARGET_PATH" "f" "660" "file"
  set_permissions "$TARGET_PATH" "d" "g+s" "group sticky bit for directories"

  #@ Deploy symlinks for each user in the wheel group
  execute_process
}

main "$@"
# main \
#   --source /home/craole/Documents/dotfiles \
#   --target /dots \
#   --strict
