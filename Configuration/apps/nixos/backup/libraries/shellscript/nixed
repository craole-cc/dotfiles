#!/bin/sh

while [ "$#" -ge 1 ]; do
	case $1 in
		init) action="init" ;;
		new) action="new" ;;
		-e | --e*) env="$2" ;;
		-p | --p*) prj="$2" ;;
		# -f | -x | --rm) reset=true ;;
		# -b | -a | --archive | --backup) archive=true ;;
		*) ;;
	esac
	shift
done

establish_defaults() {
	env="${env:-rustly}"
	prj="${prj:-"$env"}"
	action="${action:-"new"}"
	[ "$action" = "init" ] && prj="$PWD"
}

execute_if_permitted() {
	msg="Should we proceed?"
	cmd=""

	while [ "$#" -ge 1 ]; do
		case "$1" in
			-m | --m*)
				[ "$2" ] && {
					msg="$2"
					shift
				}
				;;
			-c | --c*)
				[ "$2" ] && {
					cmd="$2"
					shift
				}
				;;
			*)
				msg=$1
				;;
		esac
		shift
	done

	printf "%s [y|N]: " "$msg"
	read -r response

	case $response in
		[yY]*)
			[ -n "$cmd" ] && eval "$cmd"
			return 0 # Permission granted
			;;
		[nN]*)
			printf "Action aborted.\n"
			return 1 # Permission denied
			;;
		*)
			printf "Invalid response. Action aborted.\n"
			return 1 # Permission denied
			;;
	esac
}

delete_project() {
	target="$1"

	if [ "$target" = "$PWD" ]; then
		if
			ask_permission \
				--description "All the data from the current directory will be deleted" \
				--message "Are you sure you want to do this?" \
				--default "No"
		then
			ls -la &&
				# rm -rf * &&
				console_log --info "Project deleted" "$target"
		else
			console_log --info "Deletion aborted"
		fi
	elif [ -e "$target" ]; then
		# TODO: Check the file type to put it in the message description, maube we can use file
		if
			ask_permission \
				--description "The folder/file will be deleted" \
				--message "Are you sure you want to proceed?" \
				--default "No"
		then
			ls -la "$target" &&
				# rm -rf "$target" &&
				console_log --info "Project deleted" "$target"
		else
			console_log --info "Deletion aborted"
		fi
	else
		console_log --info "Project not found. Nothing to delete." "$target"
	fi
}

# [ "$reset" ] && {
#   # If the action is new delete any existing file/folder that matches the prj name
#   # if the action is init then remove all data from the PWD

#   # Prompt the user to confirm the delete action
#   # we can use rm -rf to perform the delete action
# }

# [ "$archive" ] && {
#   # If the action is new then archive the prj file/folder if it exists
#   # if the action is init then remove all data from the PWD

#   # Prompt the user to confirm the delete action
#   # we can use mv or cp to perform the archive action
# }

# echo "ACT: $action"
# echo "ENV: $env"
# echo "PRJ: $prj"

# nix flake "${action}" --template "github:Craole/nixed#${env}" "${prj}"
erase_existing_project() {
	if [ "$prj" = "$PWD" ]; then
		execute \
			--description "The folder/file will be deleted" \
			--message "Are you sure you want to proceed?" \
			--default "No" \
			--command "ls -la *"
	elif [ -e "$prj" ]; then
		execute \
			--description "The folder/file will be deleted" \
			--message "Are you sure you want to proceed?" \
			--default "No" \
			--command "ls -la \"$target\""
	else
		console_log --info "Project not found. Nothing to delete." "$target"
	fi
}

execute_tests() {
	ask_permission \
		--message "Are you sure you want to proceed?" \
		--description "The folder/file will be deleted" "$prj" \
		--default "No"
}

main() {
	establish_defaults
	execute_tests
}

main "$@"
