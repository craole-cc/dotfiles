#!/bin/sh
# TODO: Merge with geet
# @ ============================================================= @ #
# @                            INFO                               @ #
# @ ============================================================= @ #

establish_metadata() {
	_cmd_PATH="$(pathof "$0")"
	_cmd_NAME="$(basename "$_cmd_PATH")"
	_cmd_HOME="$(dirname -- "$_cmd_PATH")"
	_cmd_VERSION="1.0"
	_cmd_DESCRIPTION="Simplifies the git update process"
	_cmd_DEPENDENCIES="git"
	_cmd_USAGEGUIDE="$(
		title="$_cmd_NAME ($_cmd_VERSION)"
		border="::-----------------------------------------------------------------::"
		padding=$(((${#border} - ${#title}) / 2))
		heading="$(printf "%*s\n" $((padding + ${#title})) "$title")"
		note="$(
			fold -s -w $((${#border} - 6)) <<'NOTE' | sed 's/^/    /'
The script can be run with or without options. If options are not provided, it will attempt to perform a commit with the current repository state and default configurations.

If the repository is not initialized, the script will initialize it with the specified branch (or default to 'main' if not provided). If both local and global configurations exist, the local configurations take precedence.
NOTE
		)"
		cat <<USAGE_GUIDE
$border
$heading
$border
  Usage:
    $_cmd_NAME [OPTIONS] <MESSAGE>

  Description:
    $_cmd_DESCRIPTION

  Options:
    -n, --name        Set or update Git user name.
    -e, --email       Set or update Git user email.
    -b, --branch      Specify Git branch.
    -m, --message     Specify commit message.
    -s, --scope       Set configuration scope [Default: local]
    -d, --verbose     Enable verbose mode.
    -i, --info        Display Git repository information.
    -v, --version     Display the version information.
    -h, --help        Display this usage guide.

  Arguments:
    MESSAGE  	 Custom commit message.
    BRANCH     Git branch name.
    USER       Git user name.
    EMAIL      Git user email.

  Dependencies:
    $_cmd_DEPENDENCIES

  Examples:
    # Set user name, email, and branch
    $_cmd_NAME -n "John Doe" -e "john.doe@example.com" -b "torch"

    # Display information about the current Git repository
    $_cmd_NAME -i

  Note:
$note
$border
USAGE_GUIDE
	)"
}

# @ ============================================================= @ #
# @		                           	ENV 			                      @ #
# @ ============================================================= @ #

establish_defaults() {
	scope="local"
	verbose=""
	default_branch="main"
	icon_for_update="ðŸ”ƒ"
	icon_for_init="ðŸ†•"
	unset name email branch message repo
	exit_code=0

	# | Dependencies
	_cmd_DEPENDENCIES=$(
		printf "%s" "$_cmd_DEPENDENCIES" | tr -s -c '[:alnum:]' ' '
	)
}

establish_environment() {
	# | Ensure dependencies are present
	validate_dependenies

	[ "$#" -eq 0 ] && info=true
	while [ "$#" -ge 1 ]; do
		case $1 in
		-n | --name)
			if [ -z "$2" ]; then
				console_log --error "No name provided for -n or --name option." --ll
				exit 1
			else
				name="$2"
			fi
			;;
		-e | --email)
			if [ -z "$2" ]; then
				console_log --error "No email provided for -e or --email option." --ll
				exit 1
			else
				email="$2"
			fi
			;;
		-b | --branch) branch="$2" ;;
		-m | --message) message="$2" ;;
		-s | --scope) scope="$2" ;;
		-i | --info | --debug) info=true ;;
		-d | --verbose) verbose=true ;;
		-v | --version)
			console_log "$_cmd_VERSION" --ll
			exit 0
			;;
		-h | --help)
			console_log "$_cmd_USAGEGUIDE" --ll
			exit 0
			;;
		-*)
			console_log --error "Unknown Option:" "$1"
			console_log "Use -h or --help to display the usage guide." --ll
			exit 1
			;;
		*) message="$message $1" ;;
		esac
		shift
	done

	message="${message# }"
}

# @ ============================================================= @ #
# @		                          VALIDATION	                      @ #
# @ ============================================================= @ #

validate_dependenies() {
	# | Set default values for local variables
	missing_deps=""
	missing_deps_count=0

	# | Validate dependecies as executable files
	for dependency in $_cmd_DEPENDENCIES; do
		pathof "$dependency" --is-executable ||
			if [ -n "$missing_deps" ]; then
				missing_deps="$missing_deps, $dependency"
			else
				missing_deps="$dependency"
			fi
	done

	# | Continue the program if dependency paths are validated
	[ "$missing_deps" ] || return

	# | Count the number of missing dependencies
	missing_deps_count="$(
		console_log "$missing_deps" |
			tr ',' '\n' | wc -l
	)"

	# | Update the error message based on the count
	msg="Missing dependency"
	[ "$missing_deps_count" -gt 1 ] && msg="Missing dependencies"

	# | Halt the program and report missing dependencies
	# TODO: Fix console_log to print each dependency on a new line
	console_log --error "$msg" "$missing_deps"
	exit_code=2
	exit "$exit_code"
}

validate_message() {
	# Strip the name and email from the message
	if [ -n "$name" ]; then
		message=$(printf "%s" "$message" | sed "s/$name //g")
	fi

	if [ -n "$email" ]; then
		message=$(printf "%s" "$message" | sed "s/$email //g")
	fi

	case "$message" in "$name" | "$email" | "$branch")
		unset message
		;;
	esac
}

# validate_email() {
# 	if get_email; then
# 		[ "$verbose" ] && console_log --info " Email" "$(get_email)"
# 	else
# 		[ "$verbose" ] && console_log --error "The email address is not set"
# 		return 2
# 	fi
# }

# validate_name() {
# 	if get_name; then
# 		[ "$verbose" ] && console_log --info " Name" "$(get_name)"
# 	else
# 		[ "$verbose" ] && console_log --error "The name is not set"
# 		return 2
# 	fi
# }

# @ ============================================================= @ #
# @		                          UTILITIES 	                      @ #
# @ ============================================================= @ #

get_dir() {
	case "$1" in
	-q | --quiet)
		[ "$(git rev-parse --show-toplevel 2>/dev/null)" ] >/dev/null
		;;
	*)
		git rev-parse --show-toplevel 2>/dev/null
		;;
	esac
}

get_branch() {
	git rev-parse --abbrev-ref HEAD 2>/dev/null | grep -v HEAD ||
		git describe --exact-match HEAD 2>/dev/null ||
		git branch --show-current 2>/dev/null ||
		git branch 2>/dev/null | sed -n 's/^\* //p' 2>/dev/null
}

get_email() {
	eval "git config --${scope} --get user.email" 2>/dev/null
}

get_name() {
	eval "git config --${scope} --get user.name" 2>/dev/null
}

get_message() {
	if git log >/dev/null 2>&1; then
		previous_message="$(git log -1 --pretty=%B)"
		commits_count="$(git log --oneline | wc -l)"

		[ "$commits_count" -eq 1 ] &&
			[ "$previous_message" = "$icon_for_init" ] &&
			previous_message="$icon_for_update"
	else
		previous_message="$icon_for_init"
	fi
}

updates_pending() {
	[ "$(git status --porcelain)" ]
}

set_config() {
	while [ "$#" -ge 1 ]; do
		case "$1" in
		--key) key="$2" ;;
		--val) val="$2" ;;
		esac
		shift
	done

	[ "$key" ] && [ "$val" ] &&
		eval "git config --${scope}" "$key" "$val"
}

set_dir() {
	if git init --initial-branch="$branch" >/dev/null 2>&1; then
		[ "$verbose" ] && console_log --info "GIT_DIR" "$(get_dir)"
	else
		console_log --error "Failed to rename branch."
		return 2
	fi
}

set_branch() {
	if git branch --move --force "$branch" >/dev/null 2>&1; then
		[ "$verbose" ] && console_log --info "Branch" "$(get_branch)"
	else
		console_log --error "Failed to initialize the repository."
		return 2
	fi
}

set_message() {
	validate_message
	get_message
	message="${message:-$previous_message}"
	[ "$verbose" ] && console_log --info "Message" "$previous_message"
}

set_email() {
	[ "$email" ] && set_config --key "user.email" --val "$email"
}

set_name() {
	[ "$name" ] && set_config --key "user.name" --val "$name"
}

# @ ============================================================= @ #
# @		                           EXECUTE  	                      @ #
# @ ============================================================= @ #

execute_info() {
	if get_dir --quiet; then
		console_log --info "   NAME" "$(get_name)"
		console_log --info "  EMAIL" "$(get_email)"
		console_log --info " BRANCH" "$(get_branch)"
		set_message
		console_log --info "GIT_DIR" "$(get_dir)"
		console_log --info "MESSAGE" "$message" --ll
	else
		console_log "This directory has not been initialized for git"
	fi
}

execute_process() {
	if get_dir --quiet; then
		[ "$branch" ] && [ "$(get_branch)" = "$branch" ] &&
			set_branch
	else
		branch="${branch:-"$default_branch"}"
		set_dir
	fi

	set_email
	set_name
	set_message

	# | Validate && Update
	if
		get_name >/dev/null 2>&1 &&
			get_email >/dev/null 2>&1 &&
			get_branch >/dev/null 2>&1
	then
		updates_pending && {
			git add --all
			git commit --quiet --message="$message"
			[ "$verbose" ] && console_log "$message"
		}
	else
		exit_code="$?"
	fi

	execute_info

}

# @ ============================================================= @ #
# @		                         ENTRY-POINT                        @ #
# @ ============================================================= @ #
main() {
	# | Initialize the script
	establish_defaults
	establish_metadata

	# | Initialize variables
	establish_environment "$@"

	# | Run the test process
	[ "$debug" ] && execute_tests

	# | Run the main process
	if [ "$info" ]; then
		execute_info
	else
		execute_process
	fi

	exit "$exit_code"
}

main "$@"
