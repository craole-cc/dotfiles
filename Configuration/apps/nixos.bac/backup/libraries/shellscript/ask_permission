#!/bin/sh

# @ ============================================================= @ #
# @		                           	INFO			              @ #
# @ ============================================================= @ #
establish_metadata() {
	_cmd_PATH="$(pathof "$0")"
	_cmd_NAME="$(basename "$_cmd_PATH")"
	_cmd_HOME="$(dirname -- "$_cmd_PATH")"
	_cmd_VERSION="1.0"
	_cmd_DESCRIPTION="Prompts the user for permission"
	_cmd_DEPENDENCIES="coreutils"
	_cmd_USAGEGUIDE="$(
		cat << USAGE_GUIDE
::------------------------------------------------------------::
                          $_cmd_NAME ($_cmd_VERSION)
::------------------------------------------------------------::
  Usage:
    $_cmd_NAME [OPTIONS] <MESSAGE|COMMAND>

  Description:
    $_cmd_DESCRIPTION

  Options:
    -m, --message    Specify the prompt message.
    -o, --default    Specify the default option.
    -q, --quiet      Suppress internal messages.
    -h, --help       Display this help message.
    -v, --version    Display version information.

  Arguments:
    <MESSAGE>  A message to promt the user for permission.
    <DEFAULT>  The return option if no selection is made.

  Examples:
    # Execute with default
    $_cmd_NAME "ls -la --color=always /path/to/list"

    # Defaults with custom message
    $_cmd_NAME -m "Proceed with deletion?" "rm -rf /path/to/delete"

    # Defaults with lomg options
    $_cmd_NAME \\
        --message "Proceed with deletion?" \\
        --command "rm -rf /path/to/delete"

  Dependencies:
    $_cmd_DEPENDENCIES
::------------------------------------------------------------::
USAGE_GUIDE
	)"
}

establish_environment() {
	# | Set default values for local variables
	msg="Should we proceed?"
	opt="No"

	while [ "$#" -ge 1 ]; do
		case "$1" in
			-d | --desc*) desc="$2" ;;
			-m | --m*) shift 2 ;;
			-*)
				break
				;;
			*) console_log --info "${desc}" "${1}" ;;
		esac
		shift
	done

	console_log --info \
		"Including submodule(s)" \
		"$@"
	# echo "ALL: $*"
	# console_log --info "$desc"
	#   while [ "$#" -ge 1 ]; do
	#     case "$1" in
	#     -d | --desc*)
	#       desc="$@"
	#       ;;
	#     -m | --m*)
	#       msg="$*"
	#       ;;
	#     -o | --option*)
	#       [ "$2" ] && {
	#         opt="$2"
	#         shift
	#       }
	#       ;;
	#     -h | --help)
	#       console_log "$_cmd_USAGEGUIDE"
	#       exit 0
	#       ;;
	#     -v | --version)
	#       console_log "$_cmd_VERSION"
	#       exit 0
	#       ;;
	#     -q | --quiet)
	#       quiet=true
	#       ;;
	#     *)
	#       msg="$1"
	#       ;;
	#     esac
	#     shift
	#   done
}

print_message() {
	case "$opt" in
		[yY]*) msg="${msg} [Y|n ]" ;;
		[nN]*) msg="${msg} [y|N]" ;;
	esac

	[ "$desc" ] && console_log --info "${desc}"
	# console_log "${msg} " -ll
}

get_response() {
	read -r res

	# Convert the first letter of response and default option to lowercase using awk
	res=$(console_log "$res" | awk '{print tolower(substr($0, 1, 1))}')
	opt=$(console_log "$opt" | awk '{print tolower(substr($0, 1, 1))}')

	case "$res" in
		y | n)
			if [ "$res" = "$opt" ]; then
				return 1
			else
				return 0
			fi
			;;
		*)
			if [ "$res" ]; then
				console_log -ll --error "Invalid option selected."
			else
				[ "$quiet" ] || console_log --ll --error "No option selected."
			fi

			[ "$quiet" ] || console_log -s "Proceeding with default."
			return 1
			;;
	esac
}

execute_process() {
	print_message
	# get_response
}

main() {
	# | Initialization
	establish_metadata
	establish_environment "$@"

	# | Termination
	execute_process
	return "$?"
}

main "$@"
