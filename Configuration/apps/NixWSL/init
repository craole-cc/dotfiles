#!/bin/bash

environment() {

  init_script() {
    #@ Initialize script
    if type realpath >/dev/null 2>&1; then
      SCR_PATH=$(realpath "$0")
    else
      SCR_PATH="${PWD}/${0}"
    fi

    SCR_NAME="$(basename "$SCR_PATH")"
    SCR_HOME="$(dirname -- "$SCR_PATH")"
    PATH="${SCR_HOME}/bin:$PATH"

    #@ Parse CLI arguments
    while [ "$#" -ge 1 ]; do
      case "$1" in
      -x | --reset)
        reset=true
        ;;
      -t | --test | --dry-run)
        simulate=true
        export verbose=true
        ;;
      -d | --verbose)
        export verbose=true
        ;;
      -h | --help)
        printf "Usage\n"
        exit
        ;;
      esac
      shift
    done

    #@ Set distribution variables
    distro_name="NixWSL"
    distro_url="https://github.com/nix-community/NixOS-WSL/releases/download/22.05-5c211b47/nixos-wsl-x86_64-linux.tar.gz"
    distro_url="https://github.com/nix-community/NixOS-WSL/releases/download/22.05-5c211b47/nixos-wsl-installer.tar.gz"
    distro_dir="${SCR_HOME}/downloads"
    distro_tar="${distro_dir}/$(basename "${distro_url%.gz}")"

    #@ Set OS variables
    NixWSL_conf="$SCR_HOME"
    NixWSL_host="$distro_name"
    NixWSL_user="craole"
    NixWSL_vr3n="22.05"
    NixWSL_bkup="$NixWSL_conf/archive"
  }

  init_distro() {

    distro_registered() {
      wsl --list | tr --delete '\0' | grep --quiet "$distro_name"
    }

    drop_distro() {
      if distro_registered; then
        41one "Unregistering the distribution: $distro_name"
        wsl --unregister "$distro_name"
      fi

      # if [ -f "$distro_tar" ]; then
      #   41one "Deleting the distribution\n"
      #   rm "$distro_tar"
      # fi
    }

    get_distro() {
      if [ ! -f "$distro_tar" ]; then
        41one "Downloading the distribution"

        #@ Create the distribution directory
        mkdir -p "$distro_dir"

        #@ Download the distribution
        curl --output "$distro_tar" --location "$distro_url"
      fi
    }

    register_distro() {

      #@ Drop the WSL instance, if requested
      [ "$reset" ] && drop_distro

      if ! distro_registered; then
        41one "Registering the distribution as $distro_name"
        get_distro
        wsl --import "$distro_name" "$distro_dir" "$distro_tar" --version 2
        wsl --set-default "$distro_name"
        wsl --shutdown
      fi
    }
  }

  manage_instance() {
    launch_wsl_instance() {
      #@ Ensure the WSL instance is registered
      if distro_registered; then
        return
      else
        register_distro
      fi

      #@ Close any active WSL instance
      wsl --shutdown

      #@ Initialize the WSL instance
      wsl --distribution "$distro_name"
    }

    update_nixos() {

      #@ Initialize the system environment variables
      __jot --file "/etc/bashrc.local" \
        --contents "
          NixWSL_conf=$SCR_HOME
          NixWSL_host=$distro_name
          NixWSL_user=\"craole\"
          NixWSL_vr3n=\"22.11\"
          NixWSL_sys_conf=\"/etc/nixos/configuration.nix\"
        " --overwrite
      . /etc/bashrc.local

      #@ Backup the initial system configuration
      config_backup=/etc/nixos/configuration.bac.nix
      [ -f "$config_backup" ] ||
        sudo cp /etc/nixos/configuration.nix \
          /etc/nixos/configuration.bac.nix

      # #@ Update the system configuration
      # sudo cp /tmp/configuration.tmp \
      #   /etc/nixos/configuration.nix

      # cat "/etc/nixos/configuration.nix"

      # sudo cp \
      #   "${SCR_HOME}/global/modules/configuration.nix" \
      #   /etc/nixos/configuration.nix

      #@ Update Channels
      # sudo nix-channel --list | grep -q '22.05' && sudo nix-channel --remove nixos
      # sudo nix-channel --add https://channels.nixos.org/nixos-unstable nixos-unstable
      # sudo nix-channel --add https://channels.nixos.org/nixos-"${wsl_vr3n}" nixos
      # sudo nix-channel --add https://github.com/nix-community/home-manager/archive/release-"${wsl_vr3n}".tar.gz home-manager
      # # sudo nix-channel --list
      # sudo nix-channel --update

      #@ Fix: fchmod() of /tmp/.X11-unix failed: Read-only file system
      sudo mount -o remount,rw /tmp/.X11-unix

      #@ Rebuild the system configuration
      sudo nixos-rebuild switch

      #@ Clear
      # clear
      # bash
      # exit
    }
  }

  #@ Set up the script, distribution and OS environments
  init_script "$@"
  init_distro
  manage_instance
}

utilities() {

  __backitup() {
    func_name="${FUNCNAME[0]}"
    func_usage="$(__txtBarber "
      Usage: $func_name [OPTIONS] [CONTENTS]

      Description:
        A backup utility to create backups of files or directories.
        The utility uses the 'cp' command to handle existing files
        and create backup files with different types.

      Options:
        -h, --help         Display this help message.
        --source           Specify the source path of the file or directory.
        --destination      Set the path of the backup. [Default: <SOURCE>.bak]
        --directory
        --type [TYPE]      Set the backup type to handle existing files.

      Backup Types: [TYPE]
        none, off:  Overwrite existing backup files.
        simple:     Backup with a tilde (file~).
        numbered:   Backup with numbering (file.~1~, file.~2~, etc.).
        existing:   Use 'numbered' backups, if present, 'simple' if not.
        symlink:    Make symbolic links instead of copying
        hardlink:   Make hard links instead of copying
        update:     Copy only when the source is newer than the backup. [Default]

      Examples:
        bakitup /etc/bashrc
        bakitup --source /etc/bashrc --destination \$HOME/test --type symlink
        bakitup --source /path/to/file.txt --type numbered
        bakitup --source /path/to/directory --destination /backup --type t
      ")"
    backup_cmd="cp --no-clobber"
    backup_opt="--backup=update"

    while [ "$#" -ge 1 ]; do
      case "$1" in
      --type)
        case "$2" in
        none | off | simple | numbered | existing)
          backup_opt="--backup=$2"
          ;;
        update)
          backup_opt="--update"
          ;;
        link)
          backup_opt="--link"
          ;;
        symlink)
          backup_opt="--symbolic-link"
          ;;
        *)
          if [ "$2" ]; then
            pout \
              --lbl "Invalid Backup Option" \
              --var "$2" \
              --msg "Reverting to normal backup" \
              --usg "$func_usage"
          else
            pout \
              --lbl "Missing Backup Option" \
              --msg "Reverting to normal backup" \
              --usg "$func_usage"
          fi
          return
          ;;
        esac
        shift
        ;;
      --src | --source)
        backup_src="$2"
        ;;
      --bak | --destination)
        backup_dest="$2"
        ;;
        # --dir*)
        #   backup_dir="$2"
        #   if [ ! -d "$backup_dir" ]; then
        #     mkdir --parents "$backup_dir"
        #   fi

        #   path="$backup_dir"
        #   sudo_needed=0

        #   # Split the path into components using '/' delimiter
        #   IFS="/" read -ra path_components <<<"$path"

        #   # Loop through the path components and check existence and ownership
        #   current_path=""
        #   for component in "${path_components[@]}"; do
        #     current_path="${current_path}/${component}"
        #     stat --format=%U "$current_path"

        # # Check if the directory exists
        # if [ ! -d "$current_path" ]; then
        #   sudo_needed=1
        #   break
        # fi
        # # Check if the current user owns the directory
        # if [ "$(stat -c %U "$current_path")" != "$(whoami)" ]; then
        #   sudo_needed=1
        #   break
        # fi
        # done

        # Create the directory with or without sudo based on the flag
        # if [ "$sudo_needed" -eq 1 ]; then
        #   # sudo mkdir --parents "$path"
        #   echo "sudo mkdir --parents $path"
        # else
        #   # mkdir --parents "$path"
        #   echo "mkdir --parents \"$path\""
        # fi
        # ;;
      --none | --off | --simple | --numbered | --existing)
        backup_opt="--backup=${1#--*}"
        ;;
      --update)
        backup_opt="--update"
        ;;
      --link)
        backup_opt="--link"
        ;;
      --symlink)
        backup_opt="--symbolic-link"
        ;;
      -*)
        pout \
          --lbl "Invalid Option" \
          --var "$1" \
          --usage "$func_usage" \
          --fatal
        ;;
      *)
        if [ "$1" ]; then
          if [ "$backup_src" ]; then
            [ "$backup_dir" ] || backup_dest="$1"
          else
            backup_src="$1"
          fi
        else
          echo "invalid"
        fi
        ;;
      esac
      shift
    done

    # for opt in $@; do

    #   case "${1#--*}" in
    #   none | off | simple | numbered | exiting)
    #     backup_opt="--backup=$2"
    #     shift
    #     ;;
    #   update)
    #     backup_opt="--update"
    #     shift
    #     ;;
    #   link)
    #     backup_opt="--link"
    #     shift
    #     ;;
    #   symlink)
    #     backup_opt="--symbolic-link"
    #     shift
    #     ;;
    #   esac
    # done

    # case "$@" in
    # --*)
    #   while [ "$#" -ge 1 ]; do
    #     case "$1" in
    #     --type)
    #       case "$2" in
    #       none | off | numbered | t | exiting | nil | simple | never)
    #         backup_opt="--backup=$2"
    #         ;;
    #       update)
    #         backup_opt="--update"
    #         ;;
    #       link)
    #         backup_opt="--link"
    #         ;;
    #       symlink)
    #         backup_opt="--symbolic-link"
    #         ;;
    #       *)
    #         if [ "$2" ]; then
    #           pout \
    #             --lbl "Invalid Backup Option" \
    #             --var "$2" \
    #             --msg "Reverting to normal backup" \
    #             --usg "$func_usage"
    #         else
    #           pout \
    #             --lbl "Missing Backup Option" \
    #             --msg "Reverting to normal backup" \
    #             --usg "$func_usage"
    #         fi
    #         return
    #         ;;
    #       esac
    #       shift
    #       ;;
    #     --source)
    #       backup_src="$2"
    #       ;;
    #     --destination)
    #       backup_dest="$2"
    #       ;;
    #     *)
    #       case "${1#--*}" in
    #       none | off | simple | numbered | exiting)
    #         backup_opt="--backup=--${1#--*}"
    #         shift
    #         ;;
    #       update)
    #         backup_opt="--update"
    #         shift
    #         ;;
    #       link)
    #         backup_opt="--link"
    #         shift
    #         ;;
    #       symlink)
    #         backup_opt="--symbolic-link"
    #         shift
    #         ;;
    #       esac
    #       # -*)
    #       #   pout \
    #       #     --lbl "Invalid Option" \
    #       #     --var "$1" \
    #       #     --usage "$func_usage" \
    #       #     --fatal
    #       ;;
    #     esac
    #     shift
    #   done
    #   ;;
    # *)
    #   [ "$1" ] && backup_src="$1"
    #   [ "$2" ] && backup_dest="$2"
    #   ;;
    # esac

    #@ Validate the path of the source file/folder
    if [ ! "$backup_src" ]; then
      pout \
        --lbl "Missing source" \
        --usage "$func_usage" \
        --fatal
    elif [ ! -e "$backup_src" ]; then
      pout \
        --lbl "Invalid source" \
        --var "$backup_src" \
        --usage "$func_usage" \
        --fatal
    fi

    #@ Define the backup destination path
    case "$backup_dest" in
    -*)
      pout \
        --lbl "Missing Backup Destination" \
        --msg "Reverting to default backup destination" \
        --usg "$func_usage"
      ;;
    *)
      if [ "$backup_dir" ]; then
        if [ "$backup_dest" ]; then
          backup_dest="${backup_dir}/${backup_dest}"
        else
          backup_cmd="$backup_cmd --parents"
          backup_dest="$backup_dir"
          # backup_dest="$backup_dir/$(basename "$backup_src")"
        fi
      else
        [ "$backup_dest" ] || backup_dest="${backup_src}.bak"
      fi

      #@ Allow elevation, if necessary
      [ -w "$(dirname -- "$backup_dest")" ] || {
        backup_cmd="sudo $backup_cmd"
      }
      ;;
    esac

    #@ Update the backup command
    backup_cmd="$backup_cmd $backup_opt $backup_src $backup_dest"

    #@ Generate the backup file
    echo "$backup_cmd"
    # eval "$backup_cmd"

    #@ Cleanup
    unset func_name func_usage
    unset backup_cmd backup_src backup_dest
  }

  __jot() {

    __jot_init() {
      func_usage="$(
        __txtBarber "
        Usage: ${FUNCNAME[1]} [CONTENTS]

        Options:
          --backup[=type]  Set backup type for the file (Valid options: none, off, numbered, t, exiting, nil, simple, never).
          -f, --file       Specify the target file path.
          -c, --contents   Set the content of the target file.
          -h, --help       Display this help message.dfgdgd
        "
      )"
      backup_types="none | off | numbered | t | exiting | nil | simple | never"

      while [ "$#" -ge 1 ]; do
        case "$1" in
        --backup=*)
          backup_type="${1#*=}"
          case "$backup_type" in
          none | off | numbered | t | exiting | nil | simple | never) ;;
          *)
            pout \
              --lbl "Invalid Backup Type" \
              --var "$backup_type" \
              --usage "$func_usage" \
              --fatal
            ;;
          esac
          ;;
        --backup)
          while [ "$#" -ge 2 ]; do
            case "$2" in
            none | off | numbered | t | exiting | nil | simple | never)
              backup_type="$2"
              ;;
            *)
              if [ ! "$2" ] || [ "$2" = "-*" ]; then
                pout "Backup file name is missing after '--backup' option."
              else
                backup_file_path="$2"
              fi
              break
              ;;
            esac
            shift
          done
          ;;
        -f | --file)
          [ "$2" ] && {
            target_file_path="$2"
            shift
          }
          ;;
        -c | --contents)
          [ "$2" ] && {
            txt_to_jot="$(__txtBarber "$2")"
            shift
          }
          ;;
        -*)
          pout \
            --lbl "Invalid Option" \
            --var "$1" \
            --usage "$func_usage" \
            --fatal
          ;;
        *)
          txt_to_jot="$(__txtBarber "$1")"
          ;;
        esac
        shift
      done

      # echo "$target_file_path"
      # echo "$backup_type $backup_file_path"
      # echo "$txt_to_jot"
    } && __jot_init "$@"

    backup_file() {
      #@ Set backup command
      if [ "$backup_type" ]; then
        backup_cmd="cp --backup=$backup_type"
      else
        backup_cmd="cp"
      fi

      #@ All elevation if necessary
      [ -w "$(dirname -- "$backup_file_path")" ] || {
        backup_cmd="sudo $backup_cmd"
      }

      #@ Update the backup command
      backup_cmd="$backup_cmd $target_file_path $backup_file_path"

      #@ Generate the backup file
      echo "$backup_cmd"
      # eval "$backup_cmd"

      #@ Cleanup
      unset backup_cmd
    }

    prep_writer() {
      if [ -w "$(dirname -- "$target_file_path")" ]; then
        writer="tee"
      else
        writer="sudo tee"
      fi

      [ "$backup_file_path" ] || arg="--append"

      printf "%s %s %s" "$writer" "$arg" "$target_file_path"
    }

    #@ Backup the target file
    backup_file

    #@ Prepare the content

    # __txtBarber
    # prep_writer

    #@ Write the target file
    # prep_writer

  }
}

process() {

  process_core() {
    if weHave wsl; then
      launch_wsl_instance
    elif weHave nixos-version; then
      echo update_nixos
    else
      printf "Missing dependency: wsl\n"
      return 1
    fi
  }

  process_test() {

    # set -- /etc/bashrc "$HOME/test" --off --pop
    set -- "$PWD/test/etc/pop/test"
    # set -- "$PWD/test/etc/pop/test"
    # stat --format=%U
    # bakitup /etc/bashrc "$PWD/test"
    # bakitup --source /etc/bashrc --destination "$HOME/test" --type link
    # bakitup /etc/bashrc --directory "$PWD/archive"
    # ancestor "$@"
    # echo "pop $(elevate "$@")"
    # mkd --cd "$PWD/test/etc/pop/test" "echo \"we are in \$PWD\""

    pout \
      --var "$path" \
      --msg "Unable to enter folder" \
      --term 127

    # echo test
    # is_writable "$@"

  }
}

cleanup() {
  unset SCR_PATH SCR_NAME SCR_HOME
  unset verbose reset simulate
}

main() {

  #@ Initialize the script environment and utiilities
  environment "$@"

  #@ Enable and run the relevant process
  process &&
    if [ "$simulate" ]; then
      process_test
    else
      process_core
    fi

  #@ Exit gracefully
  cleanup
} && main "$@"
