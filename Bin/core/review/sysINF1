#!/bin/sh

# ===================================================================
#@                            DECLARATIONS                         @#
# ===================================================================
_cmd_PATH="$(PathOf "$0")"
_cmd_NAME="$(basename "$_cmd_PATH")"
_cmd_DIR="$(dirname -- "$_cmd_NAME")"
_cmd_VERSION="1.0"
_cmd_DESCRIPTION="Verifies that a command is installed/available"
_cmd_DEPENDENCIES="tr, sed"
_cmd_USAGEGUIDE="$(
  cat <<USAGE_GUIDE
    ::----------------------------------------------------::
                        USAGE: $_cmd_NAME
        $_cmd_DESCRIPTION
    ::----------------------------------------------------::
                command <[options]> <[cmd]>
                >>> $_cmd_NAME --verbose cmd <<<
    ::----------------------------------------------------::
        -h --help      |>   Usage guide
        -v --version   |>   Version
        -c --check     |>   Verify installation [default]
        -d --verbose   |>   Detailed app info
    ::----------------------------------------------------::
USAGE_GUIDE
)"

__help__() {
  printf "%s\n\n" "$_cmd_USAGEGUIDE"
}

# |> OS Information <|
# *** Type *** #
{
  if weHave uname; then
    _INFO=$(uname --all)
  elif weHave python; then
    _INFO=$(python -mplatform)
  fi
  case "$(mango --lower "$_INFO")" in
  *linux*) sys_TYPE=Linux ;;
  *bsd*) sys_TYPE=FreeBSD ;;
  *nt*) sys_TYPE=Windows ;;
  *windows*) sys_TYPE=WSL ;;
  *darwin*) sys_TYPE=Mac ;;
  *sunos*) sys_TYPE=Solaris ;;
  *aix*) ;;
  *) ;;
  esac
}

# *** Name & Version *** #
# sys_NAME() {
{
  if [ -f /etc/os-release ]; then
    # freedesktop.org and systemd
    . /etc/os-release
    # shellcheck disable=SC2153
    sys_NAME=$NAME
    sys_VERSION=$VERSION_ID
  elif type lsb_release >/dev/null 2>&1; then
    # linuxbase.org
    sys_NAME=$(lsb_release -si)
    sys_VERSION=$(lsb_release -sr)
  elif [ -f /etc/lsb-release ]; then
    # For some versions of Debian/Ubuntu without lsb_release command
    . /etc/lsb-release
    sys_NAME=$DISTRIB_ID
    sys_VERSION=$DISTRIB_RELEASE
  elif [ -f /etc/debian_version ]; then
    # Older Debian/Ubuntu/etc.
    sys_NAME=Debian
    sys_VERSION=$(cat /etc/debian_version)
  fi

  # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
  [ "$sys_NAME" ] || sys_NAME=$(uname -s)
  [ "$sys_VERSION" ] || sys_VERSION=$(uname -r)
}
# *** Architecture *** #
{
  case $(uname -m) in
  x86_64)
    sys_ARCH=x64 # or AMD64 or Intel64 or whatever
    ;;
  i*86)
    sys_ARCH=x86 # or IA32 or Intel32 or whatever
    ;;
  *)
    # leave sys_ARCH as-is
    ;;
  esac
}

# |> Hostname <|
if weHave hostname >/dev/null 2>&1; then
  sys_HOST="$(hostname)"
elif weHave hostnamectl >/dev/null 2>&1; then
  sys_HOST="$(hostnamectl hostname)"
else
  sys_HOST=""
fi

# |> Shell Information <|
if [ -n "$BASH" ]; then
  sys_SHELL=${BASH##/*/}
elif [ -n "$ZSH_NAME" ]; then
  sys_SHELL=$ZSH_NAME
else
  sys_SHELL=${0##/*/}
fi

case "$sys_TYPE" in
Windows)
  case $SHELL in
  bash) sys_SHELL="gitSH" ;;
  nu) sys_SHELL="nuSHell" ;;
  *) ;;
  esac
  ;;
Linux | *WSL)
  case $SHELL in
  *bash*) sys_SHELL="baSH" ;;
  *zsh*) sys_SHELL="zSH" ;;
  *dash*) sys_SHELL="daSH" ;;
  *fish*) sys_SHELL="fiSH" ;;
  *nu*) sys_SHELL="nuSHell" ;;
  *) sys_SHELL="Undefined Linux Shell" ;;
  esac
  ;;
*) ;;
esac

# |> User <|
[ -n "${USER+x}" ] && sys_USER="$USER"
[ -n "${USERNAME+x}" ] && sys_USER="$USERNAME"
[ -n "${user+x}" ] && sys_USER="$user"

# |> Window Manager / Desktop Environment <|
if weHave wmctrl; then
  sys_WM_DE=$(wmctrl -m | awk '$1 ~ /^Name:/' | sed 's/^Name: //g')
fi

# |> Window Manager / Desktop Environment <|
__match__() {
  weHave grep && grep --color=never --only-matching "$*"'.*'
  weHave rg && rg --color=never '.*'"$*" -r "$*"
}

if weHave upower; then
  sys_BAT=$(upower --enumerate | __match__ "BAT")
elif [ -d "/sys/class/power_supply" ]; then
  sys_BAT=$(find "/sys/class/power_supply" | __match__ "BAT")
fi

# if weHave upower; then
#   #   weHave rg &&
#   #     BAT_match=$(
#   #       upower --show-info "$(upower --enumerate | rg BAT)" | rg --color=never '.*BAT' -r 'BAT'
#   #       rg --color=never '.*BAT' -r 'BAT'
#   #       # upower --show-info "$(upower --enumerate | rg BAT)" | rg --color=never '.*BAT' -r 'BAT'

#   #     )
#   #   weHave grep &&
#   #     BAT_match=$(
#   #       upower --show-info "$(upower --enumerate | grep BAT)" | grep --color=never --only-matching 'BAT.*'
#   #     )
#   #   # upower -i "$(upower -e | grep BAT)" | grep --color=never -E "state|to\ full|to\ empty|percentage"

# fi
# echo "$sys_BAT"
upower --show-info | rg "$sys_BAT"
upower --enumerate | rg "$sys_BAT" | grep --color=never -E "state|to\ full|to\ empty|percentage"
upower -i "$(upower -e | grep BAT)" | grep --color=never -E "state|to\ full|to\ empty|percentage"
# echo "$bat_state | $bat_per | $bat_time"
# |> Label <|
if [ "$sys_HOST" ]; then
  sys_LABEL="$sys_TYPE"_"$sys_HOST"
else
  sys_LABEL="${sys_TYPE}_${sys_ARCH}_${sys_USER}"
fi

sys_LABEL_long="$(
  cat <<INF
    >>== type ==>>  $sys_TYPE
    >>== arch ==>>  $sys_ARCH
    >>== name ==>>  $sys_NAME
    >>== host ==>>  $sys_HOST
    >>== user ==>>  $sys_USER
    >>== wmde ==>>  $sys_WM_DE
    >>== .ver ==>>  $sys_VERSION
    >>== .cli ==>>  $sys_SHELL
INF
)"

__fetch__() {
  # Colors and palette method stolen from dylanaraps pftech
  # https://github.com/dylanaraps/pfetch
  c0='[0m'
  c1='[31m'
  c2='[32m'
  c3='[33m'
  c4='[34m'
  c5='[35m'
  c6='[36m'
  c7='[37m'
  c8='[38m'
  palette="[7m$c1 $c1 $c2 $c2 $c3 $c3 $c4 $c4 $c5 $c5 $c6 $c6 $c7 $c8 [m"

  # Output
  printf '%s\n' "

    ${c5}     .-.         ${sys_USER}${c0}@${c5}${sys_HOST}
    ${c5}  __/   (        ${c6}os${c0}      $sys_NAME
    ${c5}, '-.____\\       ${ARTR3}${c6}kernel${c0}  $sys_VERSION
    ${c5} u=='/  \\        ${c6}shell${c0}   $sys_SHELL
    ${c5}    /_/  \\       ${c6}wm${c0}      ${sys_WM_DE}
    ${c5}  .-''   |
    ${c5} (  ${c6}____${c5}/${c6}_____   ${palette}

"
}
#| Accept options
case "$1" in
-t | --type) eko "$(mango --de-space "$sys_TYPE")" ;;
-a | --arch) eko "$(mango --de-space "$sys_ARCH")" ;;
-n | --name) eko "$(mango --de-space "$sys_NAME")" ;;
-u | --user) eko "$(mango --de-space "$sys_USER")" ;;
-v | --version) eko "$(mango --de-space "$sys_VERSION")" ;;
-s | --shell) eko "$(mango --de-space "$sys_SHELL")" ;;
-b | --battery) eko "$(mango --de-space "$sys_BAT")" ;;
-l | --label) eko "$(mango --de-space "$sys_LABEL")" ;;
-ll | --label-long) eko "$sys_LABEL_long" ;;
-f | --fetch) __fetch__ ;;
*) ;;
esac
