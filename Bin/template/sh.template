#!/bin/sh
scr_NAME="weHave"
scr_VERSION="1.0"
scr_DESCRIPTION="Verifies that a command is installed/available."
scr_DEPENDENCIES="unalias, command, printf, getoptions"
scr_USAGE="$(
  cat <<USAGE_GUIDE
    ::----------------------------------------------------::
                        USAGE: $scr_NAME
        $scr_DESCRIPTION
    ::----------------------------------------------------::
                command <[options]> <[cmd]>
                >>> $scr_NAME --verbosity cmd <<<
    ::----------------------------------------------------::
        -h --help      |>   Usage guide
        -v --version   |>   Version
        -r --report    |>   Detailed app info
        -c --check     |>   Verify installation [default]
    ::----------------------------------------------------::
USAGE_GUIDE
)"

point_of_entry() { #@ Launch the script
  #@ Initialize application
  parse_arguments "$@"

  #@ Run main process
  process_core

  #@ Remove any leftover variables
  punctuate_exit
}

parse_arguments() { #@ Declare user options (One flag per command)
  [ "$#" -eq 0 ] && punctuate_exit --error-exit "Missing arguments"

  while [ "$#" -ge 1 ]; do
    case $1 in
    -h | --help) punctuate_exit "$scr_USAGE" ;;
    -v | --version) punctuate_exit "$scr_VERSION" ;;
    -q | --quiet | -c | --check) unset verbosity ;;
    -d | --verbose) verbosity=true ;;
    -V | --ver3n) report="version" ;;
    -l | --location | -p | --path) report="location" ;;
    -r | --report) report="$2" ;;
    *) commands="$(are --save "$commands" "$1")" ;;
    esac
    shift
  done
}

probe_for_binary() { #@ Check if the command is installed
  type "$1" >/dev/null 2>&1
}

parse_type_info() { #@ Return the type of command
  #TODO# Figure out how to check type.
  true
}

parse_version_info() { #@ Return the version of the command
  case "$("$1" --version)" in
  *nvim*)
    "$1" --version |
      awk '/NVIM/ {
            gsub(/v/, "");
            print $2
        }'
    ;;
  *vim*)
    "$1" --version |
      awk '/VIM/ {
            gsub(/v/, "");
            print $2
        }'
    ;;
  *exa*) #| exa
    "$1" --version |
      awk '/v/ {
            gsub(/v/, "");
            print $1
        }'
    ;;
  *rust*) #| rustc
    "$1" --version |
      cut -d' ' -f2-
    ;;
  *version*) #| Version
    "$1" --version |
      awk '{for(i=1;i<=NF;i++){
                if($i ~ /^version/ )
                print $(i+1)
            }}'
    ;;
  *"("*) #| Bracket
    "$1" --version |
      awk '{for(i=1;i<=NF;i++){
                if($i ~ /^\(/ )
                print $(i-1)
            }}'
    ;;
  *) #| Plain
    "$1" --version | awk '{print $NF}'
    ;;
  esac
}

parse_location_info() { #@ Return the location of command
  type "$1" | awk '{print $NF}'
}

process_core() {
  #@ Process all the commands given via a loop
  for command in $(are --expand "$commands"); do

    #@ Reset output message
    unset icon msg

    if probe_for_binary "$command"; then
      if [ "$verbosity" ]; then
        msg="$command [$(parse_version "$command")] found at $(parse_location "$command")"
        icon="âœ…"
      elif [ "$report" = "version" ]; then
        msg="$(parse_version "$command")"
      elif [ "$report" = "location" ]; then
        msg="$(parse_location "$command")"
      fi
    else
      if [ "$verbosity" ]; then
        msg="Unable to locate '$command' in PATH"
        icon="ðŸŸ¥"
      fi
      punctuate_exit --error
    fi

    #@ Display information about the command
    [ "$msg" ] &&
      if [ "$icon" ]; then
        present_info "$icon $msg"
      else
        present_info "$msg"
      fi
  done
}

present_info() {
  #@ Enable printing only there is something to print
  [ "$*" ] || return

  #@ Send output to Stdout
  printf "%s\n" "$*"

}

punctuate_exit() {
  case "$1" in
  --err*)
    failure=true
    case "$1" in
    *exit)
      shift
      present_info "Error: $*"
      purge_leftovers
      ;;
    esac
    ;;
  *)
    present_info "$*"
    purge_leftovers
    ;;
  esac
}

purge_leftovers() { #@ Remove variables
  purge_variables() {
    unset \
      scr_PATH \
      scr_NAME \
      scr_VERSION \
      scr_AUTHOR \
      scr_DESCRIPTION \
      scr_USAGE \
      commands command \
      verbosity msg msg0 msg1 msg2 msg3 \
      failure
  }

  if [ "$failure" ]; then
    purge_variables
    exit 1
  else
    purge_variables
    exit 0
  fi
}

point_of_entry "$@"
