#! /bin/sh

#==================================================
#
# Test
# CLI/bin/environment/app/picom.sh
#
#==================================================

# _________________________________ DOCUMENTATION<|

_usage() {
  ###### U S A G E : Help and ERROR ######
  cat <<EOF
foobar $Options
  $*
  Usage: foobar <[options]>
  -b  --bar            Set bar to ✔️    ($foo)
  -f  --foo            Set foo to ✔️    ($bar)
  -h  --help           Show this message
  -A  --arguments=...  Set arguments to ✔️ ($arguments) AND get ARGUMENT ($ARG)
  -B  --barfoo         Set barfoo to ✔️ ($barfoo)
  -F  --foobar         Set foobar to ✔️ ($foobar)
EOF
}

[ $# = 0 ] && _usage "  >>>>>>>> no options given "

while getopts ':fbh-A:FB' OPTION; do
  case "$OPTION" in
  h) _usage ;;
  f)
    sfoo="Short FOO"
    printf "%s\n" "$sfoo"
    ;;
  b)
    sbar="Short BAR"
    printf "%s\n" "$sbar"
    ;;
  B)
    sbarfoo="Short BARFOO"
    printf "%s\n" "$sbarfoo"
    ;;
  F)
    sfoobar="Short FOOBAR"
    printf "%s\n" "$sfoobar"
    ;;
  A)
    sarguments="Short ARGUMENT"
    sARG="$OPTARG"
    printf "%s\n" "$sarguments: \"$sARG"\"
    ;;
  -)
    [ $OPTIND -ge 1 ] && optind=$((OPTIND - 1)) || optind=$OPTIND
    eval OPTION="\$$optind"
    OPTARG=$(printf "%s\n" $OPTION | cut -d'=' -f2)
    OPTION=$(printf "%s\n" $OPTION | cut -d'=' -f1)

    case $OPTION in
    --help) _usage ;;
    --foo)
      lfoo="Long FOO"
      printf "%s\n" "$lfoo"
      ;;
    --bar)
      lbar="Long BAR"
      printf "%s\n" "$lbar"
      ;;
    --foobar)
      lfoobar="Long FOOBAR"
      printf "%s\n" "$lfoobar"
      ;;
    --barfoo)
      lbarfoo="Long BARFOO"
      printf "%s\n" "$lbarfoo"
      ;;
    --arguments)
      larguments="Long ARGUMENT"
      lARG="$OPTARG"
      printf "%s\n" "$larguments: \"$lARG"\"
      ;;
    *) _usage " Long: >>>>>>>> invalid options (long) " ;;
    esac
    OPTIND=1
    shift
    ;;
  ?) _usage "Short: >>>>>>>> invalid options (Short) " ;;
  esac
done

# printf "=======================================\n"
# printf " Debugging in %s\n" "$0"
# printf "%s\n" "RESULT Short-foo      : $sfoo"
# printf "%s\n" "RESULT Short-bar      : $sbar"
# printf "%s\n" "RESULT Short-foobar   : $sfoobar"
# printf "%s\n" "RESULT Short-barfoo   : $sbarfoo"
# printf "%s\n" "RESULT Short-arguments: $sarguments with Argument = \"$sARG"\"
# printf "=======================================\n"
# printf "%s\n" "RESULT long-foo      : $lfoo"
# printf "%s\n" "RESULT long-bar      : $lbar"
# printf "%s\n" "RESULT long-foobar   : $lfoobar"
# printf "%s\n" "RESULT long-barfoo   : $lbarfoo"
# printf "%s\n" "RESULT long-arguments: $larguments and $lARG"
# printf "=======================================\n"
