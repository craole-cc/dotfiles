#!/bin/sh
# shellcheck disable=SC2034,SC1090,SC2154,SC1091

appName="sshIt"
appVersion="0.10"

init_scr_env() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -h | --help)
      __help__
      exit
      ;;
    -v | --version)
      __version__
      exit
      ;;
    *)
      # echo "Var: $1"
      __valid_env__ "$1"
      ;;
    esac
    shift
  done
}

__help__() {
  printf "%s\n" "$appName"
}

__version__() {
  printf "%s]n" "$appVersion"
}

__error__() {
  printf "ðŸš© "

  args=$(printf "%s" "$1" | tr '[:upper:]' '[:lower:]')
  case "$args" in
  --required)
    printf "This is %srequired%s" "$clr_error" "$tfx_reset"
    exit 1
    ;;
  --selection)
    printf "Invalid Selection"
    ;;
  --naked)
    printf \
      "Invalid character(s): %s%s%s" \
      "$clr_error" "$_invalid" "$tfx_reset"
    exit 1
    ;;
  --character)
    printf \
      "Invalid characters were removed: \nðŸŸ¥ %s \nâœ… %s" \
      "$_invalid" "$_valid"
    ;;
  --env)
    shift
    printf \
      "The %sENV file%s path is invalid: %s" \
      "$clr_error" "$tfx_reset" "$1"
    # __ui__ --file
    ;;
  --id_exists)
    shift
    printf \
      "This %sidentity file%s already exists: %s" \
      "$clr_error" "$tfx_reset" "$1"
    __ui__ --id_exists
    ;;
  --file)
    shift
    printf "Invalid File: %s" "$1"
    __ui__ --file
    ;;
  --path)
    shift
    printf "Invalid Path: %s" "$1"
    __ui__ --path
    ;;
    # ;;
  esac

  printf "%s\n" "$tfx_reset"
}

#@ User Input                                                                 #
__ui__() {

  #| Disable user input display
  # stty -echo

  opts=$(printf "%s" "$*" | tr '[:upper:]' '[:lower:]')
  case "$opts" in
  --host)
    printf "%s " "${italic}Who is the ${success}host$tfx_reset?"
    read -r _INPUT
    __valid_name__ "$_INPUT"
    sshHost="$_valid"
    ;;
  --user)
    printf "%s " "${italic}Who is the ${info}user$tfx_reset?"
    read -r _INPUT
    __valid_name__ "$_INPUT"
    sshName="$_valid"
    ;;
  --hostname)
    printf "%s " "${italic}What is the ${info}hostname$tfx_reset?"
    read -r _INPUT
    __valid_name__ "$_INPUT"
    sshHostName="$_valid"
    ;;
  --id_new)
    printf "%s " "${italic}Where should the ${info}Identity File$tfx_reset be saved?"
    read -r _INPUT
    __valid_id__ "$_INPUT"
    __valid_pathname__ "$_INPUT"
    sshID="$_valid"
    ;;
  --id_default)
    printf "%s " "${italic}Save the ${info}Identity File$tfx_reset to the default location? [Y|n]
            ${defaultID}"
    read -r OPT
    case $OPT in
    n* | N*)
      __ui__ --id_new
      ;;
    y* | Y* | *)
      _INPUT="${defaultID}"
      ;;
    esac
    ;;
  --id_exists)
    printf "%s " "${italic}Overwrite the current ${bold}identity$tfx_reset file [${bold}N$tfx_reset|y]?"
    read -r OPT
    case $OPT in
    y* | Y*)
      _RESET=true
      printf "%s" "Existing identity file archived"
      ;;
    n* | N*)
      __ui__ --id_new
      ;;
    *)
      __error__ --selection
      __ui__ --id_exists
      ;;
    esac
    ;;
  --env)
    printf "%s " "${italic}What is the path to the ${info}ENV$tfx_reset file?"
    read -r _INPUT
    __valid_env__ "$_INPUT"
    ;;
  --file)
    printf "%s " "${italic}Please enter a valid path to the ${bold}file$tfx_reset."
    read -r _INPUT
    __valid_file__ "$_INPUT"
    ;;
  --path)
    printf "%s " "${italic}Please enter a valid ${bold}path$tfx_reset."
    read -r _INPUT
    __valid_pathname__ "$_INPUT"
    ;;
  --confirm)
    #| Print content before the ID
    printf "%s
        Continue with this SSH config? [Y|n]?
  |> ---------------------------------------- <|
              Host | $sshHost
          Hostname | $sshHostName
              User | $sshName\n"

    #| Wrap if ID length exceeds 22 characters"
    ID_len="${#sshID}"
    if [ "$ID_len" -gt 22 ]; then
      printf "%-15s ID | â¤µ \n %-5s $sshID \n"
    else
      printf "%-15s ID | $sshID \n"
    fi

    read -r OPT
    case $OPT in
    n* | N*)
      __ui__ --change
      ;;
    y* | Y* | *)
      return
      ;;
      # *)
      #   __error__ --selection
      #   __ui__ --confirm
      # ;;
    esac
    ;;
  --change)
    printf "
              Select Change Option
  |> ---------------------------------------- <|
                1. ENV Key File
                2. Host
                3. HostName
                4. User
                5. Identity File
                6. Cancel
            "
    read -r n
    case $n in
    1) __ui__ --env ;;
    2) __ui__ --host ;;
    3) __ui__ --hostname ;;
    4) __ui__ --user ;;
    5) __ui__ --id_new ;;
    6)
      printf "%s" "Exiting $appName"
      exit
      ;;
    *) __error__ --selection ;;
    esac
    __ui__ --confirm
    ;;
  esac

  #| Enable user input display
  stty echo

}

#@ Variables                                                                  #
__variables__() {

  # #*** UserID ***#
  # if [ -z "$userID" ]; then
  #   [ -n "${USER+x}" ] && user="$USER"
  #   [ -n "${USERNAME+x}" ] && user="$USERNAME"
  #   userID="$(hostname)_$user"
  # fi

  #*** SSH Variables ***#
  _ssh_() {
    #*** Config ***#
    sshDIR="$HOME/.ssh"
    rcSSH="$sshDIR/config"

    #*** Host ***#
    _host_() {
      if [ -n "$Host" ]; then
        sshHost="$(__valid_name__ "$Host")"
      else
        __ui__ --host
      fi

      case "$(printf "%s" "$sshHost" | tr '[:upper:]' '[:lower:]')" in
      *github*) sshHostLabel="$GitHub" ;;
      *gitlab*) sshHostLabel="$GitLab" ;;
      *) ;;
      esac
      _key="$HostName"
      if [ -n "$_key" ]; then
        sshHostName="$_key"
        unset _key
      elif [ "$sshHostLabel" ]; then
        sshHostName="$sshHost"
      else
        __ui__ --hostname
        sshHostName="$_INPUT"
      fi

      __valid_name__ "$sshHostName"
      sshHostName="$_valid"
    }

    #*** User ***#
    _user_() {
      _key="$Name"
      if [ -n "$_key" ]; then
        sshName="$_key"
        unset _key
      else
        __ui__ --user
        sshName="$_INPUT"
      fi
      __valid_name__ "$sshName"
      sshName="$_valid"
    }

    #*** Hostname ***#
    _hostname_() {
      _key="$HostName"
      if [ -n "$_key" ]; then
        sshHostName="$_key"
        unset _key
      elif [ "$sshHostLabel" ]; then
        sshHostName="$sshHost"
      else
        __ui__ --hostname
        sshHostName="$_INPUT"
      fi

      __valid_name__ "$sshHostName"
      sshHostName="$_valid"
    }

    #*** Identity File ***#
    _id_() {
      #| Set path
      _key="$ID"
      if [ -n "$_key" ]; then
        sshID="$_key"
        unset _key
      else
        sshID="${sshDIR}/${sshHostLabel:-$sshHost}/${sshName}"
      fi

      #| Check if path exists
      __valid_id__ "$sshID"

      #| Extract path variables
      sshIDdir=$(dirname "$sshID")
      sshIDname="$(basename "$sshID")"

      #| Allow reinitialization
      if [ "$_RESET" ]; then

        #| Declare files to archive
        FILEStoArchive="$(
          find "${sshIDdir}" \
            -maxdepth 1 \
            -type f -name "${sshName}" -o \
            -type f -name "${sshName}.*"
        )"

        #| Archive exixting files
        [ -f "$sshID" ] &&
          for file in $FILEStoArchive; do
            bakDIR="${sshIDdir}/archive"
            mkdir --parents "$bakDIR"
            mv "$file" --backup=numbered --target-directory="$bakDIR"
          done
      fi
    }

    #*** Confirm Variables ***#
    _host_ && _user_ && _hostname_ && _id_
    __ui__ --confirm
  }

  #*** Environment Key File ***#
  if [ "$_SRC" ]; then
    for file in $_ENV; do
      #| Ensure the ENV file is found.
      __valid_env__ "$file"

      #| Unset ENV Variables
      # unset Host HostName Name Email

      #| Source the ENV file
      . "$file"

      #| Load SSH Variables
      _ssh_
    done
  else
    #| Load SSH Variables
    _ssh_
  fi
}

#@ SSH Initializer                                                            #
__init__() {

  #| Create a directory for the host, if necessary.
  [ -d "${sshIDdir}" ] || mkdir --parents "${sshIDdir}"

  #| Generate public/private algorithm key pair, respectively.
  ssh-keygen -t ed25519 -a 100 -f "${sshID}" -C "$(INFor --label)"
  ssh-keygen -y -f "${sshID}" >"${sshID}.pub"

  #| Start the ssh-agent and add the private key to it.
  eval "$(ssh-agent)" && ssh-add "${sshID}"

  printf \
    "Host %s\n  \tUser %s\n  \tHostName %s\n  \tIdentityFile %s\n" \
    "$sshHost" "$sshName" "$sshHostName" "$sshID" |
    tee --append "${sshDIR}/config"

  #| Send the contents of the public key to the clipboard
  clip-c "$(cat "$sshID.pub")"
}

#@ Utilities                                                                  #
#| Validation
__valid_chars__() {
  while [ $# -ge 1 ]; do
    case "$1" in
    --chars)
      _chars="$2"
      ;;
    --text)
      if [ "$2" = "" ]; then
        __error__ --naked
      else
        _text="$2"
      fi
      ;;
    *)
      __error__ --required
      ;;
    esac
    shift
  done

  _invalid="$(printf "%s" "$text" | highlight_text "$chars")"
  _valid="$(printf "%s" "$text" | extract_text "$chars")"

  [ "$_valid" = "" ] && __error__ --naked
  [ "$_text" != "$_valid" ] && __error__ --character

}

__valid_name__() {
  _validchars="[^A-Za-z0-9._-]"
  __valid_chars__ "[^A-Za-z0-9._-]" "$@"
}

__valid_pathname__() {
  _validchars="[^A-Za-z0-9\/._-]"
  __valid_chars__ "$@"
}

#| Existing File Check
__valid_env__() {
  [ "$1" ] || echo "missing var"
  [ -f "$1" ] || __error__ --env "$1"
  # [ -f "$1" ] || echo "invalid env \"$1\""
}
__valid_id__() { [ -f "$*" ] && __error__ --id_exists "$*"; }
__valid_file__() { [ -f "$*" ] || __error__ --file "$*"; }
__valid_dir__() { [ -d "$*" ] || __error__ --path "$*"; }

highlight_text() { grep --color=always "$@"; }
extract_text() { sed "s!$*!!g"; }

#| Run the script
__main__() {
  #| Terminal Characteristics
  . "$(pathof term_output)"

  # . sysINF
  # mkfile() { install -m 644 -D /dev/null "$@"; }

  # [ "$_HELP" ] && __help__
  # [ "$_VER" ] && __version__
  # __variables__
  # __init__
  # __valid_chars__ "[^A-Za-z0-9._-]" "pop"
  echo "$clr_error casd"
  init_scr_env "$@"

} && __main__ "$@"

# : <<'TODO'
# - Allow options for Key, Host, Mame, ID and Port.

# [ -n "$HostName" ] && sshHostname="$HostName"
# [ -n "$Name" ] && sshName="$Name"
# [ -n "$Email" ] && sshEMAIL="$Email"
# [ -n "$Key" ] && sshID="$Key"

# [ -n "$1" ] && sshHost="$1"
# [ -n "$2" ] && sshName="$2"
# # [ -n "$3" ] && sshID="$3"
# # [ -n "$3" ] && sshPORT="$4"
# TODO
