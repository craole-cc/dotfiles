#!/bin/sh

_cmd_PATH="$(PathOf "$0")"
_cmd_NAME="$(basename "$_cmd_PATH")"
_cmd_HOME="$(dirname -- "$_cmd_PATH")"
_cmd_VERSION="1.0"
_cmd_DESCRIPTION="Create a symbolic link between files"
_cmd_DEPENDENCIES="coreutils."
_cmd_USAGEGUIDE="$(
  cat <<USAGE_GUIDE
|---------------------------------------------------->
  $_cmd_NAME>=> $_cmd_DESCRIPTION
|---------------------------------------------------->
  USAGE: $_cmd_NAME --src <[path]> --lnk <[path]>
|---------------------------------------------------->
  -h --help      />   Usage guide
  -v --version   />   Version
  -d --verbose   />   Display info
  -s --src       />   Path of the Source
  -l --lnk       />   Path of the Link
|---------------------------------------------------->
USAGE_GUIDE
)"

# ===================================================================
#@                               INIT                              @#
# ===================================================================

#@ Display usage guide
__help__() { printf "%s\n" "$_cmd_USAGEGUIDE"; }

#@ Display app version
__version__() { printf "%s\n" "$_cmd_VERSION"; }

#@ Accept user options/flags
__opts__() {
  case "$1" in
  -h | --help)
    __help__
    exit
    ;;
  -v | --version)
    __version__
    exit
    ;;
  -d | --verbose) verbose=true ;;
  -q | --quiet) unset verbose ;;
  -f | --force | --reset) force=true ;;
  -s | --src | --source | --origin)
    src_path="$2"
    shift
    ;;
  -l | --lnk | --link | --destination)
    lnk_path="$2"
    shift
    ;;
  -*) __error__ --invalid-opt "$1" ;;
  *) ;;
  esac
}

__init__() {

  #| Arguments
  #@ Skip arguments if source and link paths provided
  if [ ! "$src_path" ] || [ ! "$lnk_path" ]; then

    #@ Expect arguments
    [ "$#" -gt 0 ] || __error__ --args "$#"

    #@ Loop through arguments
    while [ "$#" -gt 0 ]; do
      __opts__ "$@"
      shift
    done

    #@ Source and Link
    [ "$src_path" ] || __error__ --args-source
    [ "$lnk_path" ] || __error__ --args-link
  fi

  #| Source
  #@ Ensure source is valid
  [ -e "$src_path" ] || __error__ --source "$src_path"

  #| Link
  #@ Declare the destination directory
  lnk_parent="$(dirname "$lnk_path")"
  lnk_lineage="$lnk_parent"

  #@ Find the first valid parent directory
  while [ ! -d "$lnk_lineage" ]; do
    lnk_lineage="$(dirname "$lnk_lineage")"
  done

  #@ Check destination ownership
  [ -O "$lnk_lineage" ] && owned=true
}

# ===================================================================
#@                              TOOLS                              @#
# ===================================================================

__archive__() {

  #@ Skip unless user requested
  { [ "$force" ] && [ -e "$lnk_path" ]; } || return

  #@ Store archive path in a variable
  link_archive="${lnk_path}.bac"

  #@ Use sudo if necessary to move the link
  if [ "$owned" ]; then
    mv --force "$lnk_path" "$link_archive"
  else
    sudo mv --force "$lnk_path" "$link_archive"
  fi

  #@ Show detailed information
  __msg__ --archived
}

__mkdir__() {
  #@ Skip if destination directory found
  [ -d "$lnk_parent" ] && return

  #@ Create directory if missing
  while [ ! -d "$lnk_parent" ]; do
    printf \
      "The destination directory doesnt exist: %s\nShould we create it? [y|N]\n" \
      "$lnk_parent"

    case "$(read_char)" in
    [Yy])
      #@ Make directory
      if [ "$owned" ]; then
        mkdir --parents "$lnk_parent"
      else
        sudo mkdir --parents "$lnk_parent"
      fi
      ;;
    *)
      printf "Exiting...\n"
      exit 1
      ;;
    esac
  done

  #@ Show detailed information
  __msg__ --dired
}

__link__() {
  #@ Exit if the target/link resolves to the source
  [ "$(PathOf "$lnk_path")" = "$(PathOf "$src_path")" ] && {
    __msg__ --valid
    __exit__ --success
  }

  #@ Create link using sudo, if necessay
  if [ "$owned" ]; then
    ln --symbolic "$src_path" "$lnk_path"
  else
    sudo ln --symbolic "$src_path" "$lnk_path"
  fi

  #@ Show detailed information
  [ -e "$lnk_path" ] && {
    __msg__ --linked
    __exit__ --success
  }
}

# ===================================================================
#@                             OUTPUT                              @#
# ===================================================================
__msg__() {
  #@ Display messages based on verbosity
  [ "$verbose" ] || return

  linked="$lnk_path ==> $src_path"

  case $1 in
  --valid) msg="Valid Link: $linked" ;;
  --linked) msg="Established Link: $linked" ;;
  --owned) msg="The destination directory is owned by the current user." ;;
  --args) msg="::❗:: 2 arguments were expected but $# was given.\n" ;;
  --no-source) msg="Source is undefined" ;;
  --no-link) msg="Link is undefined" ;;
  --create-parent) msg="Destination directory doesnt exist: $lnk_parent" ;;
  esac

  printf "%s\n" "$msg"
}

__error__() {
  case $1 in
  --args)
    shift
    printf "::❗:: 2 arguments were expected but %s was given.\n" "$@"
    # __msg__ --args "$@"
    ;;
  --args-source) __msg__ --no-source ;;
  --args-link) __msg__ --no-link ;;
  --source)
    shift
    printf "Invalid source: %s\n" "$@"
    ;;
  --exists)
    shift
    [ "$verbose" ] && printf "Path Exists: %s\n" "$@"
    ;;
  --missing)
    shift
    [ "$verbose" ] && printf "Path Missing: %s\n" "$@"
    ;;
  --linkdir)
    shift
    printf "Destination directory doesnt exist: %s\n" "$(dirname "$@")"
    ;;
  --invalid-opt)
    shift
    printf "Unknown Option: %s\n" "$@"
    ;;
  *) ;;
  esac

  __help__
  __exit__ --failure
}

__exit__() {
  case "$1" in
  --success) exit 0 ;;
  --failure) exit 1 ;;
  esac
}

# ===================================================================
#@                               RUN                               @#
# ===================================================================

__process__() {
  #@ Archive
  __archive__

  #@ Create destination parent directories
  __mkdir__

  #@ Link
  [ -e "$lnk_path" ] || __link__
}

__test__() {
  echo "Source:  $src_path"
  echo "Link:    $lnk_path"
  echo "LinkDIR: $lnk_parent"
  echo "Owned:   $owned"
  echo "Reset:   $force"
  echo "Verbose: $verbose"
  echo "MkDir:   $_MKDIR"
  # __error__ --args
  [ -e "$lnk_parent" ] && ls "$lnk_parent"
  [ -e "$link_archive" ] && echo "ARCHIVING $link_archive"
  [ -e "$lnk_path" ] || echo "LINKING: $lnk_path" to "$src_path"

}

__main__() {
  __init__ "$@"
  # __test__
  __process__
}

__main__ "$@"
