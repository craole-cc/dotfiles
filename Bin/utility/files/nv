#!/bin/sh
scr_PATH="$(PathOf "$0")"
scr_NAME="$(basename "$scr_PATH")"
scr_DIR="$(dirname "$scr_PATH")"
scr_VERSION="1.0"
scr_DESCRIPTION="displays information about variables"
scr_USAGE="Usage:
    $scr_NAME [OPTIONS] [VARIABLES]
"
scr_OPTIONS="Options:
    -h, --help             Show detailed help information
    -v, --version          Show the script version number
    -q, --quiet            Supress all output including errors
    -d, --verbose <LEVEL>  Control level of information shared
"
scr_ARGUMENTS="Arguments:
    <LEVEL>    [quiet, info [default], debug, 0, 1, 2]
"
scr_EXAMPLES="Examples:
    $scr_NAME HOME XDG_CONFIG
    $scr_NAME HOME XDG_CONFIG --verbose info
    $scr_NAME -d=debug HOME
"
scr_AUTHORS="Authors:
    Craole <iamcraole@gmail.com>
"
scr_HELP="$(
  cat <<HELP
  $scr_NAME [v.$scr_VERSION] $scr_DESCRIPTION.

  $scr_USAGE
  $scr_OPTIONS
  $scr_ARGUMENTS
  $scr_EXAMPLES
  $scr_AUTHORS
HELP
)"

main() {
  parse_arguments "$@"
  run_process
  end_process
}

test_stuff() {
  display_info "$scr_HELP"
  # printf "%s\n\n" "$scr_NAME ($scr_VERSION)"
  # printf "%s\n\n" "$scr_AUTHORS"
  # printf "%s\n\n" "$scr_DESCRIPTION"
  # printf "%s\n\n" "$scr_USAGE"
  # printf "%s\n\n" "$scr_OPTIONS"
  # printf "%s\n\n" "$scr_ARGUMENTS"
  # printf "%s\n\n" "$scr_EXAMPLES"
  # printf "verbosity:%s\n" "$verbosity"
  # printf "fail%s" "$failure"
  # printf "all:%s\n" "$*"
  # printf "1:%s\n" "$1"
  # printf "2:%s\n" "$2"
  # printf "3:%s\n" "$3"
  # printf "\n%s" "$vars"
  # display_info "verbosity: $verbosity"
  # for var in $vars; do
  #   echo "var: $var"
  # done
}

parse_arguments() { #@ Initialize

  #@ Ensure arguments are supplied
  [ "$#" -ge 1 ] || {
    failure=true
    end_process --error-exit "No arguments provided"
  }

  #@ Parse flags and arguments
  while [ $# -ge 1 ]; do
    case $1 in
    -h | --help) end_process "$scr_HELP" ;;
    -v | --version) end_process "$scr_VERSION" ;;
    -q | --quiet) verbosity="quiet" ;;
    -d=* | --verbose=*) verbosity="${1#*=}" ;;
    -d | --verbose)
      case "$2" in
      quiet | info | debug | 0 | 1 | 2) verbosity="$2" ;;
      *)
        verbosity="debug"
        ;;
      esac
      ;;
    -*)
      # display_info "Unknown option:" "$1"
      end_process --error-exit "Unknown option:" "$1"
      ;;
    *)
      #@ Store arguments in an array
      vars="$(are --save "$vars" "$1")"
      ;;
    esac
    shift
  done

  #@ Set verbosity level
  case "$verbosity" in
  0 | quiet) verbosity=0 ;;
  1 | error | debug) verbosity=1 ;;
  2 | info) verbosity=2 ;;
  *) verbosity=0 ;;
  esac

  #@ Extract variables
  vars="$(are --expand "$vars")"
  total_vars="$(are --count "$vars")"
  last_var="$(are --last "$vars")"
}

#/> Core                                            <\
run_process() { #@ Display information about each variable

  #@ Loop through all arguments
  for var in $vars; do

    #@ Extract the value of a variable
    var_LABEL="$var"
    var_VALUE="$(eval printf '%s' "\"\${$var_LABEL?}\"" 2>/dev/null)"
    msg="$var_LABEL => $var_VALUE"

    #@ Set output message based on verbosity level
    if [ "$var_VALUE" ]; then
      msg0="$var_VALUE"
      msg1="✅ $msg"
      msg2="✅ '$var_LABEL' resolves to $var_VALUE"
    else
      unset msg0
      msg1="❌ $msg"
      msg2="❌ '$var_LABEL' is not a valid parameter"
      failure=true
    fi

    #@ Generate message based on verbosity eg. "$msg2"
    unset msg
    msg="$(eval printf '%s' "\"\$msg$verbosity\"" 2>/dev/null)"
    #@ Send informtion to display where applicable
    [ "$msg" ] &&
      if [ "$var" != "$last_var" ]; then
        display_info -n "$msg"
      else
        display_info "$msg"
      fi
  done
}

#/> Utilities                                       <\
display_info() { #@ Display information to via Stdout or Notification
  #? USAGE: display_info --noline $arg

  #@ Ensure there is something to print
  [ "$*" ] || return 1

  case "$1" in
  -l | -n | --new-line)
    shift
    printf '%s\n' "$*"
    ;;
  *) printf '%s' "$*" ;;
  esac
}

end_process() {
  case "$1" in
  --err*)
    failure=true
    case "$1" in
    *exit)
      shift
      display_info -n "$*"
      display_info "$scr_USAGE"
      collect_garbage
      ;;
    esac
    ;;
  *)
    display_info "$*"
    collect_garbage
    ;;
  esac
}

collect_garbage() { #@ Remove variables
  unset \
    scr_PATH \
    scr_NAME \
    scr_VERSION \
    scr_AUTHOR \
    scr_DESCRIPTION \
    scr_USAGE \
    vars last_vars \
    verbosity msg msg0 msg1 msg2 msg3

  if [ "$failure" ]; then
    unset "$failure" && exit 1
  else
    unset "$failure" && exit 0
  fi
}

main "$@"
