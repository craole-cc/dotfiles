#!/bin/sh

main() {
  initialize_script
  parse_arguments "$@"
  set_environment
  print_verbose_info
  print_padded_text
}

initialize_script() {
  __information() {
    scr_name="goodgood"
    scr_version="1"
    scr_description="validates variables based on a specified type"
    scr_authors="Craole"
    scr_usage="$(
      txtBarber "
        Usage: $scr_name [OPTIONS] <VAR>
        Description: $scr_name is a $scr_description

        Options:
          -h, --help          Display this help message
          -v, --version       Display the version of $scr_name
          -d, --verbose       Enable verbose mode
          -t, --type  TYPE    Specify the type to validate against (default is NUM)
              --var   VAR     Specify the variable to check (Default)

        Arguments:
          TYPE              Types may be NUM, CHAR, or STR

        Authors: $scr_authors
        Version: $scr_version
      "
    )"
  } && __information

  __variables() {
    type="NUM"
    exit_code=0
  } && __variables

}

parse_arguments() {
  while [ $# -gt 0 ]; do
    case "$1" in
    -h | --help)
      show_usage_guide
      ;;
    -v | --version)
      print_version
      exit
      ;;
    -d | --verbose) verbose=true ;;
    -c | --center) alignment="center" ;;
    -r | --right) alignment="right" ;;
    -l | --left) alignment="left" ;;
    -p | --pad | --char)
      if [ "$2" ]; then
        validate_var \
          --lbl "Padding Character" \
          --var "$2" &&
          pad_char="$2"
        shift
      else
        show_usage_guide \
          --lbl "Padding Character Error" \
          --msg "Missing argument for '$1'." \
          --opt "$1" \
          --var "<CHAR>" \
          --fatal
      fi
      ;;
    --padl)
      if [ "$2" ]; then
        validate_var \
          --lbl "Left Padding Character" \
          --var "$2" &&
          pad_char="$2"
        shift
      else
        show_usage_guide \
          --lbl "Padding Character [Left] Error" \
          --msg "Missing argument for '$1'." \
          --opt "$1" \
          --var "<CHAR>" \
          --fatal
      fi
      ;;
    --padr)
      label="Padding Character [Right]"
      pad_char_r="$(
        validate_var \
          --lbl "Right Padding Character" \
          --opt "$1" \
          --var "$2" \
          --type
      )"
      echo "$pad_char_r"
      exit
      # if [ "$2" ]; then
      #   validate_var "$2"
      #   # pad_char="$2"
      #   shift
      # else
      #   show_usage_guide \
      #     --lbl "$label" \
      #     --msg "Missing argument for '$1'." \
      #     --opt "$1" \
      #     --var "<CHAR>" \
      #     --fatal
      # fi
      ;;
    --width)
      if [ "$2" ]; then
        term_width="$2"
        shift
      else
        [ "$verbose" ] && printf "Error: Missing argument for %s\n" "$1"
      fi
      ;;
    *) text="$1" ;;
    esac
    shift
  done
}

set_environment() {

  label="Terminal Width"
  term_width="${term_width:-$(get_len --term)}"
  is_number "$term_width" "$label"

  label="Text Length"
  text_length="$(get_len "$text")"
  is_number "$text_length" "$label"

  label="Buffer Length"
  if [ "$alignment" = "center" ]; then
    buffer_length=2
  else
    buffer_length=1
  fi

  label="Padding Character"
  default_char=" "
  pad_char_l="${pad_char_l:-${pad_char:-${pad_char_r:-$default_char}}}"
  pad_char_r="${pad_char_r:-${pad_char:-${pad_char_l:-$default_char}}}"

  # [ "$pad_char_l" ] && validate_var "$pad_char_l" "Left $label"
  # [ "$pad_char_r" ] && validate_var "$pad_char_r" "Right $label"

  label="Padding"
  [ "$term_width" -gt "$text_length" ] && padding_length=$(((term_width - text_length - buffer_length) / buffer_length))
  padding_left="$(repeat_char "$pad_char_l" "$padding_length")"
  padding_right="$(repeat_char "$pad_char_r" "$padding_length")"
}

repeat_char() {
  char="$1"
  reps="$2"
  printf "%-${reps}s" | tr " " "$char"
}

is_number() {
  var="$1"
  lbl="$2"

  case $var in
  '' | *[!0-9]*)
    #TODO use pout for error handling to replace printf and exit
    # printf "%s '%s', is not a valid number\n" "$lbl" "$var"
    [ "$verbose" ] &&
      embellish \
        --reset --underline --bg-red --fg-white \
        "$lbl Error:" \
        --reset --space --bold --red --italic \
        "$var" \
        --reset --space \
        "is not a valid number." \
        --reset --new-line
    exit 1
    ;;
  *) return 0 ;;
  esac
}

is_single_char() {
  var="$1"
  lbl="$2"

  if [ -z "$var" ]; then
    embellish \
      --reset --underline --bg-red --fg-white \
      "$lbl Error:" \
      --reset --space \
      "missing character" \
      --reset --new-line
    exit 1
  fi

  case $var in
  # Printable characters, including whitespace
  [[:print:]]) return 0 ;;
  *)
    #TODO use pout for error handling to replace printf and exit
    # printf "%s '%s', is not a valid single character\n" "$lbl" "$var"
    embellish \
      The \
      --reset --space --bold --red --italic \
      "$(printf "%s" "$lbl" | tr '[:upper:]' '[:lower:]')" \
      --reset --space --underline --bg-red --fg-white \
      ["$var"] \
      --reset --space \
      "is not a single character." \
      --reset --new-line

    exit 1
    ;;
  esac
}

validate_var() {
  func_name="validate_var"
  func_usage="$func_name [OPTIONS] <Value>"
  while [ $# -gt 0 ]; do
    case $1 in
    --lbl | --opt | --var | --type)
      #@ Remove the leading hyphens from the option
      variable_name=${1#--}

      #@ Assign the value of $2 to the extracted variable name
      if [ "$2" ]; then
        eval "$variable_name=\"\$2\""
        shift
      else
        printf "Error: Missing argument for %s\n" "$1"
      fi
      ;;
    --*)
      #TODO Use show_usage_guide
      echo "Unknown option: $1"
      ;;
    *) var="$1" ;;
    esac
    shift
  done

  printf "type %s | opt %s | var %s | lbl %s" \
    "$type" "$opt" "$var" "$lbl"
  # [ "$var" ] || show_usage_guide --fatal
}
# if [ "$" ];then
# case $var in
# }

# validate_var() {
#   case "$1" in
#   [[:print:]])
#     #/> Printable characters, including whitespace
#     exit_code=0
#     ;;
#   *)
#     msg="$(embellish \
#       The \
#       --reset --space --bold --red --italic \
#       "$(printf "%s" "$label" | tr '[:upper:]' '[:lower:]')" \
#       --reset --space --underline \
#       "$1" \
#       --reset --space \
#       "is invalid." \
#       --reset --new-line)"
#     ;;
#   esac

#   if [ "$1" ]; then
#     validate_var "$2"
#     # pad_char="$2"
#     shift
#   else
#     show_usage_guide \
#       --lbl "$label" \
#       --msg "Missing argument for '$1'." \
#       --opt "$1" \
#       --var "<CHAR>" \
#       --fatal
#   fi

#   case "$1" in
#   [[:print:]])
#     #/> Printable characters, including whitespace
#     exit_code=0
#     ;;
#   *)
#     msg="$(embellish \
#       The \
#       --reset --space --bold --red --italic \
#       "$(printf "%s" "$label" | tr '[:upper:]' '[:lower:]')" \
#       --reset --space --underline \
#       "$1" \
#       --reset --space \
#       "is invalid." \
#       --reset --new-line)"
#     ;;
#   esac

#   show_usage_guide --msg "$msg" --fatal
#   # show_usage_guide \
#   #   --lbl "$lbl" \
#   #   --msg "$msg" \
#   #   --fatal

#   # embellish \
#   #   "For more information, run" \
#   #   --reset --space --bold --italic \
#   #   "${usg:-$scr_name --help}" \
#   #   --reset --new-line

#   # exit "${exit_code:-1}"
# }

get_len() {
  case $1 in
  --term) stty size 2>/dev/null | awk '{print $2}' ;;
  *) printf "%s" "${#1}" ;;
  esac
}

print_padded_text() {
  if [ "$padding_left" ] || [ "$padding_right" ]; then
    case "$alignment" in
    center)
      printf \
        "%s %s %s\n" \
        "${padding:-$padding_left}" \
        "$text" \
        "${padding:-$padding_right}"
      ;;
    right)
      printf "%s %s\n" "$padding_left" "$text"
      ;;
    left | *)
      printf "%s %s\n" "$text" "$padding_right"
      ;;
    esac
  else
    printf "%s\n" "$text"
  fi
}

show_usage_guide() {
  case $1 in
  -*)
    while [ $# -gt 0 ]; do
      case $1 in
      -x | --fatal) exit_code="${2:-1}" ;;
      --*)
        #@ Remove the leading hyphens from the option
        variable_name=${1#--}

        #@ Assign the value of $2 to the extracted variable name
        eval "$variable_name=\"\$2\""
        ;;
      esac
      shift
    done

    #/> Label
    embellish \
      --reset --underline --bg-red --fg-white \
      --space "${lbl:-$label} Error" --space \
      --reset --new-line

    #/> Message
    [ "$msg" ] && embellish "$msg" --reset --new-line

    #/> Usage Guide
    [ "$var" ] && [ "$opt" ] && embellish \
      "Usage: $scr_name $opt" \
      --space --red \
      "$var" \
      --reset --space \
      "[TEXT]" \
      --reset --new-line

    #/> Additional information
    embellish \
      --reset --new-line \
      "For more information, run" \
      --reset --space --bold --italic \
      "$scr_name --help" \
      --reset --new-line
    ;;
  *) printf "%s\n" "$scr_usage" ;;
  esac

  exit "$exit_code"
}



main "$@"
