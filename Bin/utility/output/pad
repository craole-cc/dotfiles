#!/bin/sh

# Function to get the current terminal size
get_terminal_size() {
  stty size | awk '{ print $2, $1 }'
}

# Function to set the terminal size
set_terminal_size() {
  stty cols "$1" rows "$2"
}

# Function to print the text with padding
print_with_padding() {
  text="$1"
  padding="$2"

  # Get the terminal size
  current_size=$(get_terminal_size)
  current_width=$(printf '%s' "$current_size" | awk '{print $1}')
  current_height=$(printf '%s' "$current_size" | awk '{print $2}')

  # Calculate the new width and height with padding
  new_width=$((current_width - padding * 2))
  new_height=$((current_height - padding * 2))

  # Set the new terminal size with padding
  set_terminal_size "$new_width" "$new_height"

  # Calculate the padding spaces
  padding_spaces=$(printf "%*s" "$padding" "")

  # Print the text with padding
  printf "%s%s%s\n" "$padding_spaces" "$text" "$padding_spaces"

  # Reset the terminal size
  set_terminal_size "$current_width" "$current_height"
}

# Parse options and arguments
padding=5
align="both"
while [ $# -gt 0 ]; do
  case "$1" in
  --left)
    align="left"
    shift
    ;;
  --right)
    align="right"
    shift
    ;;
  --padding)
    if [ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null; then
      padding="$2"
      shift 2
    else
      printf "Error: --padding option requires a numeric value.\n" >&2
      exit 1
    fi
    ;;
  *)
    input_text="$1"
    shift
    ;;
  esac
done

# Print the text with the specified alignment and padding
case "$align" in
left)
  print_with_padding "$input_text" "$padding"
  ;;
right)
  print_with_padding "$input_text" "$padding"
  ;;
both)
  print_with_padding "$input_text" "$padding"
  ;;
*)
  printf "Error: Invalid alignment option.\n" >&2
  exit 1
  ;;
esac
