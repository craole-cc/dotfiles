#!/bin/sh
# shellcheck disable=SC1003

scr_name="path_convert"
scr_usage=$(
  cat <<HELP
USAGE:
  $scr_name [OPTIONS] [STRING]

DESCRIPTION:
  Convert paths between Windows and Unix.

OPTIONS:
  -h, --help            Display this help message
  -d, --verbose         Display detailed information
  -p, --prefix PREFIX   Allow a prefix (eg /mnt)
  -c, --clip            Copy to system clipboard

ARGUMENTS:
  STRING                The path to convert

EXAMPLES:
    $scr_name -p mnt "C:\Users\USERNAME\Path to Convert"
    Result|> /mnt/c/Users/USERNAME/Path\ to\ Convert/
    Result|> "/mnt/c/Users/USERNAME/Path to Convert/"

    $scr_name /mnt/c/Users/John
    Result|> C:\Users\John

    $scr_name "C:\Users\Username" --prefix mnt
    Result|> /mnt/c/Users/John

    $scr_name "C:\Users\John" --clip
    Result|> Copied to clipboard: /c/Users/John
HELP
)

main() {
  purge_env
  parse_input "$@"

  # convert_path
  parse_output
  exit "$exit_code"
}

purge_env() {
  exit_code=0
  verbosity=1
  unset path path_type clip verbose
}

parse_input() {
  purge_env

  while [ $# -gt 0 ]; do
    case "$1" in
    -h | --help)
      print_help
      exit
      ;;
    -d | --verbose)
      verbosity=2
      ;;
    -p | --prefix)
      prefix="$2"
      shift
      ;;
    -c | --clip)
      clip=true
      ;;
    -q | --quiet)
      verbosity=0
      ;;
    *)
      if [ "$1" ]; then
        input_path="$1"
        # input_path="$(clean_path "$1")"
        # input_path="$(validate_path "$1")"
        # input_path_type="$(validate_path --type "$1")"
      else
        printf "%s\n" "$scr_usage"
        exit 1
      fi
      ;;
    esac
    shift
  done
}

clean_path() {
  #@ Parse path from arguments
  clean_path="$1"

  #@ Convert backslashes to forward slashes
  case "$clean_path" in *\\*)
    clean_path="$(printf "%s" "$clean_path" | tr '\\' '/')"
    ;;
  esac

  #@ Convert duplicated slashes to single
  case "$clean_path" in *//*)
    clean_path="$(printf "%s" "$clean_path" | tr -s "/")"
    ;;
  esac

  #@ Check for Widsows path then default to Unix
  case "$clean_path" in
  *:*)
    #@ Remove the leading slash, if one exists (eg. /C:/ = C:/)
    clean_path="${clean_path#/}"

    #@ Add a trailing slash if the path ends with colon (eg. C: = C:/)
    [ "${clean_path#"${clean_path%?}"}" = ":" ] &&
      clean_path="${clean_path}/"
    ;;
  *)
    # Add a leading slash, if missing (eg. mnt/... = /mnt/...)
    [ "${clean_path#/}" = "$clean_path" ] &&
      clean_path="/$clean_path"
    ;;
  esac

  printf "%s" "$clean_path"
}

get_path_type() {
  case $1 in
  :) printf "Windows" ;;
  *) printf "Unix" ;;
  esac
}

# validate_path() {
#   echo opop
#   #@ Parse the path input
#   while [ $# -gt 0 ]; do
#     case "$1" in
#     --type)
#       path_type="$(get_path_type "$path")"
#       ;;
#     -w | --win*) path_type="Windows" ;;
#     -u | --unix) path_type="Unix" ;;
#     *)
#       #@ Check if the path is empty
#       if [ "$1" ]; then
#         path="$(clean_path "$1")"
#       else
#         printf "Missing path string"
#         return 1
#       fi
#       ;;
#     esac
#     shift
#   done

#   #@ Check for Windows path then default to Unix
#   # case "$path_type" in
#   # Windows)
#   #   #@ Validate the Windows path
#   #   case "$path" in
#   #   [A-Za-z]:/*) ;;
#   #   *)
#   #     #@ Extract the drive letter (e.g., C)
#   #     drive=${path%%:*}

#   #     if [ -z "$drive" ]; then
#   #       msg="Missing Windowsdrive letter: $drive"
#   #     elif [ "${#drive}" -ne 1 ]; then
#   #       msg="Invalid Windows drive letter length: $drive"
#   #     elif ! printf "%s" "$drive" |
#   #       grep --extended-regexp --quiet '^[A-Za-z]$'; then
#   #       msg="Invalid Windows drive letter character: $drive"
#   #     fi
#   #     printf "%s" "$msg"
#   #     return 1
#   #     ;;
#   #   esac
#   #   ;;
#   # Unix)
#   #   # Add a leading slash, if missing (eg. mnt/... = /mnt/...)
#   #   [ "${path#/}" = "$path" ] &&
#   #     path="/$path"

#   #   #@ Set Path Type
#   #   path_type="Unix"
#   #   ;;
#   # esac

#   #@ Return the path or path type
#   printf "TEST %s" "$path_type"
#   # if [ "$check_type" ]; then
#   #   printf "%s" "$(__process --type "$path")"
#   # else
#   #   printf "%s" "$(__process "$path")"
#   # fi

# }

convert_path() {
  path="$input_path"
  path_type="$input_path_type"

  # case "$path_type" in
  # Windows)
  #   #@ Convert the path type to Unix
  #   path_type="Unix"

  #   #@ Extract the drive letter
  #   drive="${path%"${path#?}"}"

  #   #@ Prefix the drive letter with a forward slash
  #   # drive="/$drive"

  #   #@ Convert the drive letter to lowercase
  #   drive=$(printf "%s" "$drive" | tr '[:upper:]' '[:lower:]')

  #   #@ Set default prefix
  #   prefix="${prefix:-mnt}"
  #   prefix="$(__separators "$prefix")"
  #   if [ "$prefix" ]; then
  #     path=${prefix}${drive}${path#*:}
  #   else
  #     path=/mnt/${drive}${path#*:}
  #   fi

  #   #@ Update the path with the drive letter

  #   ;;
  # Unix)
  #   path="/${path}"
  #   output_path="Windows path"
  #   path_type="Windows"
  #   ;;
  # esac

  output_path="$drive"
  output_path_type="$path_type"
}

convert_to_linux_path() {
  path="$1"

  case "$path" in
  *:/*)
    printf "Invalid windows path (%s) missing :/" "$path"
    return 1
    ;;
  esac

  # Replace backslashes with forward slashes
  # shellcheck disable=SC1003
  path=$(printf "%s" "$path" | tr '\\' '/')

  # Extract the drive letter (e.g., C)
  drive=${path%%:*}

  [ "${#drive}" -eq 1 ] || {
    printf "Drive letter '%s' should be a single letter" "$drive"
    return 1
  }

  printf "%s" "$drive" | grep -Eq '^[A-Za-z]$' || {
    printf "Invalid characters in drive letter '%s'" "$drive"
    return 1
  }

  # Check if the drive letter contains only one letter and has a length of 1
  if
    [ "${#drive}" -eq 1 ] &&
      printf "%s" "$drive" | grep -Eq '^[A-Za-z]$'
  then
    # Remove the colon from the drive letter
    drive=${drive%:}

    # Prefix the drive letter with a forward slash
    drive="/$drive"

    # Convert the drive letter to lowercase
    drive=$(printf "%s" "$drive" | tr '[:upper:]' '[:lower:]')

    # Update the path with the drive letter
    path=${drive}${path#*:}
  else
    echo "Invalid drive letter: $drive"
    exit 1
  fi

  # If a prefix is provided, add it to the path.
  [ "$prefix" ] && path="${prefix}${path}"

  # Ensure a forward slash before the path
  path=${path#/} # Remove any leading forward slash (if present)
  path="/$path"  # Ensure the path starts with a forward slash '/'

  # Return the path if it is valid
  validate_nix_path "$path"

  return
}

parse_output() {
  case "$verbosity" in
  0) ;;
  1) ;;
  *)
    printf "Path Input: %s\n" "$input_path"
    printf "Path Input Type: %s\n" "$input_path_type"
    printf "Path Output: %s\n" "$output_path"
    printf "Path Output Type: %s\n" "$output_path_type"
    echo "EXIT CODE: $exit_code"
    echo "Check Type: $check_type"
    ;;
  esac

  [ "$clip" ] && send_to_clipboard "$path"

}

print_usage() {
  printf "%s\n" "$scr_usage"
}

send_to_clipboard() {
  path="$1"
  type | grep -iq "win" # Check if running on Windows
  if [ $? -eq 0 ]; then
    printf '%s' "$path" | clip
  else
    printf '%s' "$path" | xclip -selection clipboard
  fi
  printf "Path copied to clipboard.\n"
}

set -- \
  --verbose \
  "J:/po\p" \
  --prefix etc
# "s:\users\user"

main "$@"

# string="example"
# last_char="${path#"${path%?}"}"
# echo "Last character: $last_char"
