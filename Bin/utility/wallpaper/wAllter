#!/bin/sh
# Dependencies: feh, swaybg, bat, rg, sd, awk
#TODO# Document usage information
#TODO# Add an option to archive

: <<'Documentation'
asd
Documentation

#/> Main                                            <\

main() {
  #@ Initialize script
  init_metadata
  init_arguments "$@"
  init_defaults

  #@ Process
  # if [ "$test_flag" ]; then
  dry_run "$@"
  # else
  #   run_process
  # fi

  #@ Exit gracefully
  # __cleanup__

}

#/> Initialization                                  <\

init_metadata() { #@ Initalize script metadata
  scr_PATH="$(pathof "$0")"
  scr_NAME="$(basename "$scr_PATH")"
  scr_HOME="$(dirname -- "$scr_PATH")"
  scr_VERSION="1.0"
  scr_DESCRIPTION="manages display of system wallpapers"
  scr_DEPENDENCIES="coreutils, wallpaper setter {feh, swaybg}, file reader {bat,cat} alternatives {ripgrep, fd, sd}"
}

init_arguments() { #@ Parse command-line arguments
  while [ $# -gt 0 ]; do
    case $1 in
    -h | --help) end_process --usage ;;
    -v | --version) end_process --version ;;
    -q | --quiet) verbosity=quiet ;;
    -d=* | --verbose=*) verbosity="${1#*=}" ;;
    -d | --verbose)
      case "$2" in
      */*) verbosity="debug" ;;
      *)
        if [ "$2" ]; then
          verbosity="$2"
          shift
        else
          verbosity="debug"
        fi
        ;;
      esac
      ;;
    -U | --unique) unique=true ;;
    -D | --allow-dups) unset unique ;;
    -p | --previous) wallpaper_action="previous" ;;
    -n | --next) wallpaper_action="next" ;;
    -a | --archive) wallpaper_action="archive" ;;
    -f | --love | --fav) wallpaper_action="favorite" ;;
    -i | -t | --info | --dry-run) unset wallpaper_action ;;
    -s | --sorted) sorted=true ;;
    -L | --lockscreen) lockscreen=true ;;
    -r | --reset) reset=true ;;
    -l | --log*) wallpaper_log_path="$2" ;;
    -[wW] | --wal*) wallpaper_src_path="$2" ;;
    --timed) timed="$2" ;;
    -*) end_process --error opt "$1" ;;
    *) wallpaper_src_path="$1" ;;
    esac
    shift
  done
}

init_defaults() { #@ Initalize default variables
  unique="${unique:-true}"
  wallpaper_action="${wallpaper_action:-next}"
  wallpaper_log_path="${wallpaper_log_path:-$DOTS_LOG/wallpapers}"
  wallpaper_lnk_path="${wallpaper_lnk_path:-$HOME/.background-image}"
  wallpaper_src_path="${wallpaper_src_path:-$WALLPAPERS}"
  timer_secs="${timer_secs:-3600}"
  icon_success="${icon_success:-🟩}"
  icon_error="${icon_error:-🟥}"
  icon_dead="${icon_dead:-💀}"
  icon="${icon:-$icon_success}"

  case "$verbosity" in
  error) verbosity=1 ;;
  info) verbosity=2 ;;
  debug) verbosity=3 ;;
  *) unset verbosity ;;
  esac

}

#/> Utilities                                       <\

find_images() { #@ Recursively search for image files
  usage="Usage: find_images [IMAGE_PATH]"

  #@ Ensure file is an image
  [ -d "$1" ] || {
    [ "$verbosity" -ge 1 ] && printf "%s" "$usage"
    return 1
    #TODO Handle ror with:-
    # end_process --return-err "$usage"
  }

  if weHave fd; then
    fd --type file \
      --extension bmp \
      --extension gif \
      --extension jpeg \
      --extension jpg \
      --extension png \
      --extension svg \
      --extension tiff \
      . "$1"
  else
    find "$1" \
      \( \
      -name "*.bmp" -o \
      -name "*.gif" -o \
      -name "*.jpeg" -o \
      -name "*.jpg" -o \
      -name "*.png" -o \
      -name "*.svg" -o \
      -name "*.tiff" \
      \) |
      sort --human-numeric-sort
  fi
}

validate_hd_image() { #@ Check of a file is an HD image
  usage="Usage: validate_hd_image [IMAGE_FILE]"

  #@ Ensure file is an image
  { [ -f "$1" ] && ! file "$1" | grep -q "image"; } || {
    [ "$verbosity" -ge 1 ] && printf "%s" "$usage"
    return 1
    #TODO Handle ror with:-
    # end_process --return-err "$usage"
  }

  #@ Set the minimum width and height for an image to be considered HD
  min_width=1280
  min_height=720

  #@ Get the dimensions of the image
  dimensions=$(identify -format "%wx%h" "$1")
  width=${dimensions%x*}
  height=${dimensions#*x}

  #@ Return true if the image is HD
  [ "$width" -ge "$min_width" ] && [ "$height" -ge "$min_height" ] &&
    printf "%s" "$1"
}

count_lines() { #@ Count lines in a given file
  usage="Usage: find_line [FILE]"

  #@ Ensure the file exists
  [ -f "$1" ] || {
    [ "$verbosity" -ge 1 ] && printf "%s" "$usage"
    return 1
  }

  #@ Count the lines
  awk 'END{print NR}' "$1"
}

find_line() { #@ Return line number of wallpaper in log
  usage="Usage: find_line [FILE] [LINE_SEARCH_STRING]"

  #@ Ensure the file exists
  { [ -f "$1" ] && [ "$2" ]; } || {
    [ "$verbosity" -ge 1 ] && printf "%s" "$usage"
    return 1
  }

  awk --assign text="$1" '$0 ~ text {print NR}' "$2"
}

add_line() { #@ Append text to a file
  usage="add_line [FILE] [SEARCH_STRING]"

  #@ Ensure the file exists
  { [ -f "$1" ] && [ "$2" ]; } || {
    [ "$verbosity" -ge 1 ] && printf "%s" "$usage"
    return 1
  }

  #@ Process
  printf "%s\n" "$2" >>"$1"
}

#/> Execution                                       <\

wipe_wallpaper_cache() { #@ Reset wallpaper management
  #@ Delete wallpaper log
  rm --force "$wallpaper_log_path" && __msg__ --reset-log

  #@ Delete wallpaper
  rm --force "$wallpaper_lnk_path" && __msg__ --reset-wp
}

get_wallpaper() { #$
  wallpaper_src_path="$(pathof "$wallpaper_src_path")"

  if [ -d "$wallpaper_src_path" ]; then
    for image in $(find_images "$wallpaper_src_path"); do
      validate_hd_image "$image" && break
    done
  else
    validate_hd_image "$wallpaper_src_path"
  fi

}

log_wallpaper() {

  log_entry() { #@ Return line number of wallpaper in log
    find_line \
      --text "$wallpaper_src_path" \
      --file "$wallpaper_log_path"
  }

  log_entries() { #@ Count the wallpapers listed
    count_lines "$wallpaper_log_path"
  }

  init_log() {
    #@ Skip if wallpaper file given
    [ -f "$wallpaper_src_path" ] && return

    #@ Initialize wallpaper log if missing
    [ -f "$wallpaper_log_path" ] || touch "$wallpaper_log_path"

    #@ Add default wallpaper, if valid but not in the log
    if
      [ "$(pathof "$wallpaper_lnk_path")" != "$wallpaper_lnk_path" ] &&
        [ -f "$wallpaper_lnk_path" ] && [ ! "$wallpaper_src_path" ]
    then
      #@ Set wallpaper as default
      wallpaper="$(pathof "$wallpaper_lnk_path")"
      # __msg__ --log-default
      update
      #@ Update log if existing wallpaper not in it
      [ "$(log_entry)" ] || log__new "$wallpaper_lnk_path"
    fi
  }

  log__new() {
    #@ Exit if file already in log
    [ "$unique" ] && [ "$(log_entry)" ] && return

    #@ Add entry to log
    add_line \
      --text "$wallpaper_src_path" \
      --file "$wallpaper_log_path"
    __msg__ --log
  }

  log__change() {
    #@ Update log

    #@ Initialize log
    init_log

    #@ Display info and exit
    [ "$wallpaper_action" ] || __info__

    #@ Change to previous wallpaper in the log
    [ "$wallpaper_action" = "previous" ] && {
      if [ ! "$(log_entry)" ] || [ "$(log_entries)" -eq 1 ]; then
        [ ! "$(log_entry)" ] && __msg__ --log-empty
        [ "$(log_entries)" -eq 1 ] && __msg__ --one-entry
        wallpaper_src_path="$(awk 'NR==1' "$wallpaper_log_path")"
      elif [ "$(log_entry)" -eq 1 ]; then
        wallpaper_src_path="$(awk -v ln="$(log_entries)" 'NR==ln' "$wallpaper_log_path")"
      else
        wallpaper_src_path="$(awk -v ln="$(log_entry)" 'NR==ln-1' "$wallpaper_log_path")"
      fi
    }

    #@ Generate a new wallpaper or move up in the log
    [ "$wallpaper_action" = "next" ] && {
      if
        [ ! "$(log_entry)" ] ||
          [ "$(log_entry)" -eq "$(log_entries)" ]
      then
        # wallpaper_src_path="$(get_wallpaper)" && log__new
        get_wallpaper "$wallpaper_src_path" && log__new
      else
        wallpaper_src_path="$(awk -v ln="$(log_entry)" 'NR==ln+1' "$wallpaper_log_path")"
      fi
    }
  }

  #@ Generate wallpaper log entry
  # log__change
  init_log

}

set_wallpaper() {
  set_default() {
    #@ Symlink wallpaper to the system default
    ln --symbolic --force "$wallpaper_src_path" "$wallpaper_lnk_path"

    # __msg__ --set-default
  }

  set_lockscreen() {
    #@ Skip is lockscreen not selected
    [ "$lockscreen" ] || return

    #@ Use DOTS_BIN::Lockscreen
    Lockscreen --update

    # __msg__ --set-lockscreen
  }

  update_wallpaper() {
    #@ Set wallpaper based on display protocal
    if [ "$WAYLAND_DISPLAY" ]; then
      weHave swaybg &&
        swaybg --image "$wallpaper_src_path" --mode fill &
    elif [ "$DISPLAY" ]; then
      weHave feh &&
        feh --bg-fill "$wallpaper_src_path" &
    fi

    # __msg__ --set-wallpaper
  }

  #@ Update system default wallpaper
  set_default

  #@ Update locscreen default wallpaper
  set_lockscreen

  #@ Update display wallpaper
  update_wallpaper
}

__info__() {
  #@ Display information about the current wallpaper
  printf "      DIR: %s\nWallpaper: %s\nLog Entry: %s\n" \
    "$WALLPAPERS" "$(pathof "$wallpaper_lnk_path")" "$(log_entry)"

  #@ Display wallpaper log
  bat --style='numbers,changes,grid' "$wallpaper_log_path"

  __cleanup__ --success
}

__msg__() {
  [ "$verbose" ] || return
  success="🟩"
  error="🟥"
  dead="💀"
  icon="$success"c

  case "$1" in
  --log) msg="Wallpaper logged: $(log_entry) => $wallpaper_src_path" ;;
  --log-init) msg="Log initialized" ;;
  --log-default) msg="Addind default wallpaper to log" ;;
  --set-default) msg="Default wallpaper updated" ;;
  --set-wallpaper) msg="Wallpaper updated" ;;
  --log-empty) msg="Unable to set previous wallpaper from log" icon="$error" ;;
  --reset-wp) msg="Default wallpaper deleted" icon="$dead" ;;
  --reset-log) msg="Wallpaper log deleted" icon="$dead" ;;
  *) ;;
  esac

  printf "%s %s\n" "$icon" "$msg"
}

run_process() { #@ Change the wallpaper

  #@ Delete links
  [ "$reset" ] && wipe_wallpaper_cache

  #@ Generate wallpaper
  log_wallpaper

  #@ Update wallpaper
  set_wallpaper

}

__cleanup__() {
  case "$1" in
  --error) exit 1 ;;
  *) exit 0 ;;
  esac
}

dry_run() { #@ Test
  echo "verbosity: $verbosity"
  echo "unique: $unique"
  echo "reset: $reset"
  echo "sorted: $sorted"
  echo "lockscreen: $lockscreen"
  echo "wallpaper_action: $wallpaper_action"
  echo "wallpaper_log_path: $wallpaper_log_path"
  echo "wallpaper_src_path: $wallpaper_src_path"
  echo "wallpaper_lnk_path: $wallpaper_lnk_path"

  # get_wallpaper
  # wipe_wallpaper_cache
  log_wallpaper
}

#/> Sanitization                                    <\

end_process() { #@ Exit application gracefully
  #TODO differentiate between main processes and subproceses. exit for main and return for sub
  case "$1" in
  --error)
    #@ Throw errors based on options
    display_info "${1}"-"${2}" "${3}"

    #@ Set error status code
    error_generated=true
    ;;
  --output) display_info "$1" "$2" ;;
  *) ;;
  esac

  #@ Exit with an error status
  if [ "$error_generated" ]; then
    sanitize_environment && exit 1
  else
    sanitize_environment && exit 0
  fi
}

sanitize_environment() { #@ Remove varibles
  unset \
    verbosity \
    wallpaper_src_path \
    normalized_path \
    wallpaper_src_path \
    next_wallpaper_src_path_component \
    error_generated
}

display_info() { #@ Display infoirmation

  case "$1" in
  --error*)
    [ "$verbosity" = "quiet" ] && return
    case "$1" in
    --error-path) printf "Invalid path: %s" "$2" ;;
    --error-circ) printf "Circular symbolic link: %s" "$2" ;;
    --error-info) printf "Invalid verbosity level: %s" "$2" ;;
    --error-arg) printf "<wallpaper_src_path> required \nUsage: %s\n" "$SCRIPT_USAGE" ;;
    --error-opt) printf "Unrecognized option: %s" "$2" ;;
    --error-cd) printf "Change directory operation failed" ;;
    --reset-log) printf "Change directory operation failed" ;;
    esac
    ;;
  --output)
    case "$verbosity" in
    quiet) ;;
    info) printf "%s\n" "$normalized_path" ;;
    debug)
      printf "    Verbosity: %s\n" "$verbosity"
      printf "  Target Path: %s\n" "$wallpaper_src_path"
      printf "Absolute Path: %s\n" "$normalized_path"
      ;;
    esac
    ;;
  --version)
    printf "%s" "$SCRIPT_VERSION"
    ;;
  --usage)
    cat <<USAGE
Description:
'$SCRIPT_NAME' by $SCRIPT_AUTHOR $SCRIPT_DESCRIPTION

Usage:
$SCRIPT_USAGE

Options:
  -h, --help          Show detailed help information and exit.
  -v, --version       Show the script version number and exit.
  -d, --verbose       Display additional information during execution: quiet, info, debug.
  -q, --quiet         Supress all output. Error flag will still work.
  -u, --unique        Only use each wallpaper once.
  -D, --allow-dups    Allow wallpapers to be repeated.
  -p, --previous      Set the previous wallpaper.
  -n, --next          Set the next wallpaper.
  -a, --archive       Archive the current wallpaper.
  -l, --love          Mark the current wallpaper as a favorite.
  -i, --info          Show info about the current wallpaper.
  -L, --lockscreen    Set the wallpaper for the lock screen.
  -r, --reset         Reset the wallpaper to the system default.
  -w, --wallpaper PATH    Set the wallpaper to the specified file.
  --timed SECONDS     Set the wallpaper to change every SECONDS seconds.

Arguments:
  <PATH>            The path to wallpeper or directory.

Defaults:
  verbosity=info
  unique=true
  wallpaper_action="next"
  wallpaper_log_path="$DOTS_LOG/wallpapers"
  wallpaper_lnk_path="$HOME/.background-image"
  wallpaper_src_path="$WALLPAPERS"
  timer_secs=3600

Exit status:
  0                   The path was successfully normalized.
  1                   An error occurred.

Examples:
  "$SCRIPT_NAME" -d=debug ~/../../usr/bin
  "$SCRIPT_NAME" /var/log/../lib --verbose info
  "$SCRIPT_NAME" /var/run
USAGE
    ;;
  *) printf "%s\n" "$*" ;;
  esac
}

main "$@"
