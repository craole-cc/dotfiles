#!/bin/sh
#shellcheck disable=SC2317

scr_name="goodgood"
scr_version="1"
scr_description="validates variables based on a specified type"
scr_authors="Craole"
scr_usage="$(
  txtBarber "
        Usage: $scr_name [OPTIONS] <VAR>
        Description: $scr_name is a $scr_description

        Options:
          -h, --help          Display this help message
          -v, --version       Display the version of $scr_name
          -d, --verbose       Enable verbose mode
          -q, --quiet         Disable verbose mode
          -t, --type  TYPE    Specify the type to validate against (default: STR)
              --var   VAR     Specify the variable to check (required)

        Arguments:
          TYPE              Types may be INT, CHAR, or FLOAT

        Examples:
          $scr_name --type string --var \"Hello\"
          $scr_name --type integer --var \"123\"
          $scr_name --type float --var \"3.14\"
          $scr_name --type array --var \"one\" \"two\" \"three\"
          $scr_name --type file --var \"test_file.txt\"
          $scr_name --type directory --var \"test_dir\"
          $scr_name --type ip_address --var \"192.168.1.1\"
          $scr_name --type url --var \"http://www.example.com\"
          $scr_name --type regex \"[0-9]{3}-[0-9]{2}-[0-9]{4}\" --var \"123-45-6789\"
          $scr_name --type git_repo --var \"path/to/git/repo\"

        Authors: $scr_authors
        Version: $scr_version
      "
)"

main() {
  parse_arguments "$@"
  execute
  terminate
}

parse_arguments() {
  while [ $# -ge 1 ]; do
    case "$1" in
    -h | --help)
      printf "%s" "$scr_usage"
      exit
      ;;
    -v | --version)
      printf "%s" "$scr_version"
      exit
      ;;
    -d | --verbose)
      verbosity=2
      ;;
    -q | --quiet)
      verbosity=0
      ;;
    --type)
      [ "$2" ] && {
        case "$(printf "%s" "$2" | tr '[:upper:]' '[:lower:]')" in
        int*) type="integer" ;;
        char*) type="character" ;;
        fl*) type="float" ;;
        num*) type="number" ;;
        str*) type="string" ;;
        a*) type="array" ;;
        f*) type="file" ;;
        d*) type="directory" ;;
        i*) type="ip_address" ;;
        u*) type="url" ;;
        r*)
          [ "$3" ] && {
            type="regex"
            regex="$3"
            shift
          }
          ;;
        g*) type="git_repo" ;;
        *)
          printf "Error: Invalid type specified.\n\n%s\n" "$scr_usage"
          exit 1
          ;;
        esac
        shift
      }
      ;;
    --var)
      [ "$2" ] && {
        var="$2"
        shift
      }
      ;;
    *) var="$1" ;;
    esac
    shift
  done

  type="${type:-string}"
  verbosity="${verbosity:-2}"
  exit_code=0
}

execute() {

  is_string() {
    [ -n "$1" ]
  }

  is_character() {
    #/> Printable characters, including whitespace
    # case $1 in
    # [[:print:]]) return 0 ;;
    # *) return 1 ;;
    # esac

    [ ${#var} -eq 1 ] || return 1
  }

  is_integer() {
    if [ "$1" -eq "$1" ] 2>/dev/null; then
      return 0
    else
      return 1
    fi
  }

  is_float() {
    if type python >/dev/null 2>&1; then
      python -c "import sys; value = sys.argv[1]; exit(1) if not (value.replace('.', '', 1).isdigit() or (value.startswith('-') and value[1:].replace('.', '', 1).isdigit())) else exit(0)" "$1"
    fi
  }

  is_number() {
    is_integer "$1" || is_float "$1" || return 1
  }

  is_array() {
    [ $# -gt 0 ]
    #TODO: Not sure if it works

    # [ "${#var[@]}" -gt 0 ]
    #TODO: Not POSIX-compliant
  }

  is_file() {
    [ -f "$1" ]
  }

  is_directory() {
    [ -d "$1" ]
  }

  is_ip_address() {
    if printf "%s" "$1" | grep -E -q '^([0-9]{1,3}\.){3}[0-9]{1,3}$'; then
      return 0
    else
      return 1
    fi
  }

  is_url() {
    printf "%s" "$1" |
      grep --extended-regexp --quiet '^(http|https|ftp|sftp)://'
  }

  is_regex() {
    printf "%s" "$1" | grep --extended-regexp --quiet "$2"
  }

  is_git_repo() {
    [ -d "$1/.git" ] && git -C "$1" rev-parse --is-inside-work-tree >/dev/null 2>&1
  }

  #@ Validate the specified variable based on the chosen type
  case "$type" in
  regex)
    if is_regex "$var" "$regex" s; then
      msg="Success - $var matches the regex pattern."
    else
      msg="Failed - $var does not match the regex pattern."
      exit_code=1
    fi
    ;;
  *)
    if eval "is_${type} \"$var\""; then
      msg="Success - $var is a valid $type."
    else
      msg="Failed - $var is not a valid $type."
      exit_code=1
    fi
    ;;
  esac
}

terminate() {
  #@ Display output based on verbosity level
  case "$verbosity" in
  0) ;;
  1)
    printf "%s\n" "$var"
    ;;
  *)
    printf "  VAR: %s\n" "$var"
    [ "$regex" ] &&
      printf "REGEX: %s\n" "$regex"
    printf " TYPE: %s\n" "$type"
    printf " CODE: %s\n" "$exit_code"
    printf "  MSG: %s\n" "$msg"
    ;;
  esac

  #@ Exit with the specified exit code
  exit "$exit_code"
}

main "$@"
