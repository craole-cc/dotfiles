#!/bin/sh
# shellcheck disable=SC1003

scr_name="path_convert"
scr_usage=$(
  cat <<HELP
USAGE:
  $scr_name [OPTIONS] [STRING]

DESCRIPTION:
  Convert paths between Windows and Unix.

OPTIONS:
  -h, --help            Display this help message
  -d, --verbose         Display detailed information
  -p, --prefix PREFIX   Allow a prefix (eg /mnt)
  -c, --clip            Copy to system clipboard

ARGUMENTS:
  STRING                The path to convert

EXAMPLES:
    $scr_name -p mnt "C:\Users\USERNAME\Path to Convert"
    Result|> /mnt/c/Users/USERNAME/Path\ to\ Convert/
    Result|> "/mnt/c/Users/USERNAME/Path to Convert/"

    $scr_name /mnt/c/Users/John
    Result|> C:\Users\John

    $scr_name "C:\Users\Username" --prefix mnt
    Result|> /mnt/c/Users/John

    $scr_name "C:\Users\John" --clip
    Result|> Copied to clipboard: /c/Users/John
HELP
)

main() {
  purge_env
  parse_input "$@"
  parse_output
  exit "$exit_code"
}

purge_env() {
  exit_code=0
  verbosity=1
  unset path path_type clip verbose
}

parse_input() {
  purge_env

  while [ $# -gt 0 ]; do
    case "$1" in
    -h | --help)
      print_help
      exit
      ;;
    -d | --verbose)
      verbosity=2
      ;;
    -p | --prefix)
      input_prefix="$2"
      shift
      ;;
    -c | --clip)
      clip=true
      ;;
    -q | --quiet)
      verbosity=0
      ;;
    *)
      if [ "$1" ]; then
        input_path="$1"
        input_path_type="$(get_path_type "$input_path")"
      else
        printf "%s\n" "$scr_usage"
        exit 1
      fi
      ;;
    esac
    shift
  done
}

get_clean_path() {
  #@ Parse path from arguments
  get_clean_path="$1"

  #@ Convert backslashes to forward slashes
  case "$get_clean_path" in *\\*)
    get_clean_path="$(printf "%s" "$get_clean_path" | tr '\\' '/')"
    ;;
  esac

  #@ Convert duplicated slashes to single
  case "$get_clean_path" in *//*)
    get_clean_path="$(printf "%s" "$get_clean_path" | tr -s "/")"
    ;;
  esac

  # Remove the trailing slash, if one exists
  if [ "${#get_clean_path}" -gt 1 ]; then
    get_clean_path="${get_clean_path%/}"
  fi

  #@ Remove the leading slash, if one exists (eg. /C:/ = C:/)
  # get_clean_path="${get_clean_path#/}"

  # #@ Check for Windows path then default to Unix
  # case "$(get_path_type "$get_clean_path")" in
  # Windows)
  #   #@ Add a trailing slash if the path ends with colon (eg. C: = C:/)
  #   [ "${get_clean_path#"${get_clean_path%?}"}" = ":" ] &&
  #     get_clean_path="${get_clean_path}/"
  #   ;;
  # Unix)
  #   #@ Add a leading slash, if missing (eg. mnt/... = /mnt/...)
  #   [ "${get_clean_path#/}" = "$get_clean_path" ] &&
  #     get_clean_path="/$get_clean_path"
  #   ;;
  # esac

  printf "%s" "$get_clean_path"
}

get_path_type() {
  case $1 in
  *:*) printf "Windows" ;;
  *) printf "Unix" ;;
  esac
}

get_path_tld() {
  set -- "$(get_clean_path "$1")"
  printf "%s" "${1%%/*}"
}

parse_path() {
  parse_path__main() {
    parse_path__env "$@"

    printf "SOURCE: %s\n" "$source_path"
    printf "FORMAT: %s\n" "$source_path_format"
    [ "$parsed_root" ] &&
      printf "ROOT: %s\n" "$(get_to_the_root)"

  }

  parse_path__env() {
    while [ $# -gt 0 ]; do
      case $1 in
      --root) parsed_root=true ;;
      *)
        if [ "$1" ]; then
          source_path="$(get_clean_path "$1")"
        else
          printf "Missing path to parse\n"
          return 1
        fi
        ;;
      esac
      shift
    done

    #@ Set the path format
    case "$source_path" in
    [a-zA-Z]:*) source_path_format="Windows" ;;
    *) source_path_format="Unix" ;;
    esac

    #@ Split the path by separators "/"
    [ "$source_path" = "/" ] || {
      IFS="/" set -f
      set -- "$source_path"
      IFS="/"
    }
  }

  get_to_the_root() {
    [ "$source_path_format" = "Windows" ] && {
      printf "Windows to Unix: %s\n" "$source_path"
    }

    [ "$source_path_format" = "Unix" ] && {
      # printf "Unix to Windows: %s\n" "$source_path"
      for dir in $source_path; do
        if [ -n "$dir" ] && [ ${#dir} -eq 1 ]; then
          printf "%s\n" "$dir"
          break
        fi
      done

      # If th path doesn't have a single dir then default to root
    }

    # case "$source_path" in
    # /)
    #   if [ "$target_path_format" = "Windows" ]; then
    #     printf "Windows: %s\n" "$(get_path_root "$source_path")"
    #   else
    #     printf "Unix: %s\n" "$source_path"
    #   fi
    #   ;;
    # *) ;;
    # esac
  }
  parse_path__main "$@"
}

#   get_to_the_root() {
#     for dir in $( # Iterate over each directory
#       dirname "$path_to_parse"
#     ); do
#       if [ -n "$dir" ] && [ ${#dir} -eq 1 ]; then
#         printf "%s\n" "$dir"
#         break
#       fi
#     done

#     # path_root_sys="$(get_path_root "/")"
#     # path_stem="$(get_path_tld "$path")"

#     # if [ -e "$path_root/$path_stem" ]; then
#     #   path="${path_root}/${path}"
#     # else

#     case "$path_to_parse" in
#     /home/*)
#       path_to_parse="$(dirname "$HOME")/${path_to_parse#/home/}"
#       printf "%s\n" "$path_to_parse"
#       ;;

#     esac

#     # #@ Extract the root directory (e.g. C: or C:/Users)
#     # for dir in $path; do
#     #   if [ -n "$dir" ] && [ ${#dir} -eq 1 ]; then
#     #     path_root="$dir"
#     #     break
#     #   fi
#     # done

#     # [ "$path_root" ] ||
#     #   case "$(get_clean_path "$path")" in
#     #   home/*)
#     #     path_root="$(
#     #       get_path_root --win "$(dirname "$HOME")"
#     #     )"
#     #     # get_path_root --win "$HOME" && {
#     #     #   path_root="$(dirname "$HOME")"
#     #     #   drive_letter="$(get_path_tld "$win_home_dir")"
#     #     # }

#     #     # drive_letter="$path_root/${path#*home/}"
#     #     ;;
#     #   # *) drive_letter="$path" ;;
#     #   esac
#   }

#   parse_path__env "$@"
#   # [ "$parsed_root" ] && get_to_the_root

get_path_root() {
  case $1 in
  --win)
    if cd "$2" >/dev/null 2>&1; then
      [ "$(get_path_type "$(pwd -W)")" = Windows ] &&
        pwd -W
    else
      echo "Invalid path"
      return 1
    fi
    ;;
  --unix) cd "$2" && pwd ;;
  *) cd "$1" && pwd -W ;;
  esac
}

validate_path() {
  #@ Reset variables
  unset quiet path_type

  #@ Parse the path input
  while [ $# -gt 0 ]; do
    case "$1" in
    -q | --quiet) quiet=true ;;
    -w | --win*) path_type="Windows" ;;
    -u | --unix) path_type="Unix" ;;
    *)
      #@ Check if the path is empty
      if [ "$1" ]; then
        path="$(get_clean_path "$1")"
      else
        msg="Missing path string"
        exit_code=1
        return "$exit_code"
      fi
      ;;
    esac
    shift
  done

  #@ Check for Windows path then default to Unix
  case "${path_type:-$(get_path_type "$path")}" in
  Windows)
    #@ Validate the Windows path
    case "$path" in
    [A-Za-z]:*)
      #@ Add a trailing slash if the path ends with colon (eg. C: = C:/)
      [ "${path#"${path%?}"}" = ":" ] && path="${path}/"
      ;;
    *)
      #@ Extract the drive letter (e.g., C)
      drive=${path%%:*}

      #@ Validate the drive letter (e.g., C)
      if [ "$drive" ]; then
        if [ "${#drive}" -ne 1 ]; then
          err="Invalid drive letter length"
        elif ! printf "%s" "$drive" |
          grep --extended-regexp --quiet "'^[A-Za-z]$'"; then
          err="Invalid drive letter"
        fi
        msg="$(printf "%s |> %s" "$err" "$path" | grep --color=always "$drive")"
      else
        msg="$(printf "Missing drive letter |> %s" "$path")"
      fi

      # #@ Return an error message and exit code
      # [ "$quiet" ] || printf "%s" "$msg"
      exit_code=1
      ;;
    esac
    ;;
  Unix)
    #@ Validate the Windows path
    #TODO Implement error checking logic.
    # err="Unix path"
    # printf "%s" "$err"
    # return 1
    ;;
  esac

  #@ Return an error message or valid path
  [ "$quiet" ] || printf "%s" "${msg:-$path}"
  return "$exit_code"
}

convert_path() {
  path="$1"
  path_type="$input_path_type"
  prefix="$input_prefix"

  based_on_type() {
    case "$path_type" in
    Windows) to_unix ;;
    Unix) to_windows ;;
    esac
  }

  to_windows() {
    parse_path_win() {
      #@ Split the path by separators "/"
      IFS="/" set -f
      set -- "$path"
      IFS="/"

      #@ Extract the root directory (e.g. C: or C:/Users)
      for dir in $path; do
        if [ -n "$dir" ] && [ ${#dir} -eq 1 ]; then
          path_root="$dir"
          break
        fi
      done

      [ "$path_root" ] ||
        case "$(get_clean_path "$path")" in
        home/*)
          path_root="$(
            get_path_root --win "$(dirname "$HOME")"
          )"
          # get_path_root --win "$HOME" && {
          #   path_root="$(dirname "$HOME")"
          #   drive_letter="$(get_path_tld "$win_home_dir")"
          # }

          # drive_letter="$path_root/${path#*home/}"
          ;;
        # *) drive_letter="$path" ;;
        esac
    }

    get_drive_letter
    path="$path_root"
    return
    # #@ Extract everything before the drive letter as mountpoint
    # unset found_drive_letter
    # for dir in $path; do
    #   if [ -z "$found_drive_letter" ]; then
    #     if [ "$dir" = "$drive_letter" ]; then
    #       found_drive_letter=true
    #     else
    #       mountpoint="$mountpoint/$dir"
    #     fi
    #   else
    #     break
    #   fi
    # done
    # mountpoint="${mountpoint}/"

    #@ Extract everything after the drive letter as remaining_path
    unset found_drive_letter
    for dir in $path; do
      if [ -z "$found_drive_letter" ]; then
        if [ "$dir" = "$drive_letter" ]; then
          found_drive_letter=true
        fi
      else
        remaining_path="$remaining_path/$dir"
      fi
    done

    drive="$(
      printf "%s:" "$drive_letter" |
        tr '[:lower:]' '[:upper:]'
    )"
    path="${drive}${remaining_path}"
  }

  to_unix() {
    #@ Update path info
    path="$(get_clean_path "$path")"
    path_root="$(get_path_root --win "/")"
    path_stem="$(get_path_tld "$path")"

    if [ -e "$path_root/$path_stem" ]; then
      path="${path_root}/${path}"
    else
      #@ Set the path root as the user's home directory
      case "$path" in
      home/* | *:/home/*)
        path_root="$(get_path_root "$HOME")"
        path="$path_root/${path#*home/}"
        ;;
      *)
        # # path="$path_root${path}"
        # path="C:/${path}"
        path="$(get_clean_path "$path")"

        # Extract the drive (e.g. c: from /c:/)
        drive="$(get_path_tld "$path")"

        # Extract the drive letter (e.g. c from c:)
        drive_letter="$(
          printf "%s" "${drive%:}" | tr '[:upper:]' '[:lower:]'
        )"

        # Update the path and include a leading slash
        path="${drive_letter}${path#"${drive}"}"

        # Update the path with the prefix
        prefix="/$(get_clean_path "${prefix:-mnt}")"
        path="${prefix}/${path}"
        ;;
      esac
    fi
  }

  #@ Convert the path
  based_on_type

  #@ Return the converted path
  printf "%s" "$path"
}

parse_output() {
  if validate_path --quiet "$input_path"; then
    output_path="$(convert_path "$input_path")"
    output_path_type="$(get_path_type "$output_path")"
  else
    output_path="$(validate_path "$input_path")"
    output_path_type="$input_path_type"
  fi

  case "$verbosity" in
  0) ;;
  1) ;;
  *)
    printf "Input Path   |> %s\n" "$input_path"
    printf "Input Type   |> %s\n" "$input_path_type"
    [ "$input_prefix" ] && printf "Input Prefix |> %s\n" "$input_prefix"
    printf "Output Path  |> %s\n" "$output_path"
    printf "Output Type  |> %s\n" "$output_path_type"
    [ "$exit_code" -gt 0 ] && printf "Exit Code    |> %s\n" "$exit_code"
    [ "$check_type" ] && printf "Check Type   |> %s\n" "$check_type"
    ;;
  esac

  [ "$clip" ] && send_to_clipboard "$path"

  # printf "\n"
  # ls -lAFh "$output_path"
  # printf "\n"
}

print_usage() {
  printf "%s\n" "$scr_usage"
}

send_to_clipboard() {
  path="$1"
  type | grep -iq "win" # Check if running on Windows
  if [ $? -eq 0 ]; then
    printf '%s' "$path" | clip
  else
    printf '%s' "$path" | xclip -selection clipboard
  fi
  printf "Path copied to clipboard.\n"
}

set -- \
  --verbose \
  "/home/john/ssh" \
  --prefix "///mnt"

# main "$@"
parse_path --root /mnt/pop/c/ad
