#!/bin/sh
SCR_PATH=$(realpath "$0")
SCR_NAME=$(basename "$SCR_PATH")
SCR_AUTHOR="craole"
SCR_DESCRIPTION="Run scripts via different means of transport."
SCR_VERSION="1.0"

display_help() {

  #@ Print usage information
  display_messaging \
    --trim \
    --msg \
    "                    --{ $SCR_NAME [v.$SCR_VERSION] }--
    Description:
      $SCR_DESCRIPTION

    Usage: $SCR_NAME [OPTIONS...] [SCRIPT]

    Options:
      -h, --help        Display this help message
      -v, --version     Display script version
      -r, --rust        Execute using Rust script
      -c, --cargo       Execute using Cargo run
      -s, --shell       Execute using POSIX shell

    Authors: $SCR_AUTHOR"

  #@ Exit script with assigned exit code
  exit_gracefully
}

parse_arguments() {
  #@ Set defaults
  ducta="sh"

  #@ Ensure a script or binary is provided, unless for cargo
  [ "$#" -eq 0 ] && handle_error "Nothing to transport"

  #@ Parse main cli arguments
  while [ $# -ge 1 ]; do
    case "$1" in
    -h | --help) display_help ;;
    -v | --version) display_version ;;
    -r | --rust)
      ducta="rust-script"
      ;;
    -s | --shell) ;;
    -*) handle_error "Invalid option: $1" ;;
    *) ;;
    esac
    shift
  done
}

display_messaging() {
  #@ Initialize variables
  msg="$*"
  unset newline trim

  #@ Parse arguments
  while [ $# -ge 1 ]; do
    case "$1" in
    -t | --trim) trim=true ;;
    -n | --new-line) newline=true ;;
    -m | --msg) msg="$2" ;;
    -*) shift ;;
    *) msg="$*" ;;
    esac
    shift
  done

  #@ Print message
  if [ "$trim" ]; then
    #@ Trim whitespace at the start (3 spaces)
    printf "%s\n" "$msg" | sed 's/^   //'
  else
    #@ Normal print
    printf "%s\n" "$msg"
  fi

  #@ Print a newline, if selected
  [ "$newline" ] && printf "\n"
}

handle_error() {
  display_messaging --new-line "Error: $*"
  exit_with_error=true
  display_help
}

display_version() {
  display_messaging "$SCR_VERSION"
  exit_gracefully
}

transport_cargo() {
  #@ Execute scripts
  while [ "$#" -ge 1 ]; do
    case $1 in
    -*) ;;
    *)
        "$ducta" -- "$1"
      # if [ -f "$1" ]; then
      #   "$ducta" -- "$1"
      # else
      #   handle_error "Illegal item for transport:" "$1"
      # fi
      ;;
    esac
    shift
  done
}

exit_gracefully() {
  if [ "$exit_with_error" ]; then
    exit 1
  else
    exit 0
  fi
}

main() {
  parse_arguments "$@"
  transport_cargo "$@"
} && main "$@"
