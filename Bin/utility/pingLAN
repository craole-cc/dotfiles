#!/bin/sh
scr_PATH="$(PathOf "$0")"
scr_NAME="$(basename "$scr_PATH")"
scr_DIR="$(dirname "$scr_PATH")"
scr_VERSION="1.0"
scr_DESCRIPTION="finds active LAN hosts on the specified interface"
scr_DEPENDENCIES="coreutils (printf, grep, awk, sed, ping), ifconfig"
scr_USAGE="$(
  cat <<USAGE_GUIDE
    ::----------------------------------------------------::
                        USAGE: $scr_NAME
        $scr_DESCRIPTION
    ::----------------------------------------------------::
        $scr_NAME INTERFACE [FIRST_HOST] [LAST_HOST]
                >>> $scr_NAME 192 1 254 <<<
    ::----------------------------------------------------::
        -h --help      |>   Usage guide
        -v --version   |>   Version
        -t --test      |>   Detailed app info
    ::----------------------------------------------------::
      INTERFACE  -> The network interface to use.
      FIRST_HOST -> Start of the host ID range. Default: 1.
      LAST_HOST  -> End of the host ID range. Default: 254.
    ::----------------------------------------------------::
USAGE_GUIDE
)"

parse_arguments() {
  #@ Ensure that an interface is specified
  [ "$#" -ge 1 ] || {
    printf "%s" "$scr_USAGE"
    exit 1
  }

  #@ Parse the network ID using ifconfig and grep
  network_id="$(
    #@ Get network configuration
    ifconfig |
      #@ Filter the network configuration for the specified interface
      grep "$1" |
      #@ Extract the IP address from the filtered network configuration
      awk '{print $2}' |
      #@ Extract the first three octets of the IP address
      awk -F. '{print $1"."$2"."$3}'
  )"

  #@ Parse the first Host ID for the sequence
  if validate_host_range "$2"; then
    first_host=$2
  else
    first_host=1
  fi

  #@ Parse the last Host ID for the sequence
  if validate_host_range "$3"; then
    last_host="$3"

    #@ Flip hosts, if necessary
    [ "$first_host" -gt "$last_host" ] && {
      last_host="$first_host"
      first_host="$3"
    }
  else
    last_host=254
  fi

  #@ Parse a sequence of hosts
  hosts="$(
    #@ Generate a sequence of numbers from first_host to last_host
    seq "$first_host" "$last_host" |
      #@ Prefix each number with the network ID and a dot
      sed "s|^|${network_id}.|"
  )"

  #@ Check for flag
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -h | --help)
      printf "%s" "$scr_USAGE"
      exit 0
      ;;
    -t | --test | --dry-run)
      #@ Print the range of hosts and exit if the test flag is set
      printf "Hosts to ping: %s.%s -> %s.%s" \
        "${network_id}" "${first_host}" \
        "${network_id}" "${last_host}"
      # printf "%s" "$hosts"
      exit 0
      ;;
    esac
    shift
  done
}

validate_host_range() {
  #@ Reject empty or non-numeric characters
  case $1 in
  '' | *[!0-9]*)
    return 1
    ;;
  *) #@ Reject if the argument is out of range
    { [ "$1" -ge 1 ] && [ "$1" -le 254 ]; } ||
      return 1 ;;
  esac
}

validate_connectivity() {
  #@ Ping the specified host once with a timeout of 1 second
  if ping "$1" -c1 -W1 >/dev/null 2>&1; then
    #@ Print the IP address on a successful ping
    printf "%s\n" "$1"
  fi
}

process_core() {
  #@ Loop through each host in the sequence
  for host in $hosts; do
    #@ Validate connectivity to the host
    validate_connectivity "$host"
  done
}

point_of_entry() {
  parse_arguments "$@" #@ Parse command-line arguments
  process_core "$@"    #@ Process the hosts in the sequence
}

point_of_entry "$@" #@ Execute script with the command-line arguments
