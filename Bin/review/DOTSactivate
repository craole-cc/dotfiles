#!/bin/sh
# shellcheck disable=SC2153,SC1091
#> DOTSactivate_                                                             <#
#DOC => Download, update and activate dotfiles (variables, scripts, & config)
VERSION="1.0"

#@ Usage Guide                                                                |
__help__() {
  printf "
                    📓 USAGE
        Dowload, update and activate dotfiles
\n▶ -------------------------------------------------- ◀
    -h --help      Usage guide
    -v --version   Display script version number
    -r --reset     Delete existing dotfiles
    -u --update    Download from the online repo
    [ default ]    Activate (update, if necessary)
\n▶ -------------------------------------------------- ◀
                  :::Examples:::
  |>     DOTS=\"DOTS_directory\" . DOTSactivate     <|
  |>   DOTSactivate --reset \"\$DOTS\" \"\$DOTS_REPO\"   <|
\n"
}

#@ Version                                                                    |
__version__() {
  [ "$_VERSION" ] &&
    printf "%s$VERSION\n"
}

#@ Error Handling                                                             |
__error__() {
  case "$*" in
  *destination*)
    msg="💀 Destination not declared ♻ \"DOTS\""
    ;;
  *source*)
    msg="❌ Source not declared ♻ \"DOTS_REPO\""
    ;;
  *bare*)
    msg="🔥 This action would torch the bare repo."
    ;;
  *root*)
    msg="😱 Attempt made by root user"
    ;;
  *folder*)
    msg="😱 DOTS folder doesn't exist"
    ;;
  *config*)
    msg="😱 DOTS config missing"
    ;;
  *) ;;
  esac

  log="$(date +'%Y-%m-%dT%H:%M:%S%z')"
  printf "%s\n[$log]: $msg\n" >&2
  __help__
  exit 1
}

#@ Safety Checks                                                              |
#| Check if DOTS variable is set
__check_vars__() {
  if [ -n "$DOTS" ]; then
    _DOTS="$DOTS"
  elif [ -n "$1" ]; then
    _DOTS="$1"
  else
    __error__ "destination not declared"
  fi

echo "$DOTS_REPO"
  if [ -n "$DOTS_REPO" ]; then
    _DOTS_REPO="$DOTS_REPO"
  elif [ -n "$2" ]; then
    _DOTS_REPO="$2"
  else
    __error__ "source not declared"
  fi

  if [ -n "$DOTS_CONFIG" ]; then
    _DOTS_CONFIG="$DOTS_CONFIG"
  elif [ -n "$2" ]; then
    _DOTS_CONFIG="$2"
  else
    __error__ "Config not declared"
  fi
}

__check_config__() {
  if [ "$DOTS_CONFIG" != "" ]; then
    _DOTS_CONFIG="$DOTS_CONFIG"
  else
    _DOTS_CONFIG="$_DOTS/.config"
  fi

  [ -d "$_DOTS" ] || __error__ "folder missing"
  [ -f "$_DOTS_CONFIG" ] || __error__ "config missing"

}

#| Check if repo is bare
__check_if_bare__() {
  if [ "$(HOSTNAME)" = "CRAOLE-LATE6430" ] &&
    [ -d "$*/Log" ]; then
    __error__ "inside bare repo"
  fi
}

#| Check if user is root
__check_if_root__() {
  # shellcheck disable=SC3000-SC4000
  if [ "${EUID:-$(id -u)}" -eq 0 ]; then
    __error__ "root user"
  fi
}

#@ Remove existing                                                            |
__drop__() {
  #| Run safety checks
  __check_destination__ "$@" || exit 1
  __check_if_bare__ "$@" || exit 1

  #| Delete the DOTS
  #| Use elevated privalages if not on Windows
  case "$(uname --all | tr '[:upper:]' '[:lower:]')" in
  *windows* | *nt*)
    rm --recursive --force "$_DOTS"
    ;;
  *)
    su -c "rm --recursive --force $_DOTS"
    ;;
  esac

  # }

}

#@ Pull from Git Repo                                                         |
__pull__() {

  #| Run safety checks
  __check_if_root__ || exit 1
  __check_destination__ "$@" || exit 1
  __check_source__ "$@" || exit 1
  __check_if_bare__ "$_DOTS" || exit 1

  if [ -d "$_DOTS" ]; then
    _ACTION="pull"
  else
    _ACTION="clone"
    mkdir --parents "$_DOTS"
  fi

  cd "$_DOTS" || return 1
  [ "$_ACTION" = "pull" ] && git pull "$_DOTS_REPO"
  [ "$_ACTION" = "clone" ] && git clone "$_DOTS_REPO" .

  cd "$OLDDIR" || return 1
}

#@ Activate DOTS                                                              |
__activate__() { #| Activate the DOTS

  #| Run safety checks
  __check_vars__ "$@"
  __check_config__ "$@"

  #| Validate DOTS, source as necessary.
  [ -d "$_DOTS" ] || echo "DOTS not Found" #__pull__ "$@"

  #| Check if DOTS variable is set
  # if [ "$DOTS" = "" ]; then
  #   printf "💀 DOTS variable not set.\n"
  #   __help__
  #   return 1
  # fi

  # [ -d "$DOTS" ] && . "$DOTS/.config"
  # if [ ! -d "$_DOTS" ]; then
  #   __error__ "DOTS folder missing"
  # elif [ ! -f "$_DOTS/.config" ]; then
  #   __error__ "DOTS config missing"
  # else
  #   . "$_DOTS/.config"
  # fi

}

__main__() {
  echo "HELP: $_HELP"
  echo "VERSION: $_VERSION"
  echo "RESET: $_RESET"
  echo "PULL: $_PULL"
echo "ALL: $*"
echo "1: $1"
__check_vars__
  # [ "$_HELP" ] && __help__       #| Usage guide
  # [ "$_VERSION" ] && __version__ #| Version number
  # [ "$_RESET" ] && __drop__ "$@" #| Delete existing DOTS
  # [ "$_PULL" ] && __pull__ "$@"  #| Download from repo
  # __activate__ "$*"              #| Activate the DOTS
}

#| GUI Options

case $1 in
-v | --version)
  _VERSION=true
  ;;
-h | --help)
  shift
  _HELP=true
  ;;
-r | --reset)
  shift
  _RESET=true
  _UPDATE=true
  ;;
-u | --update)
  shift
  _UPDATE=true
  ;;
*) ;;
esac

#| Execute
# __main__ "$@"

echo "
ENV_HOME: $ENV_HOME
DOTS: $DOTS
DOTS_REPO: $DOTS_REPO
DOTS_CONFIG: $DOTS_CONFIG
"
