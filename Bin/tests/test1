#!/bin/sh

scr_usage=$(
  cat <<EOF
[SCRIPT NAME]
path_convert

[SCRIPT DESCRIPTION]
Determine the given PATH INPUT and convert it. If the path is a Windows path convert it to a Linux path and vice versa

[PATH INPUT]
C:\\Users\\Administrator\\.dots\\Admin\\Other\\Resources\\Home\\init

[PATH OUTPUT]
/c/Users/Administrator/.dots/Admin/Other/Resources/Home/init (default)
/mnt/c/Users/Administrator/.dots/Admin/Other/Resources/Home/init (with prefix)

OPTIONS:
- Allow a prefix via option \`-p | --prefix\`  (eg /mnt)
- Allow copying to clipboard via option \`-c | --clip*\` option using \`clip\` windows utility
EOF
)

# Function to convert Windows path to Linux path
win2tux() {
  path="$1"
  path=${path#?}                             # Remove the drive letter and colon
  path=$(printf "/%s" "$path" | tr '\\' '/') # Replace backslashes with forward slashes
  printf '%s\n' "$path"
}

# Function to convert Linux path to Windows path
tux2win() {
  path="$1"
  path=${path#?}                                               # Remove the leading forward slash
  drive=$(printf '%s' "$path" | cut -d '/' -f 2)               # Extract the drive letter (e.g., c)
  drive=$(printf '%s\n' "$drive" | tr '[:lower:]' '[:upper:]') # Convert the drive letter to uppercase
  path=$(printf '%s' "$path" | cut -d '/' -f 3-)               # Remove the drive part from the path
  path=$(printf '%s' "$path" | tr '/' '\\')                    # Replace forward slashes with backslashes
  printf '%s:%s\n' "$drive" "$path"
}

# Function to determine the type of path (Windows or Unix)
determine_path_type() {
  case "$1" in
  *[\\]*) printf "windows" ;;
  *) printf "unix" ;;
  esac
}

# Function to send the path to clipboard
send_to_clipboard() {
  path="$1"
  type | grep -iq "win" # Check if running on Windows
  if [ $? -eq 0 ]; then
    printf '%s' "$path" | clip
  else
    printf '%s' "$path" | xclip -selection clipboard
  fi
  printf "Path copied to clipboard.\n"
}

# Function to parse arguments
parse_arguments() {
  prefix="/mnt" # Default prefix
  copy_to_clipboard=false

  while [ $# -gt 0 ]; do
    case "$1" in
    -p | --prefix)
      shift
      if [ $# -eq 0 ]; then
        printf "Error: Prefix not provided.\n"
        exit 1
      fi
      prefix="$1"
      ;;
    -c | --clip*)
      copy_to_clipboard=true
      ;;
    *)
      path="$1"
      # printf "Error: Unknown option '$1'\n"
      # exit 1
      ;;
    esac
    shift
  done

  if [ "$copy_to_clipboard" = true ]; then
    path=$(cat) # Read the path from stdin
  else
    path="$1"
  fi

  # If a prefix is provided, add it to the path
  if [ "$prefix" != "" ]; then
    case "$(determine_path_type "$path")" in
    windows)
      path="$prefix$path"
      ;;
    unix)
      path="${path#$prefix}" # Remove the prefix if already present
      path="$prefix$path"
      ;;
    esac
  fi

  # Convert the path based on the OS type
  case "$(determine_path_type "$path")" in
  windows)
    path=$(win2tux "$path")
    ;;
  unix)
    path=$(tux2win "$path")
    ;;
  esac

  printf '%s\n' "$path"

  if [ "$copy_to_clipboard" = true ]; then
    send_to_clipboard "$path"
  fi
}

parse_arguments "$@"
