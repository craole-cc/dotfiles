#!/bin/sh

establish_environment() {
  #@ Establish script information
  scr_name="$get_os_shell"
  scr_version="1.0"
  scr_usage="$(
    printf "Usage: %s [OPTIONS]\n" "$scr_name"
    printf "Options:\n"
    printf "  -h, --help      Display this help message\n"
    printf "  -v, --version   Display script version\n"
    printf "  -d, --verbose   Enable detailed messaging\n"
  )"

  #@ Set default values
  label="OS Shell"
  verbosity=0
  exit_code=0
  dud="Unknown"
  unset info_source output

  #@ Establish utility functions
  initialize_utilities
  get_os_type >/dev/null  2>&1
}

initialize_utilities() {
  weHave() {
    #@ Check if the info_source is available
    info_source="$1"

    if command -v "$info_source" >/dev/null 2>&1; then
      return 0
    elif [ -f "$info_source" ]; then
      return 0
    else
      unset info_source
      return 1
    fi
  }

  present_info() {
    while [ "$#" -gt 0 ]; do
      case "$1" in
      -h | --help)
        if [ "$2" ]; then
          output="$(printf "%s\n%s\n" "$2" "$scr_usage")"
          shift
        else
          output="$scr_usage"
        fi
        ;;
      -v | --version)
        output="$scr_version"
        ;;
      *) output="$1" ;;
      esac

      #@ Print the output
      if [ "$verbosity" -gt 0 ]; then
        if [ "$info_source" ]; then
          printf "%s via %s: %s\n" "$label" "$info_source" "$output"
        else
          printf "%s: %s" "$label" "$output"
        fi
      else
        printf "%s" "$output"
      fi

      #@ Continue to the next argument
      shift
    done
  }

  get_via_ps() {
    weHave ps || return 1

    ps_output="$(ps)"

    extract_process_name() {
      #@ Use awk to extract the process name
      printf "%s" "$1" |
        awk '/bash|dash|nu|zsh|fish|tcsh|ksh|sh/ {print $NF}'
    }

    extract_linux_process_name() {
      last_line_process_name=$(
        extract_process_name "$(
          printf "%s" "$ps_output" | tail -n 1
        )"
      )

      if [ -n "$last_line_process_name" ]; then
        info="$last_line_process_name"
      else
        # If not found in the last line, check the previous line
        prev_line_process_name=$(
          extract_process_name "$(
            printf "%s" "$ps_output" | tail -n 3 | head -n 1
          )"
        )

        if [ -n "$prev_line_process_name" ]; then
          info="$prev_line_process_name"
        fi
      fi
    }

    extract_windows_process_name() {
      # Extract the process name from the first line
      first_line_process_name=$(
        extract_process_name "$(
          printf "%s" "$ps_output" | head -n 1
        )"
      )

      if [ -n "$first_line_process_name" ]; then
        info="$first_line_process_name"
      else
        # If not found in the first line, check the second line
        second_line_process_name=$(
          extract_process_name "$(
            printf "%s" "$ps_output" | sed --quiet '2p'
          )"
        )

        if [ -n "$second_line_process_name" ]; then
          info="$second_line_process_name"
        fi
      fi
    }

    case $(get_os_type | tr '[:upper:]' '[:lower:]') in
    *linux*) extract_linux_process_name ;;
    *windows*) extract_windows_process_name ;;
    esac

    if [ "$info" ]; then
      info="$(command -v "$(basename "$info")")"
    else
      return 1
    fi
  }
}

process_info() {
  get_via_ps || exit_code=1

  present_info "${info:-$dud}"
}

main() {
  #@ Initialize the script environment
  establish_environment

  #@ Parse the arguments
  while [ "$#" -gt 0 ]; do
    case $1 in
    -d | --verbose)
      verbosity=1
      ;;
    -h | --help | -v | --version)
      present_info "$1"
      return 0
      ;;
    *)
      present_info --help "Unknown option: $1"
      return 1
      ;;
    esac
    shift
  done

  #@ Retrieve the requested information
  process_info

  #@ Terminate the script with the appropriate exit code
  return "$exit_code"
}

main "$@"
