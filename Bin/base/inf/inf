#!/bin/sh

point_of_entry() {
  prepare_environment
  prepare_tests
  parse_arguments "$@"
  # point_of_exit
}

parse_arguments() {
  [ "$#" -eq 0 ] && process_info --info && return

  while [ "$#" -gt 0 ]; do
    case $1 in
    -h | --help | -v | --version)
      process_output "$1"
      return
      ;;
    -d | --debug | --test) process_tests ;;
    *) process_info "$1" ;;
    esac

    #@ Continue to the next argument
    shift
  done
}

prepare_environment() {
  set_defaults() {
    unset output info
    exit_code=0
  } && set_defaults

  weHave() {
    #@ Check if a command exists
    # type "$1" >/dev/null 2>&1
    command -v "$1" >/dev/null 2>&1
  }

  get_os_type() {
    #@ Fetch the system type from the first available tool
    if [ "$info" ]; then
      :
    elif weHave uname; then
      info="$(uname --kernel-name)"
    elif weHave python; then
      info="$(
        python -c 'import platform; print(platform.system())'
      )"
    elif [ -n "$OSTYPE" ]; then
      info="$OSTYPE"
    else
      return 1
    fi

    case "$(
      printf "%s" "$info" | tr '[:upper:]' '[:lower:]'
    )" in
    *linix* | *gnu*) info="GNU/Linux" ;;
    *darwin*) info="Mac" ;;
    *cygwin* | *msys* | *mingw*) info="Windows" ;;
    *freebsd*) info="FreeBSD" ;;
    *netbsd*) info="NetBSD" ;;
    *openbsd*) info="OpenBSD" ;;
    *hp*) info="HP" ;;
    *solaris* | *sunos*) info="Solaris" ;;
    *aix*) info="AIX" ;;
    *irix*) info="IRIX" ;;
    *) return 1 ;;
    esac

    #@ Update type for WSL Systems
    [ -n "$WSL_DISTRO_NAME" ] &&
      info="Windows Subsystem for Linux [WSL]"
  }

  get_os_name() {
    if [ "$info" ]; then
      :
    elif [ -f "/etc/debian_version" ]; then
      info="Debian"
    elif [ -f "/etc/redhat-release" ]; then
      info="Red Hat"
    elif [ -f "/etc/os-release" ]; then
      info="$(awk -F '"' '/PRETTY_NAME/ {print $2}' /etc/os-release)"
    elif [ -f "/etc/issue" ]; then
      #@ Extract the line containing "Welcome"
      welcome_line="$(awk '/Welcome/{print; exit}' /etc/issue)"

      #@ Use parameter expansion to extract all columns after "Welcome to"
      after_welcome="${welcome_line#*Welcome to }"

      #@ Extract the first 2 columns
      info="$(printf "%s\n" "$after_welcome" | awk '{print $1 " " $2}')"
    elif weHave hostnamectl; then
      info="$(hostnamectl | awk -F ': ' '/Operating System/ {print $2}')"
    elif weHave uname; then
      #@ Extract the version number
      info="$(uname --kernel-name)" # eg. MINGW64_NT-10.0-22621
      info="${info#*-}"             # eg. 'MINGW64_NT-10.0-22621' ->'10.0-22621'
      info="${info%%-*}"            # eg. '10.0-22621' -> '10.0'
    elif weHave python; then
      info="$(python -mplatform)" # Windows-10-10.0.22621-SP0

      #@ Extract everything after the OS type
      case "$info" in
      Windows*)
        # eg. 'Windows-10-10.0.22621-SP0' ->'10.0.22621-SP0'
        info="${info#*-*-}"
        ;;
      *)
        info="${info#*-}" # eg. '10.0-22621' from 'Darwin-20.6.0-x86_64-i386-64bit'
        ;;
      esac

      #@ Extract the distro name
      info="${info%%-*}" # eg. '10.0-22621' -> '10.0'
    else
      return 1
    fi

    #@ Extract integer if decimal is empty
    info="${info%%.0}" # eg. '10.0' -> '10'
  }

  get_os_kernel() {
    if [ "$info" ]; then
      :
    elif weHave uname; then
      info="$(uname --kernel-release)"
    else
      return 1
    fi
  }

  get_os_architecture() {
    if [ "$info" ]; then
      :
    elif weHave arch; then
      info="$(arch)"
    elif weHave uname; then
      info="$(uname --machine)"
    else
      return 1
    fi
  }

  get_hostname() {
    if [ "$info" ]; then
      :
    elif weHave uname; then
      info="$(uname --nodename)"
    else
      return 1
    fi
  }

  get_username() {
    [ -n "${user+x}" ] && info="$user"
    [ -n "${USER+x}" ] && info="$USER"
    [ -n "${USERNAME+x}" ] && info="$USERNAME"
  }

  get_git() {
    weHave git || return 1

    case "$1" in
    url | remote) info="$(git remote get-url origin 2>/dev/null)" ;;
    platform)
      regex="s#https://[^@]\+@##; s#git@\([^:]\+\):.*#\1#; s#https\?://##; s#/.*##"
      info="$(
        process_info --git-url | sed "$regex"
      )"
      ;;
    # owner)
    #   info
    user)
      echo "$regex"
      from_url="$(
        get_remote_url | sed --quiet 's#https://\([^:]\+\):.*@.*#\1#p'
      )"
      from_config="$(git config --get user.name)"
      from_owner="$(process_info --git-owner)"
      from_system="$(process_info --user)"

      if [ "$info" ]; then
        :
      elif [ "$from_url" ]; then
        info="$from_url"
      elif [ "$from_config" ]; then
        info="$from_config"
      elif [ "$from_owner" ]; then
        info="$from_owner"
      elif [ "$from_system" ]; then
        info="$from_system"
      fi
      ;;
    email)
      info="$(
        git config --local user.email ||
          git config --global user.email
      )"
      ;;
    branch) info="$(git branch --show-current)" ;;
    message) info="$(git log -1 --pretty=%B)" ;;
    dir) info="$(git rev-parse --show-toplevel)" ;;
    *)
      info="$(
        printf "%s | %s | %s | %s | %s | %s" \
          "$(process_info --git-name)" \
          "$(process_info --git-email)" \
          "$(process_info --git-branch)" \
          "$(process_info --git-dir)" \
          "$(process_info --git-remote)" \
          "$(process_info --git-message)"
      )"
      ;;
    esac
  }

  get_shell() {
    case $SHELL in
    *bash*) info="Bourne Again SHell ${BASH_VERSION}" ;;
    *zsh*) info="Z SHell" ;;
    *dash*) info="Debian Almquist SHell" ;;
    *fish*) info="Friendly Interactive SHell" ;;
    *nu*) info="nuSHell" ;;
    *) ;;
    esac

    [ "$info" ] && info="$info | $SHELL"
  }

  get_hardware_model() {
    if [ "$info" ]; then
      :
    elif weHave powershell; then
      #@ Create a helper script to store the hardware info
      hardware_info_script="/tmp/hardware_info_script.ps1"
      [ -f "$hardware_info_script" ] || {
        line1="\$hwInfo = Get-WmiObject -Class Win32_ComputerSystem"
        line2="Write-Host \$hwInfo.Manufacturer \$hwInfo.Model"
        printf "%s\n%s\n" "$line1" "$line2" >"$hardware_info_script"
      }
      info="$(
        powershell -ExecutionPolicy Bypass -File "$hardware_info_script"
      )"
    fi
  }

  get_package_manager() {

    #@ Select the first package found manager from thge list
    known_package_managers="
      nix
      apt
      dnf
      pacman
      yum
      zypper
      brew
      winget
      choco
      scoop
      flatpak
      snap
      cargo
      pip
      pipx
    "

    for package_manager in $known_package_managers; do
      if weHave "$package_manager" in; then
        break
      fi
    done

    #@ Throw an error if the package manager is not found
    [ "$package_manager" ] || return 1

    #@ Return the package manager
    printf "%s\n" "$package_manager"
  }

  get_window_manager() {
    if [ "$info" ]; then
      :
    elif weHave plasmashell; then
      info="KDE Plasma $(plasmashell --version | cut -d ' ' -f 2)"
    elif weHave gnome-shell; then
      info="GNOME $(gnome-shell --version | cut -d ' ' -f 2)"
    elif weHave xfce4-session; then
      info="Xfce $(xfce4-session --version | cut -d ' ' -f 2)"
    elif weHave mate-session; then
      info="MATE $(mate-session --version | cut -d ' ' -f 2)"
    elif weHave cinnamon; then
      info="Cinnamon $(cinnamon --version | cut -d ' ' -f 2)"
    elif weHave wmctrl; then
      # info="$(wmctrl --mutter |  grep "Name" | sed 's/^.*:[[:space:]]*//')"
      # info=$(wmctrl -m | awk -F ': ' '/Name/ {print $2}')
      info="$(wmctrl --mutter | awk -F ':\\s*' '/Name/ {print $2}')"
    elif weHave xprop; then
      info=$(xprop -root _NET_WM_NAME | awk -F '"' '{print $2}')
    elif [ "$XDG_CURRENT_DESKTOP" ] || [ "$DESKTOP_SESSION" ]; then
      de="$(
        printf "%s" "${XDG_CURRENT_DESKTOP:-$DESKTOP_SESSION}" |
          tr '[:upper:]' '[:lower:]'
      )"

      case "$de" in
      *kde* | *plasma*) info="KDE Plasma" ;;
      *xfce*) info="Xfce" ;;
      *mate*) info="MATE" ;;
      *cinnamon*) info="Cinnamon" ;;
      *lxde*) info="LXDE" ;;
      *lxqt*) info="LXQt" ;;
      *deepin*) info="Deepin" ;;
      *pantheon*) info="Pantheon" ;;
      *budgie*) info="Budgie" ;;
      *gnome*flashback*) info="GNOME Flashback" ;;
      *gnome*classic*) info="GNOME Classic" ;;
      *gnome*) info="GNOME" ;;
      *enlightenment* | *e1* | *e2* | *e3*) info="Enlightenment" ;;
      *unity*) info="Unity" ;;
      *lumina*) info="Lumina" ;;
      esac
    else
      get_os_type
    fi
  }

  get_sys_info() {
    info="$(
      printf "%s | %s | %s | %s | %s" \
        "$(process_info --type)" \
        "$(process_info --distro)" \
        "$(process_info --kernel)" \
        "$(process_info --host)" \
        "$(process_info --user)"
    )"
  }

  get_sys_label() {
    info="$(
      printf "%s@%s|%s|%s" \
        "$(process_info --user)" \
        "$(process_info --host)" \
        "$(process_info --type)" \
        "$(process_info --distro)" |
        tr ' ' '_'
    )"
  }
}

prepare_tests() {
  tests="
    fetch_via_printf
    fetch_via_loop
  "

  fetch_via_printf() {
    printf "%s: %s\n" "        OS Type" "$(process_info --type)"
    printf "%s: %s\n" "      OS Distro" "$(process_info --distro)"
    printf "%s: %s\n" "      OS Kernel" "$(process_info --kernel)"
    printf "%s: %s\n" "OS Architecture" "$(process_info --arch)"
    printf "%s: %s\n" "       Hostname" "$(process_info --host)"
    printf "%s: %s\n" "       Username" "$(process_info --user)"
    printf "%s: %s\n" " Terminal Shell" "$(process_info --shell)"
    printf "%s: %s\n" "Package Manager" "$(process_info --pacman)"
    printf "%s: %s\n" "Windows Manager" "$(process_info --wm)"
    printf "%s: %s\n" "        OS Info" "$(process_info --info)"
    printf "%s: %s\n" "       OS Label" "$(process_info --label)"
  }

  fetch_via_loop() {
    # Labels and options
    info_labels="
      OS Type
      OS Distro
      OS Kernel
      OS Architecture
      Hostname
      Username
      Terminal Shell
      Package Manager
      Windows Manager
      OS Info
      OS Label
    "

    info_options="
      --type
      --distro
      --kernel
      --arch
      --host
      --user
      --shell
      --pacman
      --wm
      --info
      --label
    "

    IFS='
    '
    label_lines="$info_labels"
    option_lines="$info_options"

    while [ -n "$label_lines" ]; do
      label="${label_lines%%"${IFS}"*}"
      label_lines="${label_lines#*"${IFS}"}"

      option="${option_lines%%"${IFS}"*}"
      option_lines="${option_lines#*"${IFS}"}"

      [ "$label" ] && [ "$option" ] &&
        printf "%s: %s\n" \
          "$label" \
          "$(eval process_info "$option")"
    done
  }
}

process_info() {
  case $1 in
  -t | --type) get_os_type ;;
  -o | --os | --distro) get_os_name ;;
  -k | --kernel) get_os_kernel ;;
  -a | --arch) get_os_architecture ;;
  -n | --host | node) get_hostname ;;
  -m | --model) get_hardware_model ;;
  -u | --user) get_username ;;
  -s | --shell) get_shell ;;
  -p | --pacman) get_package_manager ;;
  -w | --wm) get_window_manager ;;
  -b | --browser) get_browser ;;
  -l | --label) get_sys_label ;;
  --git-dir) get_git dir ;;
  --git-platform) get_git platform ;;
  --git-owner) get_git owner ;;
  --git-name) get_git name ;;
  --git-user) get_git user ;;
  --git-email) get_git email ;;
  --git-url) get_git url ;;
  --git-pat) get_git pat ;;
  --git-branch) get_git branch ;;
  --git-message) get_git message ;;
  -g | --git) get_git ;;
  -i | --info | *) get_sys_info ;;
  esac

  if [ "$info" ]; then
    #@ Sent the information to the printer
    process_output "$info"
  else
    #@ Failure to fill the variable should result in an error code
    exit_code=1
    return "$exit_code"
  fi
}

process_output() {
  case "$1" in
  -h | --help) output="HELP" ;;
  -v | --version) output="VERSION" ;;
  esac

  printf "%s" "${output:-"$*"}"
}

process_tests() {
  # echo Testing
  for test in $tests; do
    printf "Test: %s\n" "$test"
    time eval "$test"
    printf "\n"
  done
}

point_of_exit() {
  exit "$exit_code"
}

point_of_entry "$@"
