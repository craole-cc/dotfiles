#!/bin/sh
# shellcheck disable=SC2154

# ===================================================================
#@		                           	DATA			                       @#
# ===================================================================

__info__() {
  _cmd_PATH="$(PathOf "$0")"
  _cmd_NAME="$(basename "$_cmd_PATH")"
  _cmd_HOME="$(dirname -- "$_cmd_PATH")"
  _cmd_VERSION="1.0"
  _cmd_DESCRIPTION="Transform strings, particularily case and space."
  _cmd_DEPENDENCIES="perl, sed, tr, printf, getoptions, __cmd_exists__"
  _cmd_USAGEGUIDE="$(
    cat <<USAGE_GUIDE
    #>----------------------------------------------------<#
                                                $_cmd_NAME
    #>----------------------------------------------------<#
        $_cmd_DESCRIPTION
    #>----------------------------------------------------<#
                  command <[options]> <[arguments]>
              $_cmd_NAME --sentence "string to transform"
    #>----------------------------------------------------<#
        -h --help       |>     Usage guide
        -d --version    |>     Version
        -V --verbose    |>     Show changes
        -t --sentence   |>     Sentence case
        -p --proper     |>     Proper/Title case
        -u --upper      |>     Upper case
        -l --lower      |>     Lower case [default]
        -t --trim       |>     Remove spaces [default]
        -s --delimiter  |>     Accept delimiter eg. \"|\"
    #>----------------------------------------------------<#
USAGE_GUIDE
  )"
}

__info__

# ===================================================================
#@		                        GLOBAL TOOLS                         @#
# ===================================================================

#@ Usage display
__help__() {
  printf "%s\n" "$_cmd_USAGEGUIDE"
  # exit 0
}

#@ Version display
__version__() {
  printf "%s\n" "$_cmd_VERSION"
  exit 0
}

#@ Command validation
__cmd_exists__() {
  unalias "$@" >/dev/null 2>&1
  command -v "$@" >/dev/null 2>&1
}

# ===================================================================
#@		                           	OPTS			                       @#
# ===================================================================

parser_definition() {
  setup REST
  disp _cmd_USAGEGUIDE -h --help
  disp _cmd_VERSION -v --version
  param _DATA -i --data -- "accepts --param value / --param=value"
  param _DELIMITER -d --delimiter -- "accepts --param value / --param=value"
  param _FILTER -f --filter -- "accepts --param value / --param=value"
  flag _opt_CASE -s --case-sensitive -- "takes no arguments"
  flag _opt_ALL -a --all -- "takes no arguments"
}

eval "$(getoptions parser_definition) exit 1"

# ===================================================================
#@		                          DEFAULT			                       @#
# ===================================================================

__defaults__() {

  { #@ Tools
    if __cmd_exists__ rg; then
      __filter_by__() {
        if [ "$_opt_CASE" ]; then
          rg --case-sensitive "$*"
        else
          rg --smart-case "$*"
        fi
      }
      __check__() { rg --quiet "$*"; }
      # __info_after__() { rg '.*'"$*" --replace ""; }
      __info_after__() {
        if [ "$_opt_ALL" ]; then
          rg '.*'"$*" \
            --replace "" \
            --trim
        else
          rg '.*'"$*" \
            --replace "" \
            --trim \
            --max-count 1
        fi
      }
    else
      __filter_by__() {
        if [ "$_opt_CASE" ]; then
          grep "$*"
        else
          grep --ignore-case "$*"
        fi
      }
      __check__() { grep --quiet "$*"; }
      __info_after__() {
        if [ "$_opt_ALL" ]; then
          grep --only-matching "$*"'.*' |
            sed "s/$*.*\s//"
        else
          grep --only-matching "$*"'.*' --max-count=1 |
            sed "s/.*$*[ \t]*//"
        fi
      }
    fi
  }

  { #@ Data
    [ "$_DATA" ] || _DATA="$*"
    __cmd_exists__ "$_DATA" && _DATA="$($_DATA)"
    [ -f "$_DATA" ] && _DATA="$(bat "$_DATA")"
    [ -d "$_DATA" ] && _DATA="$(find "$_DATA")"
  }
}

# ===================================================================
#@                             PROCESS                             @#
# ===================================================================

__process__() {
  if [ "$_DELIMITER" ]; then
    printf "%s" "$_DATA" |
      __filter_by__ "$_FILTER" |
      __info_after__ "$_DELIMITER"
  else
    printf "%s" "$_DATA" |
      __filter_by__ "$_FILTER"
  fi
}

# ===================================================================
#@                          ERROR HANDLING                         @#
# ===================================================================

__error__() {
  case $* in
  -s | --string)
    printf "ðŸŸ¥ Please ensure that a valid string is entered.\n"
    __help__
    exit 1
    ;;
  *) ;;
  esac
}

# ===================================================================
#@                             CLEANUP                             @#
# ===================================================================

__cleanup__() {
  unset \
    SENTENCE \
    PROPER \
    UPPER \
    LOWER \
    _DELIMITER \
    _opt__opt_CASE
}

# ===================================================================
#@		                           RUN                             @#
# ===================================================================

#@ Load internal variables
__info__

#@ Establish defaults
__defaults__ "$@"

#@ Filter/Extract Data
__process__

#@ Remove any leftover variables
__cleanup__
