#!/bin/sh

main() {
  establish_env
  execute
}

establish_env() {
  cleanup
  version=2.0
  usage_guide="USAGE [OPTIONS] <ARG>"

  #@ Verbosity
  case "$verbose$verbosity$VERBOSE$VERBOSITY" in
  [1-9] | true) verbose_flag=true ;; esac

  #@ OS Type for chmod and chown
  os_type_script="$DOTS/Bin/base/inf/get_os_type"
  if [ -f "$os_type_script" ]; then
    os_type=$(sh "$os_type_script")
    if [ "$os_type" = "Windows" ]; then
      windows_flag=true
    fi
  fi

  unset test_flag reset_flag

  #| Establish IGNORE path to declare directories to skip
  ignore_file="${SRC_IGNORE:-$DOTS/Admin/ignore}"
  [ -f "$ignore_file" ] || touch "$ignore_file"
}

execute() {
  initialize_source \
    --exclude "archive" "review" "template" "temp" "tmp" \
    --bin "$DOTS/Bin" \
    --env "$DOTS/Environment/export"
}

print_usage_guide() {
  printf "%s\n" "$usage_guide"
  exit "$exit_code"
}

get_sources() {

  prep_ignore() { #? Update .ignore file
    if [ "$ignore_action" = "EXCLUDE" ]; then
      grep --line-regexp --quiet "$1" "$ignore_file" ||
        printf "\n%s" "$1" >>"$ignore_file"
    elif [ "$ignore_action" = "INCLUDE" ]; then
      sed --in-place "/$1/d" "$ignore_file"
    else
      return 0
    fi
  }

  src_exclude() {
    #? Remove blank lines
    sed -i '/^[[:space:]]*$/d' "$ignore_file"

    #? Sort alphabetically
    sort --human-numeric-sort --output "$ignore_file" "$ignore_file"

    #? Prep for use with `grep`
    # sed -e 's/^/\//g' -e 's/$/*/g' "$ignore_file" |
    sed -e 's/^/\//g' "$ignore_file" |
      tr '\n' '|' | sed '$s/|$/\n/'
  }

  src_include() {
    if [ "$(src_exclude)" ]; then
      grep \
        --extended-regexp \
        --invert-match \
        --ignore-case \
        "$(src_exclude)" |
        sort
    else
      sort
    fi
  }

  #? Identify valid sources
  generate_sources() {
    find "$1" | src_include
  }

  if [ ! -e "$1" ]; then
    prep_ignore "$1"
  else
    generate_sources "$1"
  fi
}

process_sources() {

  #| Enable global variable export
  set -o allexport

  #| Process sources recursively
  for src_path in $(get_sources "$1"); do
    [ -d "$src_path" ] && [ "$src_type" = "XDG" ] &&
      case ":${XDG_DATA_DIRS}:" in
      *:"$src_path":*) ;;
      *)
        XDG_DATA_DIRS="${src_path}${XDG_DATA_DIRS:+:${XDG_DATA_DIRS}}"
        [ "$verbose_flag" = true ] && printf "Appended to XDG_DATA_DIRS: %s\n" "${src_path}"
        ;;
      esac

    #| Update PATH directories
    [ -d "$src_path" ] && [ "$src_type" = "BIN" ] &&
      case ":${PATH}:" in
      *:"$src_path":*) ;;
      *)
        PATH="${PATH:+$PATH:}$src_path"
        [ "$verbose_flag" = true ] && printf "Appended to PATH: %s\n" "${src_path}"
        ;;
      esac

    #| Activate Scripts and Variables
    [ -f "$src_path" ] &&

      #| Make scripts executable
      if [ "$src_type" = "BIN" ]; then
        if [ "$verbose_flag" = true ]; then
          [ "$windows_flag" = true ] || chmod --changes +x "$src_path"
        else
          [ "$windows_flag" = true ] || chmod +x "$src_path"
        fi

      #| Load environmental variables from files
      elif [ "$src_type" = "ENV" ]; then
        # shellcheck disable=SC1090
        . "$src_path"
        [ "$verbose_flag" = true ] && printf "Initialized: %s\n" "$src_path"
      fi

  done

  #| Disable global export
  set +o allexport
}

initialize_source() {
  #| Core Arguments
  case "$1" in
  -h | --help)
    exit_code=0
    print_usage_guide
    ;;
  -v | --version)
    printf "%s\n" "$version"
    exit 0
    ;;
  -d | --verbose)
    verbose_flag=true
    shift
    ;;
  -t | --simulate | --test)
    test_flag=true
    shift
    ;;
  -q | --quiet)
    unset verbose_flag
    shift
    ;;
  --ignore-file)
    ignore_file="$2"
    shift 2
    ;;
  *) ;;
  esac

  #| Process Arguments
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --bin) #| Expects a file/directory
      src_type="BIN"
      shift
      ;;
    --env) #| Expects a file/directory
      src_type="ENV"
      shift
      ;;
    --xdg) #| Expects a directory
      src_type="XDG"
      shift
      ;;
    --exclude) #| Expects a string
      ignore_action="EXCLUDE"
      shift
      ;;
    -I | --include) #| Expects a string
      ignore_action="INCLUDE"
      shift
      ;;
    -*)
      printf "Invalid Option: %s\n" "$1"
      exit_code=1
      print_usage_guide
      ;;
    *) ;;
    esac

    if [ "$test_flag" = true ]; then
      # echo "Testing"
      simulate_initialization "$1"
    else
      # echo "Processing"
      process_sources "$1"
    fi

    shift
  done
}

simulate_initialization() {
  # [ "$src_type" ] && printf "\n%s: %s\n" "$src_type" "$1"
  # [ "$ignore_action" ] && printf "%s: %s\n" "$ignore_action" "$1"
  get_sources "$1"
}

cleanup() {
  [ "$reset_flag" = true ] &&
    rm -rf "$ignore_file"

  unset -v \
    BIN_ \
    ENV_ \
    src_path \
    src_type \
    ignore_file \
    reset_flag \
    test_flag \
    verbose_flag
}

main "$@"
