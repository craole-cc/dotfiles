#!/bin/sh

#/> Script Entry-point                              <\
main() { #@ Run the application
  #> Initialization
  init_metadata
  parse_arguments "$@"

  #> Validation
  validate_environment

  #> Termination
  run_process
}

#/> Initialization                                  <\
init_metadata() { #@ Initalize bin_name metadata
  required_arg="shellscript binary file"
  SCRIPT_NAME="$(basename "$0")"
  SCRIPT_VERSION="1.0.0"
  SCRIPT_AUTHOR="Craole"
  SCRIPT_USAGE="$SCRIPT_NAME [OPTIONS] <$required_arg>"
  SCRIPT_DESCRIPTION="allows the user to specify a binary bin_name to check with shellharden"
}

parse_arguments() { #@ Parse command-line arguments
  # echo "1: $1"

  while [ "$#" -gt 0 ]; do
    case $1 in
    -h | --help)
      display_info --usage
      exit 0
      ;;
    -v | --version)
      display_info --version
      exit 0
      ;;
    -b | --bin | -p | --path)
      binary="$2"
      shift
      ;;
    --suggest | --syntax | --transform | --check | --replace)
      shellharden_opt="$1"
      ;;
    *) binary="$1" ;;
    esac
    shift
  done
}

#/> Validation                                      <\
validate_environment() { #@ Run various validation checks

  #@ Check if a path is provided as an argument
  if [ "$binary" ]; then
    binary="$(pathof "$binary")"
  else
    display_info --error-arg
    exit 1
  fi

}

#/> Execution                                       <\
run_process() { #@ Lint with Shellharden

  if
    ! shellharden --check "$binary" &&
      [ "$shellharden_opt" = "--replace" ]
  then
    cp --backup=numbered "$binary" "$binary".bac || {
      display_info --error-bac "$binary"
      exit 1
    }
  fi

  if [ "$shellharden_opt" ]; then
    binary_harden="shellharden $shellharden_opt $binary"
  else
    binary_harden="shellharden $binary"
  fi

  display_info --output "$binary_harden"
  eval "$binary_harden"
}

#/> Output Management                               <\
display_info() { #@ Display infoirmation
  case "$1" in
  --error-arg)
    printf "%s required \nUsage: %s\n" \
      "$required_arg" "$SCRIPT_USAGE"
    ;;
  --error-bac)
    printf "Failed to archive file\n"
    ;;
  --output)
    # if [ "$shellharden_opt" ]; then
    #   printf "%s via %s\n" "$binary" "$shellharden_opt"
    # else
    #   printf "%s\n" "$binary"
    # fi
    printf "%s\n" "$binary_harden"

    ;;
  --version)
    printf "%s" "$SCRIPT_VERSION"
    ;;
  --usage)
    cat <<USAGE
Debin_nameion:
'$SCRIPT_NAME' by $SCRIPT_AUTHOR $SCRIPT_DESCRIPTION

Usage:
$SCRIPT_USAGE

Options:
  --suggest         Suggest changes to make the bin_name more secure.
  --syntax          Check the bin_name syntax for potential errors.
  --transform       Apply suggested changes to the bin_name.
  --check           Check the bin_name for potential security issues.
  --replace         Replace the original bin_name with the transformed bin_name.
  -b, --bin         Specify a binary bin_name to harden.
  -h, --help        Show this documentation.
  -v, --version     Show application version.

Arguments:
  <target_path>       The path to normalize.

Exit status:
  0                   The path was successfully normalized.
  1                   An error occurred.

Examples:
  $SCRIPT_NAME -b $SCRIPT_NAME
  $SCRIPT_NAME --suggest fd
  $SCRIPT_NAME --transform fd

For more information on the available options, see the shellharden documentation.
USAGE
    ;;
  *) printf "%s\n" "$*" ;;
  esac
}

main "$@"
