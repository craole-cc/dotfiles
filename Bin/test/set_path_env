#!/bin/sh
# shellcheck disable=SC1091

collect_garbage() {
  unset var_name possible_dirs possible_names possible_items shell output var_definition var_path success
  unset dirs_lbl dirs dir_cnt names_lbl names name_cnt item_lbl item item_cnt variable_lbl
}

establish_env() {
  collect_garbage

  delimiter="|"
  # result_code=0

  while [ "$#" -gt 0 ]; do
    case "$1" in
    --var) var_name="$2" ;;
    --name | --item | --dir)
      array_name="possible_$(printf "%s" "$1" | sed 's/--//')s"
      while [ "$#" -gt 1 ]; do
        case "$2" in --*) break ;; esac
        eval "$array_name=\"\${$array_name}${delimiter}$(trim "$2")\""
        shift
      done
      ;;
    --type) var_type="$2" ;;
    --output) output="$2" ;;
    --debug) debug=true ;;
    esac
    shift
  done
}

find_item() {
  #DOC - Check if the specified directory contains any of the target files
  # shellcheck disable=SC2016
  process_items \
    --label "Item" \
    --items "$possible_items" \
    --delimiter "$delimiter" \
    --command '[ -e "$item" ]'

  return "$?"
}

# find_dir() {
#   #DOC - Check if the specified directory contains any of the target files
#   # shellcheck disable=SC2016
#   process_items \
#     --label "Directory" \
#     --items "$possible_items" \
#     --delimiter "$delimiter" \
#     --command '
#     if [ -d "$item" ]; then
#     fi
#     '

#   return "$?"

# }

find_path() {
  #DOC - Find and return the path of a directory containing specific subdirectories.
  for location in $possible_dirs; do
    if [ -d "$location" ]; then
      for dirname in $possible_names; do

        #DOC Use shell expansion to find matching directories
        for dir in "$location"/*"$dirname"*/; do
          if [ -d "$dir" ] && find_item "$dir"; then
            printf "%s\n" "${dir%/}"
            # var_path="${dir%/}"
            return 0
          fi
        done
      done
    fi
  done
}

generate_var() {
  echo "PATH: $(find_path)"
  var_path="$(find_path)" || return 1

  var_definition="$(
    case "$var_type" in
    shellscript) print "%s=\"%s\"\n" "$var_name" "$var_path" ;;
    powershell) print "$%s = \"%s\"\n" "$var_name" "$var_path" ;;
    esac
  )"
}

debug_info() {
  dirs_lbl="     Possible dirs"
  printf "%s: " "$dirs_lbl"
  dirs="$(echo "$possible_dirs" | wc --words)"
  dir_cnt=0
  if [ "$dirs" -gt 0 ]; then
    for dir in $possible_dirs; do
      dir_cnt=$((dir_cnt + 1))
      if [ "$dir_cnt" -eq 1 ]; then
        printf "%s\n" "$dir"
      else
        dir_lbl_length=${#dirs_lbl}
        tab_length=$((dir_lbl_length + 2))
        tabs=$(printf "%*s" "$tab_length" "")
        printf "%s%s\n" "$tabs" "$dir"
      fi
    done
  else
    printf "Undefined\n"
  fi

  names_lbl="       Possible Names"
  printf "%s: " "$names_lbl"
  names="$(echo "$possible_names" | wc --words)"
  name_cnt=0
  if [ "$names" -gt 0 ]; then
    for name in $possible_names; do
      name_cnt=$((name_cnt + 1))
      if [ "$name_cnt" -eq 1 ]; then
        printf "%s" "$name"
      else
        name_lbl_length=${#names_lbl}
        tab_length=$((name_lbl_length + 2))
        tabs=$(printf "%*s" "$tab_length" "")
        printf "\n%s%s" "$tabs" "$name"
      fi
    done
  else
    printf "Undefined\n"
  fi
  [ "$names" -gt 1 ] && printf "\n"

  item_lbl="    Possible item"
  printf "%s: " "$item_lbl"
  item="$(echo "$possible_items" | wc --words)"
  item_cnt=0
  if [ "$item" -gt 0 ]; then
    for item in $possible_items; do
      item_cnt=$((item_cnt + 1))
      if [ "$item_cnt" -eq 1 ]; then
        printf "%s\n" "$item"
      else
        item_lbl_length=${#item_lbl}
        tab_length=$((item_lbl_length + 2))
        tabs=$(printf "%*s" "$tab_length" "")
        printf "%s%s\n" "$tabs" "$item"
      fi
    done
  else
    printf "Undefined\n"
  fi

  printf "        Variable Info: %s\n" "$var_name"
  printf "                 Type: %s\n" "$var_type"
  printf "                 Path: %s\n" "$var_path"
  printf "               Output: %s\n" "$output"
  printf "           Definition: %s\n" "$var_definition"

}

export_dots() {
  #DOC - Execute the debug function if debug mode is enabled and initialize the var_name if found

  if [ "$debug" ]; then
    debug_info
  else
    #| Enable global exports
    set -o allexport

    #| Initialize var_name if found
    [ "$(find_var_path)" ] && {
      var_name="$(find_var_path)"
      . "$var_name/.dotsrc"
    }

    #| Disable global exports
    set +o allexport
  fi
}

trim() {
  var="$1"
  var="${var#"${var%%[![:space:]]*}"}"
  var="${var%"${var##*[![:space:]]}"}"
  printf "%s" "$var"
}

process_items() {

  while [ "$#" -gt 0 ]; do
    case "$1" in
    --label) label="$2" ;;
    --items) items=$(trim "$2") ;;
    --delimiter) delimiter="$2" ;;
    --print | --first) print_first=true ;;
    --command) command="$2" ;;
    esac
    shift
  done

  IFS="$delimiter"
  item_count=-1
  for item in $items; do
    item_count=$((item_count + 1))
    [ "$item" ] || continue
    # Store the final item
    final_item="$item"

    if [ "$command" ]; then
      eval "$command" && {
        [ "$print_first" ] && printf "%s" "$item"
        return 0
      }
    else
      if [ "$print_first" ]; then
        printf "%s" "$item"
        return 0
      elif [ "$label" ]; then
        printf "%s %s: %s\n" "$label" "$item_count" "$item"
      else
        printf "%s. %s\n" "$item_count" "$item"
        # return 0
      fi

    fi
  done

  return 1
}

main() {
  #DOC - The main function parses arguments and exports dots if found.
  establish_env "$@"

  # find_item || echo "None of the items were found"
  # found_file="$(find_item)"
  # find_item
  # echo "result_code: $?"
  # echo "File: $found_file"

  # generate_var
  debug_info
  collect_garbage

  # generate_var --shell "$shell" --var "$var_name" --val "$var_path"
  # export_dots
}

# main "$@"
main \
  --item "Item" "Item with spaces" ".dotsrc" \
  --dir "$HOME" "/d/Configuration" "/d/Dotfiles" "/shared/Dotfiles" \
  --name ".dots" "dots" "dotfiles" "global" "config" "common"
# main - --name ".dots" "dotsasd asdas" "dotfiles" "global" "config" "common"
# echo pop
# main \
#   --var "DOTS" \
#   --item ".dotsrc" \
#   --dir "$HOME" "/d/Configuration" "/d/Dotfiles" "/shared/Dotfiles" \
#   --name ".dots" "dots" "dotfiles" "global" "config" "common" \
#   --type "sh" \
#   --output "$HOME/.profile"

# main \
#   --var "PROJECTS" \
#   --item "Rust" "test" \
#   --dir "$HOME" "/d" "/shared" \
#   --name "projects" "project" "documents" \
#   --type "ps" \
#   --output "$HOME/.profile.ps1"
