#!/bin/sh
# shellcheck disable=3044,3045

#TODO: Create a function to build the command
#TODO: Use ssh key, url and email for advanced operation

# @ ============================================== @ #
# @	INFORMATION         			                     @ #
# @ ============================================== @ #
establish_metadata() {
  # _cmd_PATH="$(pathof "$0")"
  _cmd_PATH="$(readlink -f "$0")"
  _cmd_NAME="$(basename "$_cmd_PATH")"
  _cmd_HOME="$(dirname -- "$_cmd_PATH")"
  _cmd_VERSION="1.0"
  _cmd_DESCRIPTION="Simplifies the git update process"
  _cmd_DEPENDENCIES="git"
  _cmd_USAGEGUIDE="$(
    cat <<USAGE_GUIDE
::------------------------------------------------------------::
                          $_cmd_NAME ($_cmd_VERSION)
::------------------------------------------------------------::
  Usage:
    $_cmd_NAME [OPTIONS] <MESSAGE>

  Description:
    $_cmd_DESCRIPTION

  Options:
    -h, --help        Display this usage guide
    -v, --version     Show the current version $_cmd_NAME
    -i, --ignore      Honor .gitignore changes
    -s, --status      Show the git status
    -a, --add         Ensure all files are indexed
    -c, --commit      Record changes to the repository
    -p, --pull        Update the local repository
    -u, --push        Update the remote repository
		-q, --quiet       Suppress output
    --repo            Git Repository URL
    --user            Git User
    --email           Git Email
    --key             Git SSH Private Key

  Defaults:
    repo    |>  $target_repo
    msg     |>  $default_msg
    pull    |>  git pull --quiet
    status  |>  git status --short
    add     |>  git add --all
    commit  |>  git commit --quiet --message="\$msg"
    push    |>  git push --quiet

  Arguments:
    <MESSAGE>  A custom message for the -c/--commit option.

  Examples:
    # Execute with defaults
    $_cmd_NAME

    # Defaults with custom message
    $_cmd_NAME "Updated the README.md"

    # Include 'git rm -r --force --cached .'
    $_cmd_NAME --ignore "Added cache to .gitignore"

  Dependencies:
    $_cmd_DEPENDENCIES
::------------------------------------------------------------::
USAGE_GUIDE
  )"
}

# @ ============================================== @ #
# @	ENVIRONMENT         			                     @ #
# @ ============================================== @ #
establish_defaults() {
  # | Actions
  pull="${pull:-true}"
  ignore="${ignore:-}"
  diff="${diff:-}"
  status="${status:-true}"
  add="${add:-true}"
  commit="${commit:-true}"
  push="${push:-true}"

  # | Message
  default_msg="Updated via geet"
  verbose="${verbose:-true}"

  # | Paths
  git rev-parse --show-superproject-working-tree >/dev/null 2>&1 &&
    git_dir_super="$(git rev-parse --show-superproject-working-tree)"

  git rev-parse --show-toplevel >/dev/null 2>&1 &&
    git_dir="$(git rev-parse --show-toplevel)"

  git remote get-url origin >/dev/null 2>&1 &&
    actual_repo="$(git remote get-url origin)"

  target_repo="${target_repo:-$actual_repo}"
  geet_dir="${git_dir_super:-$git_dir}"
  geet_modules="$geet_dir/.gitmodules"

  # | Dependencies
  _cmd_DEPENDENCIES=$(
    printf "%s" "$_cmd_DEPENDENCIES" | tr -s -c '[:alnum:]' ' '
  )
}

establish_environment() {
  # | Ensure dependencies are present
  [ "$debug" ] || validate_dependencies

  # | Clear previously set variables
  unset msg push pull reset status commit add

  # | Parse arguments from CLI arguments
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -p | --pull)
      pull=true
      ;;
    -i | --ignore)
      ignore=true
      ;;
    -D | --diff)
      diff=true
      ;;
    -s | --status)
      status=true
      ;;
    -a | --add)
      add=true
      ;;
    -c | --commit)
      commit=true
      [ "$2" ] && {
        msg="$2"
        shift
      }
      ;;
    -u | --push)
      push=true
      ;;
    -R | --sub* | --recurse)
      recurse=true
      [ "$2" ] && {
        submodule="$2"
        shift
      }
      ;;
    -q | --quiet)
      unset verbose
      ;;
    --gitisuper)
      get_geet_dir=true
      ;;
    --gitis)
      get_git_dir=true
      ;;
    -h | --help)
      display_info --usage
      ;;
    -v | --version)
      display_info --version
      ;;
    -vv | --verbose)
      verbose=true
      ;;
    -d | --debug)
      debug=true
      ;;
    -m | --m*)
      msg="$2"
      ;;
    --ci) ci=true ;;
    -*) ;;
      # TODO: Add support for initalization
      # --key)
      # 	[ "$2" ] || display_info --error "SSH Key required"
      # 	key="$2"
      # 	;;
      # -r | --repo)
      # 	[ "$2" ] || display_info --error \
      # 		"Git repository required"
      # 	target_repo="$2"
      # 	;;
      # --user)
      # 	[ "$2" ] ||
      # 		display_info --error \
      # 			"A git repository url is required"
      # 	user="$2"
      # 	;;
      # --email)
      # 	[ "$2" ] ||
      # 		display_info --error \
      # 			Aye"A git repository url is required"
      # 	email="$2"
      # 	;;
      # --dir)
      # 	[ "$2" ] || display_info --error \
      # 		"A local git directory is required"
      # 	dir="$2"
      # ;;
    *)
      msg="$1"
      ;;
    esac

    shift
  done

  # | Update defaults, if necessary
  establish_defaults
}

# @ ============================================== @ #
# @	VALIDATION             	                       @ #
# @ ============================================== @ #

validate_dependencies() {
  # | Set default values for local variables
  missing_deps=""
  missing_deps_count=0

  # | Validate dependencies as executable files
  #TODO: PathOf Dependency
  # for dependency in $_cmd_DEPENDENCIES; do
  #   pathof "$dependency" --is-executable ||
  #     if [ -n "$missing_deps" ]; then
  #       missing_deps="$missing_deps, $dependency"
  #     else
  #       missing_deps="$dependency"
  #     fi
  # done

  # | Continue the program if dependency paths are validated
  [ "$missing_deps" ] || return

  # | Count the number of missing dependencies
  missing_deps_count="$(
    printf "%s\n" "$missing_deps" |
      tr ',' '\n' | wc -l
  )"

  # | Update the error message based on the count
  msg="Missing dependency"
  [ "$missing_deps_count" -gt 1 ] && msg="Missing dependencies"

  # | Halt the program and report missing dependencies
  console_log --error "$msg" "$missing_deps"
  exit 2
}

validate_local_repo() {

  # | Check if the folder is part of a valid git repository
  [ "$geet_dir" ] || {
    console_log --error \
      "Invalid Directory" \
      "Git has not been initialized in this directory"
    exit 2
  }

  [ "$target_repo" ] || {
    console_log --error \
      "Invalid Repository" \
      "Ensure the origin is set"
    exit 2
  }

  # | Check if the remote origin URL matches the expected repository URL
  [ "$actual_repo" = "$target_repo" ] || {
    console_log --error \
      "invalid local repository" \
      "expected: $target_repo" \
      "  actual: $actual_repo"
    exit 3
  }
}

validate_submodules() {
  # | Ensure we are running our commands from the topmost git_dir
  work_in "$geet_dir"

  #| Ensure the project has submodules
  if [ -f "$geet_modules" ]; then
    submodules=$(
      awk -F'"' 'BEGIN {ORS=" "} /^\[submodule "[^"]+"\]/{print $2}' \
        "$geet_modules"
    )

    # shellcheck disable=2086
    set -- $submodules
  else
    console_log --error \
      "Submodules Missing. Ensure .gitmodules exists at the project root" \
      "$geet_modules"
    exit 2
  fi

  # | Exit early if submodule is unspecified
  [ "$submodule" ] || {
    console_log --info \
      "Including submodule(s)" \
      "$@"

    return 0
  }

  #| Validate the requested submodule
  valid=false
  submodule="${submodule%%\\}" # Remove trailing backslash on Windows
  submodule="${submodule%/}"   # Remove trailing slash, if any
  submodule="${submodule#/}"   # Remove leading slash, if any

  for item in $submodules; do
    case "$item" in "$submodule") valid=true break ;; esac
  done

  # shellcheck disable=2086
  if [ "$valid" = false ]; then
    console_log --warn "'$submodule' is not a valid submodule"

    # | Prompt the user for confirmation
    printf "Did you intend this as the commit message? [y/N]: "
    read -r response

    case "$response" in
    [yY])
      return 0
      ;;
    *)
      console_log --error \
        "Invalid Submodule. See valid submodules" "$@"
      exit 1
      ;;
    esac
  fi

}

# @ ============================================== @ #
# @	UTILITIES			                                 @ #
# @ ============================================== @ #
display_info() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --usage)
      # console_log --ll "$_cmd_USAGEGUIDE"
      printf "%s" "$_cmd_USAGEGUIDE"
      exit=true
      ;;
    --version)
      console_log --ll "$_cmd_VERSION"
      exit=true
      ;;
    --error)
      code="$2" && shift 2
      console_log --error "$@" -ll
      exit=true
      ;;
    --code) code="$2" ;;
    esac
    shift
  done

  [ "$exit" ] && exit "${code:-0}"
}

work_in() {
  cd "$1" >/dev/null 2>&1 || {
    console_log --error \
      "Failed to access the directory" \
      "$1"
    exit 4
  }
}

# @ ============================================== @ #
# @	EXECUTE  	                                     @ #
# @ ============================================== @ #
execute_git_actions() {
  # | Ensure we are running our commands from the target git_dir
  work_in "$1"

  # | Honor changes to gitignore
  [ "$ignore" ] && git rm -r --force --cached .

  # | Check if there are changes
  [ "$(git status --porcelain)" ] || return 0

  # | Lint
  type treefmt >/dev/null 2>&1 &&
    if [ "$ci" ]; then
      treefmt --no-cache --fail-on-change || return 1
      # TODO: There is a --ci flag in treefmt that simplifies this, check and use it
    else
      treefmt
    fi

  # | Update the local repository
  [ "$pull" ] && git pull --quiet

  # | Display changes
  if [ "$diff" ]; then
    git diff
  elif [ "$status" ]; then
    git status --short
  fi

  # | Add untracked files
  [ "$add" ] && git add --all

  # | Commit changes
  [ "$msg" ] || {
    default_msg=$(git log -1 --pretty=%B)
    printf "Enter a commit message [Default: %s ]: " "$default_msg" && read -r msg
  }
  [ "$commit" ] && git commit --quiet --message="${msg:-"$default_msg"}"

  # | Update the remote repository
  [ "$push" ] && git push --recurse-submodules=check --quiet
}

execute_process() {
  # | Ensure the directory is a valid git project
  [ "$debug" ] || validate_local_repo

  #| Return GIT_DIR if requested
  [ "$get_geet_dir" ] && {
    console_log "$geet_dir"
    exit 0
  }

  [ "$get_git_dir" ] && {
    console_log "$git_dir"
    exit 0
  }

  # | Execute the git actions
  if [ "$recurse" ]; then
    validate_submodules

    geet_dir_sub="${geet_dir}/${submodule}"
    if [ "$submodule" ] && [ -d "$geet_dir_sub" ]; then
      execute_git_actions "$geet_dir_sub"
    else
      for module in $submodules; do
        geet_dir_sub="${geet_dir}/${module}"
        execute_git_actions "$geet_dir_sub"
      done
    fi
  else
    execute_git_actions "$geet_dir"
  fi
}

execute_tests() {
  display_info "Testing" "$_cmd_PATH"

  test_execute_process() {

    if [ "$recurse" ]; then
      validate_submodules

      geet_dir_sub="${geet_dir}/${submodule}"
      if [ "$submodule" ] && [ -d "$geet_dir_sub" ]; then
        test_execute_git_actions "$geet_dir_sub"
      else
        for module in $submodules; do
          geet_dir_sub="${geet_dir}/${module}"
          test_execute_git_actions "$geet_dir_sub"
        done
      fi
    else
      test_execute_git_actions "$geet_dir"
    fi
  }

  test_execute_git_actions() {
    work_in "$1"
    console_log --info "  path" "$PWD"
    console_log --info "ignore" "$ignore"
    console_log --info "  pull" "$pull"
    console_log --info "  diff" "$diff"
    console_log --info "status" "$status"
    console_log --info "   add" "$add"
    console_log --info "commit" "$commit"
    console_log --info "   msg" "$msg"
    console_log --info "  push" "$push"
  }

  test_execute_process
}

# @ ============================================== @ #
# @	ENTRY-POINT                                    @ #
# @ ============================================== @ #
main() {
  # | Initialize the script
  establish_defaults
  establish_metadata

  # | Initialize variables
  establish_environment "$@"

  # | Run the necessary process
  if [ "$debug" ]; then
    execute_tests
  else
    execute_process
  fi
} && main "$@"
