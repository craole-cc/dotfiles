#!/bin/sh

weHave_cargo() {
  #@ Check if cargo is installed
  cargo --help >/dev/null 2>&1 || {
    printf "%s\n%s" \
      "Please ensure 'cargo' is installed and in your PATH." \
      "See https://www.rust-lang.org/tools/install for more information."
    exit 1
  }
}

display_usage() {
  printf "Usage: %s [OPTIONS] [COMMAND]\n" "$(basename "$0")"
  printf "Options:\n"
  printf "  -h, --help                   Display this help message\n"
  printf "Modes:\n"
  printf "  -W, --watch                  Enable watch mode\n"
  printf "  -L, --lib                    Enable lib mode\n"
  printf "Commands:\n"
  printf "  -a, --add <PACKAGE>          Add packages to the project\n"
  printf "  -x, --remove <PACKAGE>       Remove packages from the project\n"
  printf "  -i, --install <PACKAGE>      Install packages to the system\n"
  printf "  -u, --uninstall <PACKAGE>    Uninstall packages from the system\n"
  printf "  -b, --build                  Build in release mode\n"
  printf "  -c, --clean                  Clean the project\n"
  printf "  -t, --test [NAME]            Run tests\n"
  printf "  -r, --run [OPTIONS]          Run the application\n"
}

parse_arguments() {
  #@ Options
  for args in "$@"; do
    case "$args" in -*W*) watch=true ;; esac
    case "$args" in -*L*) opt="$opt --lib" ;; esac
    case "$args" in -*Q*) opt="$opt --quiet" ;; esac
    case "$args" in -*R*) opt="$opt --release" ;; esac
    case "$args" in -*A*) opt="$opt --all-features" ;; esac
  done

  #@ Commands
  case $1 in
  -h | --help) display_usage && exit 0 ;;
  -a*)
    #@ Command
    cmd="add"

    #@ Options
    unset opt

    #@ Arguments
    unset arg
    ;;
  -b*)
    #@ Command
    cmd="build"

    #@ Options
    opt="$opt --release"
    case $1 in
    -b*b*)
      if [ "$2" ]; then
        opt="$opt --bin $2"
      else
        opt="$opt --bins"
      fi
      ;;
    -b*t*)
      if [ "$2" ]; then
        opt="$opt --test $2"
      else
        opt="$opt --tests"
      fi
      ;;
    -b*e*)
      if [ "$2" ]; then
        opt="$opt --example $2"
      else
        opt="$opt --examples"
      fi
      ;;
    -b*w*)
      shift
      opt="$opt --workspace $1"
      ;;
    -b*x*)
      [ "$2" ] && {
        shift
        opt="$opt --exclude $*"
      }
      ;;
    *)
      opt="$opt --all-targets"
      ;;
    esac

    #@ Arguments
    unset arg
    ;;
  -c*)
    #@ Command
    cmd="clean"

    #@ Options

    #@ Arguments
    unset arg
    ;;
  -r*)
    #@ Command
    cmd="run"

    #@ Options
    case $1 in
    -r*b*)
      [ "$2" ] &&
        {
          opt="$opt --bin $2"
          shift
        }
      ;;
    -r*e*)
      [ "$2" ] && {
        opt="$opt --example $2"
        shift
      }
      ;;
    -r*p*)
      [ "$2" ] && {
        opt="$opt --package $2"
        shift
      }
      ;;
    -r*o*)
      [ "$2" ] && {
        opt="$opt --profile $2"
        shift
      }
      ;;
    -r*t*)
      [ "$2" ] && {
        opt="$opt --target $2"
        shift
      }
      ;;
    -r*d*)
      [ "$2" ] && {
        opt="$opt --target-dir $2"
        shift
      }
      ;;
    -r*j*)
      [ "$2" ] && {
        opt="$opt --jobs $2"
        shift
      }
      ;;
    esac

    #@ Arguments
    [ "$2" ] && shift && arg="$*"
    ;;
  -t*)
    #@ Command
    cmd="test"

    #@ Options
    case $1 in
    -t*t*)
      if [ "$2" ]; then
        opt="$opt --test $2"
        shift
      else
        opt="$opt --test $(basename "$PWD")"
      fi
      ;;
    esac

    #@ Arguments
    arg="--nocapture --exact"
    [ "$2" ] && shift && arg="$arg $*"
    ;;
  esac

  #@ Join the command parts
  cmd="$cmd $opt"
  if [ "$arg" ]; then
    cmd="$cmd -- $arg"
  else
    cmd="$cmd $*"
  fi
}

initialize_command() {

  #@ Ensure watch is used only on test and run commands
  case "$cmd" in !"test "* | !"run "*) unset watch ;; esac

  #@ Update the command according to the mode
  if [ "$watch" ]; then
    cmd="cargo watch --quiet --clear --exec \"$cmd\""
  else
    cmd="cargo $cmd"
  fi
}

display_command() {
  #@ Display the command that would be executed
  printf "/> %s\n" "$cmd"
}

execute_command() {
  #@ Execute the command
  eval "$cmd"
}

main() {
  weHave_cargo || exit 1
  parse_arguments "$@"
  initialize_command
  display_command
  execute_command
} && main "$@"
