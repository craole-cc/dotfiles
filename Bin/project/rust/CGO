#!/bin/sh

weHave_cargo() {
  #@ Check if cargo is installed
  cargo --help >/dev/null 2>&1 || {
    printf "%s\n%s" \
      "Please ensure 'cargo' is installed and in your PATH." \
      "See https://www.rust-lang.org/tools/install for more information."
    exit 1
  }
}

display_usage() {
  printf "Usage: %s [OPTIONS] [COMMAND]\n" "$(basename "$0")"
  printf "Options:\n"
  printf "  -h, --help                   Display this help message\n"
  printf "Modes:\n"
  printf "  -W, --watch                  Enable watch mode\n"
  printf "  -L, --lib                    Enable lib mode\n"
  printf "Commands:\n"
  printf "  -a, --add <PACKAGE>          Add packages to the project\n"
  printf "  -x, --remove <PACKAGE>       Remove packages from the project\n"
  printf "  -i, --install <PACKAGE>      Install packages to the system\n"
  printf "  -u, --uninstall <PACKAGE>    Uninstall packages from the system\n"
  printf "  -b, --build                  Build in release mode\n"
  printf "  -c, --clean                  Clean the project\n"
  printf "  -t, --test [NAME]            Run tests\n"
  printf "  -r, --run [OPTIONS]          Run the application\n"
}

parse_arguments() {
  #@ Help
  for args in "$@"; do
    case "$args" in -[hH] | --help) display_usage && exit 0 ;; esac
  done

  #@ Reset variables
  unset watch cmd opt
  arg="$*"

  #@ Commands
  case $1 in
  -[aA]*)
    #@ Command
    cmd="add"

    #@ Options
    unset opt

    #@ Arguments
    unset arg
    ;;
  -[bB]*)
    #@ Command
    cmd="build"

    #@ Options
    opt="--release"
    case $1 in
    -*[bB]*[bB]*)
      if [ "$2" ]; then
        opt="$opt --bin $2"
      else
        opt="$opt --bins"
      fi
      ;;
    -*[bB]*[lL]*)
      shift
      opt="$opt --lib"
      ;;
    -*[bB]*[tT]*)
      if [ "$2" ]; then
        opt="$opt --test $2"
      else
        opt="$opt --tests"
      fi
      ;;
    -*[bB]*[eE]*)
      if [ "$2" ]; then
        opt="$opt --example $2"
      else
        opt="$opt --examples"
      fi
      ;;
    -*[bB]*[wW]*)
      shift
      opt="$opt --workspace $1"
      ;;
    -*[bB]*[xX]*)
      [ "$2" ] && {
        shift
        opt="$opt --exclude $*"
      }
      ;;
    *) opt="--all-features --all-targets" ;;
    esac

    #@ Arguments
    unset arg
    ;;
  -[cC]*)
    #@ Command
    cmd="clean"

    #@ Options
    # opt="--release"

    #@ Arguments
    unset arg
    ;;
  -[rR]*)
    #@ Command
    cmd="run"

    #@ Options
    opt="--quiet --release"
    case $1 in
    -*[rR]*[bB]*)
      [ "$2" ] &&
        {
          opt="$opt --bin $2"
          shift 2
        }
      ;;
    -*[rR]*[eE]*)
      [ "$2" ] && {
        opt="$opt --example $2"
        shift 2
      }
      ;;
    -*[rR]*p*)
      [ "$2" ] && {
        opt="$opt --package $2"
        shift 2
      }
      ;;
    -*[rR]*P*)
      [ "$2" ] && {
        opt="$opt --profile $2"
        shift 2
      }
      ;;
    -*[rR]*t*)
      [ "$2" ] && {
        opt="$opt --target $2"
        shift 2
      }
      ;;
    -*[rR]*T*)
      [ "$2" ] && {
        opt="$opt --target-dir $2"
        shift 2
      }
      ;;
    -*[rR]*[jJ]*)
      [ "$2" ] && {
        opt="$opt --jobs $2"
        shift 2
      }
      ;;
    *)
      shift
      opt="--all-features"
      ;;
    esac

    #@ Arguments
    unset arg
    [ "$1" ] && arg="-- $*"
    ;;
  -[tT]*)
    #@ Command
    cmd="test"

    #@ Options
    opt="--quiet"
    case $1 in
    -*[tT]*[tT]*)
      if [ "$2" ]; then
        opt="$opt --test $2"
        shift 2
      else
        opt="$opt --test $(basename "$PWD")"
        shift
      fi
      ;;
    *)
      shift
      ;;
    esac

    #@ Arguments
    arg="-- --nocapture --exact"
    [ "$1" ] && arg="$arg $*"
    ;;

  esac

  #@ Join the command parts
  cmd="$cmd $opt $arg"
}

initialize_command() {

  #@ Ensure watch is used only on test and run commands
  case "$cmd" in !"test "* | !"run "*) unset watch ;; esac

  # #@ Update the final command
  if [ "$watch" ]; then
    cmd="cargo watch --quiet --clear --exec \"$cmd\""
  else
    cmd="cargo $cmd"
  fi
}

display_command() {
  #@ Display the command that would be executed
  printf "/> %s" "$cmd"
}

execute_command() {
  #@ Execute the command
  eval "$cmd"
}

main() {
  weHave_cargo || exit 1
  parse_arguments "$@"
  initialize_command
  display_command
  execute_command
} && main "$@"
