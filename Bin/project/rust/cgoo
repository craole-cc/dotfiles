#!/bin/sh

main() {
  scr_name="$(basename "$0")"
  scr_guide="$(
    cat <<EOF
Usage:
  $(basename "$0") <MODES> [COMMAND/OPTION] -- <ARGUMENTS>

Modes:
  -H                Display this help message
  -W                Enable watch mode
  -Q                Enable quiet mode
  -D                Enable verbose mode
  --debug           Enable debug mode

Build Commands: Compile a local package and all of its dependencies
  -b                    Execute the build command with default options
  -bh                   Display help for the build command
  -bb <BIN...>          Build specific binary  (default: all binaries)
  -be <EXAMPLE...>      Build specific example  (default: all examples)
  -bt <TEST...>         Build a specific test (default: all tests)
  -bw <WORKSPACE...>    Build within a workspace
  -bx <TARGET...>       Exclude specified target

Clean Commands: Remove artifacts that cargo has generated in the past
  -c                    Execute the clean command with default options

Install Commands: Install packages to the system
  -i                    Execute the install command with default options
  -iu <PACKAGE>         Install a specific package

Run Commands: Run a binary or example of the local package
  -r                    Run the application
  -rb <BIN_NAME>        Run a specific binary
  -re <EXAMPLE_NAME>    Run a specific example
  -rp <PACKAGE_NAME>    Specify a package to run
  -ro <PROFILE_NAME>    Set the profile for the build
  -rt <TARGET_NAME>     Specify a target triple
  -rd <TARGET_DIR>      Specify the target directory
  -rj <NUM_JOBS>        Set the number of jobs for parallel builds

Test Options: Execute all unit and integration tests and build examples of a local package
  -t                    Run tests with default options
  -tt <TEST_NAME>       Run a specific test (default: current directory name)

Package Commands:
  -a <PACKAGE>          Add packages to the project
  -x <PACKAGE>          Remove packages from the project
  -i <PACKAGE>          Install packages to the system
  -u <PACKAGE>          Uninstall packages from the system

EOF
  )"
  parse_arguments "$@"
  process
}
display_usage() {
  if [ "$#" -eq 0 ]; then
    #@ No arguments
    exit_code=0
  else
    if [ "$1" -eq "$1" ] 2>/dev/null; then
      #@ The first argument is a number
      exit_code="$1"
      shift
    else
      #@ The first argument is not a number
      exit_code=1
    fi
  fi
  #@ Display the error or custom message
  [ "$*" ] &&
    if [ "$exit_code" -ne 0 ]; then
      printf "Error: %s\n\n" "$*"
    else
      printf "%s\n\n" "$*"
    fi

  #@ Display the usage guide
  printf "%s\n" "$scr_guide"

  #@ Terminate
  exit "${exit_code:-0}"
}

cargo_cmd() {
  #@ Check if cargo is installed
  cargo --help >/dev/null 2>&1 || {
    printf "%s\n%s" \
      "Please ensure 'cargo' is installed and in your PATH." \
      "See https://www.rust-lang.org/tools/install for more information."
    exit 1
  }

  if [ "$2" ]; then
    printf "cargo watch --quiet --clear --exec \"%s\"" "$1"
  else
    printf "cargo %s" "$1"
  fi
}

get_option() {
  while [ $# -gt 0 ]; do
    case $1 in
    -p* | --p*)
      [ "$2" ] &&
        if [ "$2" -eq "$2" ] 2>/dev/null; then
          position="$2"
          shift
        else
          printf "Error: Position not a number\n"
          printf "Invalid position: %s\n" "$2"
          exit 66 #? Developer Error - Script Logic Error
        fi

      ;;
    -o* | --o*)
      [ "$2" ] && {
        options="$2"
        shift
      }
      ;;
    *)
      options="${options:-$1}"
      position="${position:-$2}"
      ;;
    esac
    shift
  done

  #@ Update position
  case "$options" in --*) offset=2 ;; -*) offset=1 ;; esac
  position="$(("${position:-1}" + offset))"

  #@ Debug
  # echo "Options: ${#options} [$options] | Position: $position | Offset: $offset"

  #@ Return the option
  if [ "$position" -gt "${#options}" ]; then
    printf "Error: Position out of range\n"
    printf "Invalid Position: %s | Max Position: %s | Actual Option: %s\n" \
      "$position" "${#options}" "$options"
    exit 66 #? Developer Error - Script Logic Error
  else
    printf "%s\n" "$options" | cut -c "$position"
  fi

}

parse_arguments() {

  internal() {
    [ $# -eq 0 ] && display_usage 1 "Missing arguments"

    case "$1" in -h | --help) display_usage ;; esac

    for argument in "$@"; do
      #@ Modes
      case "$argument" in --debug)
        debug=true
        verbose=true
        ;;
      esac
      case "$argument" in -D)
        verbose=true
        verbosity="--verbose"
        ;;
      esac
      case "$argument" in -*Q*) verbosity="--quiet" ;; esac
      case "$argument" in -*W*) watch=true ;; esac
      case "$argument" in -*R*) release=true ;; esac
      case "$argument" in -*H*) display_usage ;; esac
    done
  } && internal "$@"

  external() {
    while [ $# -gt 0 ]; do
      case "$1" in
      -a*)
        #> Command
        cmd="add"

        #> Option
        case "$(get_option "$1")" in
        h)
          opt="--help"
          ;;
        esac

        #> Argument
        unset arg
        ;;
      -b*)
        cmd="build"

        case "$(get_option --opt "$1" --pos 2)" in
        h)
          opt="--help"
          ;;
        b)
          if [ "$2" ]; then
            opt="--bin"
          else
            opt="--bins"
          fi
          ;;
        e)
          if [ "$2" ]; then
            opt="--example"
          else
            opt="--examples"
          fi
          ;;
        l)
          opt="--lib"
          ;;
        n)
          if [ "$2" ]; then
            opt="--bench"
          else
            opt="--benches"
          fi
          ;;
        t)
          if [ "$2" ]; then
            opt="--test"
          else
            opt="--test $(basename "$PWD")"
          fi
          ;;
        r | a) opt="--all-targets --all-features --release" ;;
        w)
          opt="--workspace"
          ;;
        x)
          opt="--exclude"
          ;;
        esac

        while [ $# -gt 1 ]; do
          case "$2" in --) break ;; -*) ;; *) opt="$opt $2" ;; esac
          shift
        done
        ;;
      -c*)
        #@ Command
        cmd="clean"

        #@ Options
        case "$(get_option "$1")" in
        h) opt="--help" ;;
        p)
          shift
          opt="$opt $*"
          ;;
        esac

        #@ Arguments
        unset arg
        ;;
      -r*)
        cmd="run"

        case "$(get_option --opt "$1" --pos 2)" in
        h) opt="--help" ;;
        b) opt="--bin" ;;
        e) opt="--example" ;;
        j) opt="--jobs" ;;
        p) opt="--package" ;;
        o) opt="--profile" ;;
        t) opt="--target" ;;
        d) opt="--target-dir" ;;
        r | a) opt="--all-features --release" ;;
        u | g) opt="--unit-graph" ;;
        esac

        while [ $# -gt 1 ]; do
          case "$2" in -*) ;; *) opt="$opt $2" ;; esac
          shift
        done
        ;;
      -t*)
        cmd="test"

        case "$(get_option --opt "$1" --pos 2)" in
        h)
          opt="--help"
          ;;
        b)
          if [ "$2" ]; then
            opt="--bin"
          else
            opt="--bins"
          fi
          ;;
        e)
          if [ "$2" ]; then
            opt="--example"
          else
            opt="--examples"
          fi
          ;;
        l)
          opt="--lib"
          ;;
        n)
          if [ "$2" ]; then
            opt="--bench"
          else
            opt="--benches"
          fi
          ;;
        t)
          if [ "$2" ]; then
            opt="--test"
          else
            opt="--test $(basename "$PWD")"
          fi
          ;;
        a)
          opt="--all-targets --all-features"
          ;;
        w)
          opt="--workspace"
          ;;
        x)
          opt="--exclude"
          ;;
        esac

        while [ $# -gt 1 ]; do
          case "$2" in --) break ;; -*) ;; *) opt="$opt $2" ;; esac
          shift
        done

        [ "$3" ] && shift

        arg="--nocapture --exact"
        while [ $# -gt 1 ]; do
          case "$2" in --) break ;; -*) ;; *) arg="$arg $2" ;; esac
          shift
        done
        ;;
      *)
        case $1 in
        -*D* | -*Q* | -*R* | -*W* | -H | --debug) ;;
        *) cmd="$cmd $1" ;;
        esac
        ;;
      esac
      shift
    done
  } && external "$@"
}

process() {
  #@ Join the command parts
  [ "$opt" ] || opt="$verbosity $opt"
  [ "$release" ] && opt="$opt --release"
  [ "$arg" ] && arg=" -- $arg"
  cmd="$cmd $opt $arg"

  #@ Ensure watch is used only on test and run commands
  case "$cmd" in "test "* | "run "*) ;; *) unset watch ;; esac

  #@ Update the command according to the mode
  cmd="$(cargo_cmd "$cmd" "$watch")"

  #@ Display the command
  [ "$verbose" ] && printf "/> %s\n" "$cmd"

  #@ Execute the command
  [ "$debug" ] || eval "$cmd"
}

if [ -x "$PWD/cgo.sh" ]; then
  ./cgo.sh "$@"
else
  main "$@"
fi
