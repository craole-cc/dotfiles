#!/bin/sh

establish_utilities() {
  set_verbosity_level() {
    #@ Check for global verbosity settings
    # shellcheck disable=SC2153
    VERBOSITY="$verbose$verbosity$VERBOSE$VERBOSITY"
    [ "$VERBOSITY" ] || VERBOSITY="$1"

    case "$VERBOSITY" in
    [1-9])
      #TODO: accept any integer
      VERBOSITY="$1"
      ;;
    true)
      VERBOSITY=1
      ;;
    false | 0 | '')
      VERBOSITY=0
      ;;
    *)
      printf "%s\n" "Unknown verbosity level: $1"
      VERBOSITY=1
      ;;
    esac

    #@ Make variables available globally
    export VERBOSITY
    [ "$VERBOSITY" -gt 1 ] &&
      printf "Verbosity level set to %s\n" "$VERBOSITY"
  }

  set_dots_path() {
    #@ Set the path to the DOTS directory based in argument
    case "$1" in --default) ;; *) DOTS="$1" ;; esac

    #@ Ensure the path is a directory or default to the current directory
    if [ -d "$DOTS" ]; then
      #@ Print the DOTS variable
      case "$VERBOSITY" in 0) ;; *)
        printf "DOTS: %s\n" "$DOTS"
        ;;
      esac
    else
      # TODO: Find the DOTS directory based on the location of this script
      # This might not be possible with pure POSIX-compliant shell
      # Consider using bashisms
      # $0 will not work because of how the script is sourced
      echo "Unable to determine the DOTS directory"
      return 1

      # #@ Find the path of the current script
      # DOTS_RC="$0"

      # #@ Use readlink to resolve symlinks
      # while [ -L "$DOTS_RC" ]; do
      #   DOTS_RC="$(readlink "$DOTS_RC")"
      # done

      # #@ Set the DOTS variable as the parent directory
      # DOTS="$(cd "$(dirname "$DOTS_RC")" >/dev/null 2>&1 && pwd)"

      # #@ Print the DOTS variable
      # case "$VERBOSITY" in
      # 0) ;;
      # 1) printf "DOTS: %s\n" "$DOTS" ;;
      # *) printf "DOTS set relative to .dotrc: %s\n" "$DOTS" ;;
      # esac
    fi

    [ "$DOTS" ] && export DOTS
  }

  set_dots_ignore() {

    #@ Set the DOTS_IGNORE variable
    case "$1" in --default) shift ;; esac
    DOTS_IGNORE="${1:-$DOTS/.ignore}"

    #@ Create the DOTS_IGNORE file, if necessary
    [ -f "$DOTS_IGNORE" ] || touch "$DOTS_IGNORE"
  }

  set_interactive_shell() {
    #@ Set the preferred interactive shell prompt
    SHELL_INTERACTIVE="${1:-bash}"

    #@ Ensure the variable is available globally
    export SHELL_INTERACTIVE
  }

  get_os_type() {
    if [ "$WSL_DISTRO_NAME" ]; then
      os_type="Windows Subsystem for Linux [WSL]"
    elif [ -f "/proc/version" ]; then
      os_type=$(cat "/proc/version")
    elif command -v uname >/dev/null 2>&1; then
      os_type="$(uname --kernel-name)"
    elif command -v python >/dev/null 2>&1; then
      os_type="$(
        python -c 'import platform; print(platform.system())'
      )"
    elif command -v hostnamectl >/dev/null 2>&1; then
      os_type="$(
        hostnamectl | awk -F ': ' '/Kernel/ {print $2}'
      )"
    fi

    case "$(printf "%s" "$os_type" | tr '[:upper:]' '[:lower:]')" in
    *linux* | *gnu*) os_type="GNU/Linux" ;;
    *wsl* | *microsoft*) os_type="Windows Subsystem for Linux [WSL]" ;;
    *cygwin* | *msys* | *mingw* | *windows*) os_type="Windows" ;;
    *darwin*) os_type="Mac" ;;
    *freebsd*) os_type="FreeBSD" ;;
    *netbsd*) os_type="NetBSD" ;;
    *openbsd*) os_type="OpenBSD" ;;
    *hp*) os_type="HP" ;;
    *solaris* | *sunos*) os_type="Solaris" ;;
    *aix*) os_type="AIX" ;;
    *irix*) os_type="IRIX" ;;
    esac

    printf "%s" "$os_type"
  }

  delete_line_from_file() {
    sed --in-place --expression "/$1/d" "$profile"
  }

  update_user_profile() {
    #@ Define the profile path
    profile="$HOME/.profile"

    #@ Create the profile file if it doesn't exist
    [ -f "$profile" ] || touch "$profile"

    #@ Define the lines with and without quotes
    dots_unquoted="DOTS=$DOTS"
    dots_quoted="DOTS=\"$DOTS\""
    dots_init="[ -f \"\$DOTS/.dotsrc\" ] && . \"\$DOTS/.dotsrc\""

    #@ Check if the DOTS line exists and if it's different or if dots_init is missing
    if grep --quiet --regexp "^DOTS=" "$profile"; then
      {
        #@ Check if the DOTS line matches the current DOTS variable or is quoted
        grep --quiet --regexp "^DOTS=$DOTS" --regexp "^DOTS=\"$DOTS\"" "$profile" ||

          #@ Check if dots_init is missing
          grep --quiet --fixed-strings "$dots_init" "$profile"
      } ||
        {
          #@ If either condition is false, remove both lines
          delete_line_from_file "^DOTS="
          delete_line_from_file "$(printf "%s" "$dots_init" | sed 's/[\/&]/\\&/g')"
        }
    fi

    #@ Append the new lines to the profile file only if they are missing
    if
      ! grep --quiet --regexp "^DOTS=" "$profile" ||
        ! grep --quiet --fixed-strings "$dots_init" "$profile"
    then
      #@ If either line is missing, append both lines
      temp_file=$(mktemp)
      grep --invert-match "^DOTS=" "$profile" |
        grep --invert-match "$dots_init" >"$temp_file"
      printf "\nDOTS=\"%s\"\n%s\n" "$DOTS" "$dots_init" >>"$temp_file"
      mv "$temp_file" "$profile"
      [ "$verbose_flag" ] && printf "Updated DOTS in profile.\n"
    else
      #@ If both lines are present and the DOTS line is the same, no need to update
      [ "$verbose_flag" ] && printf "DOTS in profile is already up to date.\n"
    fi
  }

  set_flags() {
    [ "$(get_os_type)" = "Windows" ] && windows_flag=true
    [ "$VERBOSITY" -gt 0 ] && verbose_flag=true
  }

  print_usage_guide() {
    printf "%s\n" "$usage_guide"
    exit "$exit_code"
  }

  get_sources() {
    prepare_ignore_list() { #? Update .ignore file
      if [ "$ignore_action" = "EXCLUDE" ]; then
        grep --line-regexp --quiet "$1" "$DOTS_IGNORE" ||
          printf "\n%s" "$1" >>"$DOTS_IGNORE"
      elif [ "$ignore_action" = "INCLUDE" ]; then
        sed --in-place "/$1/d" "$DOTS_IGNORE"
      else
        return 0
      fi
    }

    exclude_source() {
      #? Remove blank lines
      sed -i '/^[[:space:]]*$/d' "$DOTS_IGNORE"

      #? Sort alphabetically
      sort --human-numeric-sort --output "$DOTS_IGNORE" "$DOTS_IGNORE"

      #? Prep for use with `grep`
      sed -e 's/^/\//g' "$DOTS_IGNORE" |
        tr '\n' '|' | sed '$s/|$/\n/'
    }

    include_source() {
      if [ "$(exclude_source)" ]; then
        grep \
          --extended-regexp \
          --invert-match \
          --ignore-case \
          "$(exclude_source)" |
          sort
      else
        sort
      fi
    }

    #? Identify valid sources
    generate_sources() {
      find "$1" | include_source
    }

    if [ -e "$1" ]; then
      generate_sources "$1"
    else
      prepare_ignore_list "$1"
    fi
  }

  process_sources() {
    #@ Enable global variable export
    set -o allexport

    #@ Process sources recursively
    for src_path in $(get_sources "$1"); do
      [ -d "$src_path" ] && [ "$src_type" = "XDG" ] &&
        case ":${XDG_DATA_DIRS}:" in
        *:"$src_path":*) ;;
        *)
          XDG_DATA_DIRS="${src_path}${XDG_DATA_DIRS:+:${XDG_DATA_DIRS}}"
          [ "$verbose_flag" ] && printf "Appended to XDG_DATA_DIRS: %s\n" "${src_path}"
          ;;
        esac

      #@ Update PATH directories
      [ -d "$src_path" ] && [ "$src_type" = "BIN" ] &&
        case ":${PATH}:" in
        *:"$src_path":*) ;;
        *)
          PATH="${PATH:+$PATH:}$src_path"
          [ "$verbose_flag" ] && printf "Appended to PATH: %s\n" "${src_path}"
          ;;
        esac

      #@ Activate Scripts and Variables
      [ -f "$src_path" ] &&

        #| Make scripts executable
        if [ "$src_type" = "BIN" ]; then
          if [ "$verbose_flag" ]; then
            [ "$windows_flag" ] || chmod --changes +x "$src_path"
          else
            [ "$windows_flag" ] || chmod +x "$src_path"
          fi

        #@ Load environmental variables from files
        elif [ "$src_type" = "ENV" ]; then
          # shellcheck disable=SC1090
          # EOLor --lf "$src_path"
          . "$src_path"
          [ "$verbose_flag" ] && printf "Initialized: %s\n" "$src_path"
        fi

    done

    #@ Disable global export
    set +o allexport
  }

  initialize_source() {
    #| Core Arguments
    case "$1" in
    -h | --help)
      exit_code=0
      print_usage_guide
      ;;
    -v | --version)
      printf "%s\n" "$version"
      exit 0
      ;;
    -d | --verbose)
      verbose_flag=true
      shift
      ;;
    -t | --simulate | --test)
      test_flag=true
      shift
      ;;
    -q | --quiet)
      unset verbose_flag
      shift
      ;;
    --ignore-file)
      ignore_file="$2"
      shift 2
      ;;
    *) ;;
    esac

    #| Process Arguments
    while [ "$#" -ge 1 ]; do
      case "$1" in
      --bin) #| Expects a file/directory
        src_type="BIN"
        shift
        ;;
      --env) #| Expects a file/directory
        src_type="ENV"
        shift
        ;;
      --xdg) #| Expects a directory
        src_type="XDG"
        shift
        ;;
      --exclude) #| Expects a string
        ignore_action="EXCLUDE"
        shift
        ;;
      -I | --include) #| Expects a string
        ignore_action="INCLUDE"
        shift
        ;;
      -*)
        printf "Invalid Option: %s\n" "$1"
        exit_code=1
        print_usage_guide
        ;;
      *) ;;
      esac

      if [ "$test_flag" = true ]; then
        # echo "Testing"
        simulate_initialization "$1"
      else
        # echo "Processing"
        process_sources "$1"
      fi

      shift
    done
  }

  simulate_initialization() {
    # [ "$src_type" ] && printf "\n%s: %s\n" "$src_type" "$1"
    # [ "$ignore_action" ] && printf "%s: %s\n" "$ignore_action" "$1"
    get_sources "$1"
  }

  cleanup() {
    [ "$reset_flag" = true ] &&
      rm -rf "$DOTS_IGNORE"

    unset -v \
      BIN_ \
      ENV_ \
      src_path \
      src_type \
      ignore_file \
      reset_flag \
      test_flag \
      verbose_flag
  }
}

establish_environment() {
  #@ Reset the environment
  cleanup

  #@ Establish the script environment variables
  set_verbosity_level 0
  set_flags

  #@ Ensure DOTS variable is set if not use the path of the current file
  set_dots_path --default || return 1

  #@ Set the interactive shell
  set_interactive_shell bash

  #@ Establish IGNORE path to declare directories to skip
  set_dots_ignore --default
}

update_launcher() {
  delete_line_from_file() {
    sed --in-place --expression "/$1/d" "$2"
  }

  append_lines_to_file() {
    temp_file=$(mktemp)
    grep --invert-match "^DOTS=" "$1" |
      grep --invert-match "$2" >"$temp_file"
    printf "\nDOTS=\"%s\"\n%s\n" "$DOTS" "$2" >>"$temp_file"
    mv "$temp_file" "$1"
    [ "$verbose_flag" ] && printf "Updated DOTS in %s.\n" "$1"
  }

  update_file() {
    file=$1

    #@ Create the file if it doesn't exist
    [ -f "$file" ] || touch "$file"

    #@ Check if the DOTS line exists and if it's different or if dots_init is missing
    if grep --quiet --regexp "^DOTS=" "$file"; then
      {
        #@ Check if the DOTS line matches the current DOTS variable or is quoted
        grep --quiet --regexp "^DOTS=$DOTS" --regexp "^DOTS=\"$DOTS\"" "$file" ||

          #@ Check if dots_init is missing
          grep --quiet --fixed-strings "$dots_init" "$file"
      } || {
        #@ If either condition is false, remove both lines
        delete_line_from_file "^DOTS=" "$file"
        delete_line_from_file "$(printf "%s" "$dots_init" | sed 's/[\/&]/\\&/g')" "$file"
      }
    fi

    #@ Append the new lines to the file only if they are missing
    if
      ! grep --quiet --regexp "^DOTS=" "$file" ||
        ! grep --quiet --fixed-strings "$dots_init" "$file"
    then
      #@ If either line is missing, append both lines
      append_lines_to_file "$file" "$dots_init"
    else
      #@ If both lines are present and the DOTS line is the same, no need to update
      [ "$verbose_flag" ] && printf "DOTS in %s is already up to date.\n" "$file"
    fi
  }

  #@ Define the profile path
  profile="$HOME/.profile"
  bashrc="$HOME/.bashrc"

  #@ Define the lines with and without quotes
  dots_unquoted="DOTS=$DOTS"
  dots_quoted="DOTS=\"$DOTS\""
  dots_init="[ -f \"\$DOTS/.dotsrc\" ] && . \"\$DOTS/.dotsrc\""

  #@ Update the files
  update_file "$profile"
  [ -f "$bashrc" ] || touch "$bashrc"
  grep --quiet --fixed-strings ". $profile" "$bashrc" ||
    printf "%s\n" ". $profile" >>"$bashrc"
}

execute() {
  #@ Update the dotsrc launcher through .profile and .bashrc
  update_launcher
  printf "Loaded DOTS via %s\n" "$DOTS"

  #@ Load Environment
  initialize_source \
    --exclude "archive" "review" "template" "temp" "tmp" \
    --bin "$DOTS/Bin"
    # --env "$DOTS/Environment/export"

  #@ Load Shell
  # shell.init "$SHELL_INTERACTIVE"

  #@ Load Fonts
  # fonts.init #TODO: This needs to be made portable to work on Windows

  #@ Load Additional Configs
  # DeployConfig git
  # DeployConfig zed

}

main() {
  establish_utilities || return 1
  establish_environment || return 1
  execute
}

main "$@"

# Temporary until I fint the right place to put it

# case "$(uname --all | tr '[:lower:]' '[:upper:]')" in
# *MSYS* | *MINGW* | *CYGWIN*)
#   MSYS=winsymlinks:nativestrict
#   ;;
# esac
